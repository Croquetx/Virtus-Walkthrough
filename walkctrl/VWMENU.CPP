/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VwMenu.h"#include "CVWCntrl.h"#include "AppMssgs.h"#include "AppText.h"#include "ToolDef.h"#include "WalkDefs.h"#include "Informtn.h"#include "VWindow.h"#include "VDocumnt.h"#include "VMain.h"#include "VGraphic.h"#include "VGUtil.h"#include "CVEnvirn.h"/* dude - for check mark */#include "VPane.h"#if VR#include "VWI.h"#endif //VR#if WINDOWS#define V_TILE_STYLE	MDITILE_VERTICAL	// tile the windows across the screen#define H_TILE_STYLE	MDITILE_HORIZONTAL	// tile the windows down the screen#endif // WINDOWSvoidMenuView::ctheMenu(V_Document *doc)	{	cMenu(TXTM_VIEW,doc);	SetMenuEuroKey(menuViewEuroKey);	Append(TXTM_VIEWCH);	Append(TXTM_VIEWNEW);	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93	Append(TXTM_HOMEEDITOR);	Append(TXTM_HOMEVIEW);	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93	Append(TXTM_EDITORHOME);	Append(TXTM_VIEWHOME);	Append(TXTM_OBSM2CTR);	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93	Append(TXTM_ORIGIN);	Append(TXTM_LEVELVIEW);	SetPriority(lowPriority);	SetKey(menuLevelObserver, menuLevelObserverKey);	#if GERMAN		SetKeyPos(menuNewView, menuNewViewKeyPos);		SetKeyPos(menuLevelObserver,menuLevelObserverKeyPos);		SetKeyPos(menuEditorHome, menuEditorHomeKeyPos);		SetKeyPos(menuViewHome,  menuViewHomeKeyPos);		SetKeyPos(menuCenterView, menuCenterViewKeyPos);   	#elif SPANISH		SetKeyPos(menuLevelObserver,menuLevelObserverKeyPos);		SetKeyPos(menuHomeEditor, menuHomeEditorKeyPos);		SetKeyPos(menuHomeView, menuHomeViewKeyPos);		SetKeyPos(menuEditorHome, menuEditorHomeKeyPos);		SetKeyPos(menuViewHome, menuViewHomeKeyPos);		SetKeyPos(menuCenterView, menuCenterViewKeyPos);   	#else  // English default		SetKeyPos(menuHomeEditor, menuHomeEditorKeyPos);		SetKeyPos(menuHomeView, menuHomeViewKeyPos);		SetKeyPos(menuEditorHome, menuEditorHomeKeyPos);		SetKeyPos(menuViewHome, menuViewHomeKeyPos);		SetKeyPos(menuCenterView, menuCenterViewKeyPos);   	#endif // GERMAN	SetEuroKey(menuChangeView, menuChangeViewEuroKey);	SetEuroKey(menuNewView, menuNewViewEuroKey);	SetEuroKey(menuHomeEditor, menuHomeEditorEuroKey);	SetEuroKey(menuHomeView, menuHomeViewEuroKey);	SetEuroKey(menuEditorHome, menuEditorHomeEuroKey);	SetEuroKey(menuViewHome, menuViewHomeEuroKey);	SetEuroKey(menuCenterView, menuCenterViewEuroKey);	SetEuroKey(menuResetOrigin, menuResetOriginEuroKey);	SetEuroKey(menuLevelObserver, menuLevelObserverEuroKey);	viewHNMenu = new(MenuNView);	viewHNMenu->ctheMenu(doc);		viewHCMenu = new(MenuCView);	viewHCMenu->ctheMenu(doc);		SetHeir(menuChangeView,viewHCMenu);	SetHeir(menuNewView,viewHNMenu);	}voidMenuView::SetController(CAVWalkController *ctrl)	{	controller = ctrl;	viewHNMenu->SetController(controller);	viewHCMenu->SetController(controller);	}voidMenuView::Action(int num, long modifier)	{		switch(num)		{											case menuHomeEditor: VSendMessage(MSG_HOMEEDITOR); break;			case menuHomeView: VSendMessage(MSG_HOMEVIEW); break;			case menuEditorHome: VSendMessage(MSG_EDITORHOME); break;			case menuViewHome: VSendMessage(MSG_VIEWHOME); break;			case menuCenterView: VSendMessage(MSG_OBS2CENTER); break;			case menuResetOrigin: VSendMessage(MSG_ORIGIN); break;			case menuLevelObserver: VSendMessage(MSG_RESETTILT); break;			}	}voidMenuView::Preempt()	{		Controller	*ctrl;	int	changeViewState,homeState,viewState,orgState,obsState;		 	ctrl = controller->GetFrontController();	type = ctrl->GetType();			switch(type)		{		case	toolCRTLDesign:			changeViewState = TRUE;			homeState = TRUE;			orgState = TRUE;			obsState = TRUE;			viewState = TRUE;			break;				case	toolCRTLSurface:			changeViewState = TRUE;			homeState = FALSE;			orgState = TRUE;			obsState = FALSE;			viewState = FALSE;			break;					case	toolCRTTumble:			changeViewState = FALSE;			homeState = FALSE;			orgState = TRUE;			obsState = FALSE;			viewState = FALSE;			break;					case	toolCRTLView:			changeViewState = FALSE;			homeState = FALSE;			orgState = FALSE;			obsState = TRUE;			viewState = TRUE;			break;					default:			changeViewState = FALSE;			homeState = FALSE;			orgState = FALSE;			obsState = FALSE;			viewState = FALSE;			break;		}			Activate(menuChangeView, changeViewState);	Activate(menuHomeView, viewState);	Activate(menuHomeEditor, homeState);	Activate(menuViewHome, viewState);	Activate(menuEditorHome, homeState);	Activate(menuCenterView, homeState);	Activate(menuResetOrigin, orgState);	Activate(menuLevelObserver, obsState);	}		voidMenuBView::ctheMenu(V_Document *doc)	{	cMenu(TXTM_VIEW,doc);	Append(TXTM_VTOP);	Append(TXTM_VBOTTOM);	Append(TXTM_VFRONT);		Append(TXTM_VBACK);	Append(TXTM_VLEFT);	Append(TXTM_VRIGHT);	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93	Append(TXTM_VOTHER);	SetKey(menuTop,menuTopKey);    SetKey(menuBottom,menuBottomKey);	SetKey(menuFront,menuFrontKey);    SetKey(menuBack,menuBackKey);	SetKey(menuRight,menuRightKey);	SetKey(menuLeft,menuLeftKey);	SetKey(menuOther,menuOtherKey);	#if SPANISH || ENGLISH    	SetKeyPos(menuBottom, menuBottomKeyPos);	#endif // SPANISH || ENGLISH	SetEuroKey(menuTop,menuTopEuroKey);	SetEuroKey(menuBottom,menuBottomEuroKey);	SetEuroKey(menuFront,menuFrontEuroKey);	SetEuroKey(menuBack,menuBackEuroKey);	SetEuroKey(menuRight,menuRightEuroKey);	SetEuroKey(menuLeft,menuLeftEuroKey);	SetEuroKey(menuOther,menuOtherEuroKey);	}voidMenuBView::SetController(CAVWalkController *ctrl)	{	controller = ctrl;	}voidMenuNView::ctheMenu(V_Document *doc)	{	cMenu(TXTM_VIEW,doc);	Append(TXTM_VTOP);	Append(TXTM_VBOTTOM);	Append(TXTM_VFRONT);		Append(TXTM_VBACK);	Append(TXTM_VLEFT);		Append(TXTM_VRIGHT);	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93	Append(TXTM_VIEWWALK);#if !SPECIAL_EDITION         	// merge SE, vrmadness		// GJR 7/4/95	Append(TXTM_LIGHTING);	#if SPANISH || ENGLISH	  SetKeyPos(menuLight, menuLightKeyPos);	#endif // SPANISH || ENGLISH	SetEuroKey(menuLight,menuLightEuroKey);#endif //!SPECIAL_EDITION		// merge SE, vrmadness		// GJR 7/4/95	#if SPANISH || ENGLISH    	SetKeyPos(menuBottom, menuBottomKeyPos);	#endif // SPANISH || ENGLISH	SetEuroKey(menuTop,menuTopEuroKey);	SetEuroKey(menuBottom,menuBottomEuroKey);	SetEuroKey(menuFront,menuFrontEuroKey);	SetEuroKey(menuBack,menuBackEuroKey);	SetEuroKey(menuRight,menuRightEuroKey);	SetEuroKey(menuLeft,menuLeftEuroKey);	SetEuroKey(menuOther,menuOtherEuroKey);	}	voidMenuNView::Action(int num, long modifier)	{	Controller	*ctrl;	V_Window	*window;	Rect		r;	LaunchInit	launchInit;	FFixed scale = INITFIXXED(0,0x8000);			ctrl = controller->GetFrontController();	if(ctrl)		{		window = ctrl->GetWindow(ctrl->GetType());		window->Locate(&r);		r.top+=16;		}	else		{		GetLimitedScreen(&r);		r.left = 87; r.top = 44;		r.right -= 8; r.bottom -= 8;		}			launchInit.scale = scale;	launchInit.location = r;		switch(num)		{		case menuTop: controller->LaunchController(launchInit,topView); break;			case menuBottom: controller->LaunchController(launchInit,bottomView); break;			case menuFront: controller->LaunchController(launchInit,frontView); break;			case menuBack: controller->LaunchController(launchInit,backView); break;			case menuRight:controller->LaunchController(launchInit,rightView); break;			case menuLeft: controller->LaunchController(launchInit,leftView); break;		case menuWalk: 			pwc(controller)->LaunchController(launchInit,toolCRTLView); 			pwc(controller)->ShowPallette(toolWToolBox,SHOW);			break;	#if !SPECIAL_EDITION         	// merge SE, vrmadness		// GJR 7/4/95		case menuLight: 	VSendMessage(MSG_E_WLIGHT);  break;#endif //!SPECIAL_EDITION		// merge SE, vrmadness		// GJR 7/4/95		}	pwc(controller)->ShowPallette(toolWToolBox,SHOW);	}voidMenuCView::Action(int num, long modifier)	{	switch(num)		{		case menuTop: if(!(modifier&V_SHIFT)) { VSendMessage(MSG_TOPVIEW); break; }		case menuBottom: VSendMessage(MSG_BOTTOMVIEW); break;			case menuFront: if(!(modifier&V_SHIFT)) { VSendMessage(MSG_FRONTVIEW); break; }		case menuBack: VSendMessage(MSG_BACKVIEW); break;			case menuRight: VSendMessage(MSG_RIGHTVIEW); break;			case menuLeft: VSendMessage(MSG_LEFTVIEW); break;		case menuOther: VSendMessage(MSG_OPPVIEW); break;		}	}voidMenuCView::Preempt()	{		Controller	*ctrl;	CAVEnvironment	*environment;	int	viewState,view,type;		 	ctrl = pwc(controller)->GetFrontController();	type = ctrl->GetType();		viewState = (toolCRTLDesign == type) ? TRUE : FALSE;		Activate(menuTop, viewState);	Activate(menuBottom, viewState);	Activate(menuFront, viewState);	Activate(menuBack, viewState);	Activate(menuRight, viewState);	Activate(menuLeft, viewState);		if(viewState) 		{			Select( menuTop , FALSE);		Select( menuBottom , FALSE);		Select( menuFront , FALSE);		Select( menuBack , FALSE);		Select( menuRight , FALSE);		Select( menuLeft , FALSE);				 	switch(ctrl->information->environment->GetView())	 		{	 		case topView: Select( menuTop , TRUE); break;	 		case bottomView: Select( menuBottom , TRUE); break;	 		case frontView: Select( menuFront , TRUE); break;	 		case backView: Select( menuBack , TRUE); break;	 		case rightView: Select( menuRight , TRUE); break;	 		case leftView: Select( menuLeft , TRUE); break;	 		}	 	}	}			voidMenuWindow::ctheMenu(V_Document *doc)	{	controller = NULL;	cMenu(TXTM_WINDOWS,doc);    SetMenuEuroKey(menuWindowEuroKey);#if VWT#if WINDOWS	#if SPANISH	  SetMenuKeyPos(menuWindowKeyPos);   	#endif // SPANISH	Append(TXT_CASCADE);	// PRO-JAP	Append(TXT_TILE);	// PRO-JAP	Append(TXT_ARRANGE_ICONS);	// PRO-JAP	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93#endif //WINDOWS	Append(TXTM_TOOLWINDOW);		Append(TXTM_DEPTHWINDOW);	#if VPRO		Append(TXTM_COORDWINDOW);	/* ABD MERGE-GOURAUD-PRO */  #if !SPECIAL_EDITION	// vpro vrml 	//gjr 07/09/95	Append(TXTM_TEXTUREWINDOW);	SetEuroKey(menuHideTexture, menuHideTextureEuroKey);  #endif#endif // VPRO	LinkMenu(WINDOW_MENU);	SetPriority(highestPriority);/*   jca this doesn't work because of the way we implement FindAccelerator().	 FindAccelerator() expects all normal key things to be less than 0xFF,	 but menuFKey makes the value > 0xFF.  I suppose this could be changed,	 but there isn't time right now. 21FEB94#if WINDOWS	SetKey(menuCascade,menuCascadeKey);	SetKey(menuTile,menuTileKey);#endif*/	SetKey(menuHideTools,menuHideToolsKey);	SetKey(menuHideDepth,menuHideDepthKey);	#if GERMAN	  SetKeyPos(menuTile, menuTileKeyPos);   	#elif SPANISH	  SetKeyPos(menuHideTools,menuHideToolsKeyPos);	  SetKeyPos(menuHideDepth,menuHideDepthKeyPos);	  SetKeyPos(menuHideTexture,menuHideTextureKeyPos);	#else // English default   	  SetKeyPos(menuHideTools,menuHideToolsKeyPos);	#endif // GERMAN#if WINDOWS	SetEuroKey(menuCascade, menuCascadeEuroKey);	SetEuroKey(menuTile, menuTileEuroKey);	SetEuroKey(menuArrange, menuArrangeEuroKey);#endif //WINDOWS	SetEuroKey(menuHideTools, menuHideToolsEuroKey);    SetEuroKey(menuHideDepth, menuHideDepthEuroKey);#if VPRO	SetEuroKey(menuHideCoord, menuHideCoordEuroKey);#endif // VPRO#elif VR	Append(TXTM_GALLERY);	Append(TXTM_DESIGN);	Append(TXTM_SWALK);	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93	Append(TXTM_HTILE);	Append(TXTM_VTILE);	SetKeyPos(menuTHoriz, menuTHorizKeyPos);	SetKeyPos(menuTVert, menuTVertKeyPos);       // jca 2 Nov 93 add mnemonics }	SetEuroKey(menuSGallery, menuSGalleryEuroKey);	SetEuroKey(menuSDesign, menuSDesignEuroKey);	SetEuroKey(menuSWalk, menuSWalkEuroKey);	SetEuroKey(menuTHoriz, menuTHorizEuroKey);    SetEuroKey(menuTVert, menuTVertEuroKey);	SetPriority(highestPriority);#endif //VWT	}voidMenuWindow::SetController(CAVWalkController *ctrl)	{	controller = ctrl;	}	voidMenuWindow::Preempt()	{	Controller	*ctrl;	char	str[256],flag;	int	who,appState,type;	short		i;	V_Pane		*thePane;	Rect		theBox;#if VR	V_Window *libWindow=ActiveDocument()->GetVRLib();	V_Window *walkWindow=ActiveDocument()->GetVRWalk();	V_Window *designWindow=ActiveDocument()->GetVRDesign();#endif //VR		flag = controller->GetWindowState(); 	ctrl = pwc(controller)->GetFrontController();	type = ctrl->GetType();#if VWT	if( toolCRTLWalk == type || toolCRTLWalkStub == type || pwc(controller)->fullFlag)		appState = FALSE;	else 		appState = TRUE;			Select(menuHideTools, TOOLS_ON&flag);	Select(menuHideDepth, DEPTH_ON&flag);  #if VPRO	Select(menuHideCoord, ((COORD_ON&flag) == COORD_ON));	/* ABD MERGE-GOURAUD-PRO */    #if !SPECIAL_EDITION	// vpro vrml 	//gjr 07/09/95	  Select(menuHideTexture, TEXTURE_ON&flag);    #endif  #endif // VPRO	Activate(menuHideTools, appState);	Activate(menuHideDepth, (appState&&(toolCRTLDesign == type)) ? TRUE : FALSE);  #if VPRO	Activate(menuHideCoord, (appState) ? TRUE : FALSE); /* ABD MERGE-GOURAUD-PRO */    #if !SPECIAL_EDITION	// vpro vrml 	//gjr 07/09/95	Activate(menuHideTexture, appState);    #endif  #endif // VPRO#elif VR	appState = !(type == toolCRTLWalkStub);		if (libWindow)		Select(menuSGallery,libWindow->Visible());	else		Activate(menuSGallery, FALSE);	Activate(menuSDesign,appState);	Activate(menuSWalk,appState);	if (appState)		{		if (designWindow)			Select(menuSDesign,designWindow->Visible());		if (walkWindow)			Select(menuSWalk,walkWindow->Visible());		appState = (designWindow || walkWindow);				}	Activate(menuTHoriz,appState);	Activate(menuTVert,appState);#endif //VWT	}voidMenuWindow::Action(int num, long modifier)	{	int  state,who=-1;	char flag,windowflag;#if VR		V_Window *libWindow=ActiveDocument()->GetVRLib();		V_Window *walkWindow=ActiveDocument()->GetVRWalk();		V_Window *designWindow=ActiveDocument()->GetVRDesign();#endif //VR#if WINDOWS	V_Window *win=NULL;    V_Document *doc=NULL;	HWND hwnd=NULL;	win=TopWindow(NULL);	// this is ok; if there is no top window, then the stub is active and this menu isn't available  jca 13 Nov 93	if(win)doc=win->theDocument;	if(doc)hwnd=doc->GetMDIClient();#endif //WINDOWS#if VWT	windowflag = controller->GetWindowState();	switch(num)		{#if WINDOWS		case menuCascade: if(hwnd)SendMessage(hwnd,WM_MDICASCADE,0,0L); break;		case menuTile: if(hwnd)SendMessage(hwnd,WM_MDITILE,V_TILE_STYLE,0L); break;		case menuArrange: if(hwnd)SendMessage(hwnd,WM_MDIICONARRANGE,0,0L); break;#endif //WINDOWS		case menuHideTools: who = toolWToolBox; flag = TOOLS_ON; break;		case menuHideDepth: who = toolWDepth; flag = DEPTH_ON; break;		#if VPRO		case menuHideCoord: who = toolWCoord; flag = COORD_ON; break;	/* ABD MERGE-GOURAUD-PRO */  		#if !SPECIAL_EDITION	// vpro vrml 	//gjr 07/09/95		case menuHideTexture: who = toolWTexture; flag = TEXTURE_ON; break;        #endif  	#endif // VPRO		}		if(-1 != who)		{		if(flag&windowflag)state = HIDE; else state = SHOW;		controller->ShowPallette(who,state);		}#elif VR	switch(num)		{					case menuSGallery:			if (libWindow)				{				ActiveDocument()->MoveVRLib(TRUE);			#if MACINTOSH				if(libWindow->Visible())					libWindow->Hide();				else					libWindow->Show();			#endif //MACINTOSH - BUGBUG - do we need to do this for windows(tm) too?					}			break;		case menuSDesign:			if (designWindow)				{				if(designWindow->Visible())					designWindow->Hide();				else					designWindow->Show();				}			break;		case menuSWalk:			if (walkWindow)				if(walkWindow->Visible())					walkWindow->Hide();				else					walkWindow->Show();			break;		case menuTHoriz:#if WINDOWS			if(hwnd)SendMessage(hwnd,WM_MDITILE,H_TILE_STYLE,0L);#elif MACINTOSH// { DAS-VR-TILING 9/28/93			{			Rect r,r2;			GetLimitedScreen(&r);			r.bottom-=24;			r.top+=42;			r.left+=2;			r.right-=2;			if(libWindow && libWindow->Visible()) // crash if not libwindow jca march95 softkey				{				r2=r;				r2.top-=4;				r2.right = r2.left + 204;				libWindow->Move(&r2);				r.left=r2.right+4;				}			if(walkWindow->Visible() && designWindow->Visible())				{				r2=r;				/*split it horizontal*/				r2.bottom=(r2.top+r2.bottom)>>1;				r2.bottom-=12;				designWindow->Move(&r2);				r2=r;				r2.top=(r2.top+r2.bottom)>>1;				r2.top+=12;				walkWindow->Move(&r2);				if(designWindow->Active())designWindow->Activate();				else walkWindow->Activate();				}			else if(walkWindow->Visible())				{				walkWindow->Move(&r);				walkWindow->Activate();				}			else if(designWindow->Visible())				{				designWindow->Move(&r);				designWindow->Activate();				}			}#endif //WINDOWS			break;		case menuTVert:#if WINDOWS			if(hwnd)SendMessage(hwnd,WM_MDITILE,V_TILE_STYLE,0L);#elif MACINTOSH			{			Rect r,r2;			GetLimitedScreen(&r);			r.bottom-=24;			r.top+=42;			r.left+=2;			r.right-=2;			if(libWindow && libWindow->Visible()) // crash if not libwindow jca march95 softkey				{				r2=r;				r2.top-=4;				r2.right = r2.left + 204;				libWindow->Move(&r2);				r.left=r2.right+4;				}			if(walkWindow->Visible() &&				designWindow->Visible())				{				r2=r;				/*split it vertical*/				r2.right=(r2.left+r2.right)>>1;				r2.right-=2;				designWindow->Move(&r2);				r2=r;				r2.left=(r2.right+r2.left)>>1;				r2.left+=2;				walkWindow->Move(&r2);				if(designWindow->Active())designWindow->Activate();				else walkWindow->Activate();				}			else if(walkWindow->Visible())				{				walkWindow->Move(&r);				walkWindow->Activate();				}			else if(designWindow->Visible())				{				designWindow->Move(&r);				designWindow->Activate();				}			}// } DAS-VR-TILING 9/28/93#endif //WINDOWS			break;		}#endif //VWT	}