/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  * Platform: 	MACINTOSH 	X *				WINDOWS		X *------------------------------------------------------------------------------ */ #include "VTypes.h"#include "CVRuler.h"#include "RuleItem.h"#include "Draft.h"#include "CVEnvirn.h"#include "DesCntrl.h"#include "PolyDefs.h"#include "CadDraft.h"/* THIS MUST CHANGE */#include "AppText.h"#include "AppMssgs.h"#include "AppDeflt.h"#include "CVDefs.h"#include "ToolDef.h"#include "Format.h"#include "UndoBuf.h"#include "MiscUndo.h"#include "Misc.h"#include "VItem.h"#include "VButton.h"#include "VWindow.h"#include "VGraphic.h"#include "VGUtil.h"#include "VMath.h"#include <string.h>char growBoxChar = 0x3A;#define 	DRAG_HEIGHT		16				void CAVZRuler::CalcSize(Rect *r,Point *p,int type,int warning)	{	if(INSTALL == type)		{		p->v = -(r->bottom>>1);		origin = Local2World(p->v,RSCALE_ABSOLUTE);		}//There is no need for a drag pane under windows#if MACINTOSH	r->bottom -= DRAG_HEIGHT;#endif	width=TAB_WIDTH+RULER_WIDTH; /*the right edge of the ruler is here*/	}void CAVZRuler::Display(int type,int x,int y)	{	int isPaneActive,isControlActive;		isControlActive = (msgDeactivate == controller->activateState) ? FALSE : TRUE;#if MACINTOSH	isPaneActive = ((V_Item*)VertScroll)->GetActiveState();					if(isControlActive!=isPaneActive)		((V_Item*)VertScroll)->Activate(isControlActive);#endif //MACINTOSH	grayOut = !isControlActive;#if MACINTOSH	SetPane();#endif //MACINTOSH	Ruler::Display(type,x,y);#if MACINTOSH	UnsetPane();#endif //MACINTOSH	}	void CAVZRuler::GetVirtual(Rect *r)	{	ppc(controller)->GetVirtualDepth(r);	r->top = -r->top;	r->bottom = -r->bottom;	}void  CAVZRuler::MouseDown(Point p,long modifiers)	{	Ruler::MouseDown( p, modifiers);	if((extrusionRange == editItem) && (doubleClick&modifiers))		{		ppc(controller)->SetExtrudeHeight(defAxis);		editMode = outRulerItem;		editItem = NULL;		extrusionRange->SetState(outRulerItem);		}	}		/* Optimize - precalculate pt from scrollstep */intCAVZRuler::Push(int dh,int dv)	{		FFixed	pt;	long	scrollDelay,bound;	int		result,p;			if(HORZ_RULER == direction)		{		if(dh < 0) dh = -scrollStep; else dh = scrollStep;		pt = Scroll2World(dh);		bound = (long)FFRound(origin)+FFRound(pt);		if(bound>VMax) bound = VMax; else if(bound<VMin) bound = VMin;		if(virtRect.left > bound )virtRect.left = bound;		else if(virtRect.right < bound )virtRect.right = bound;		dv = 0;		}	else		{		dh = 0;		if(dv < 0) dv = -scrollStep; else dv = scrollStep;		pt = Scroll2World(dv);		bound = -(long)(FFRound(origin)+FFRound(pt));		if(bound>VMax) bound = VMax; else if(bound<VMin) bound = VMin;		if(virtRect.top > bound )virtRect.top = bound;		else if(virtRect.bottom < bound )virtRect.bottom = bound;		}			scrollDelay = VGetTime();	SetPane();	Display(-SCROLL_DRAW,dh,dv);	Display(DRAW,dh,dv);	UnsetPane();	CalcScroll();	SetScroll(FALSE);	result = TRUE;		while(SCROLL_DELAY > (VGetTime() - scrollDelay));	return(result);	}void DragPane::CalcSize(Rect *r,Point *p,int type,int warning)	{	r->top = r->bottom - DRAG_HEIGHT;	}void DragPane::Display(int type,int x,int y)	{	Rect	r,txtR;		char	ch;		r = dataRect;	SetMetaPort();		VEraseRect(&r);	VMoveTo(dataRect.right-15,dataRect.top);	VLineTo(dataRect.right-15,dataRect.bottom);	VMoveTo(dataRect.left,dataRect.top);	VLineTo(dataRect.right-15,dataRect.top); 	TextSetUp(vButtonFont,vButtonFontSize,vNormal);	 	txtR.left = dataRect.right-12; 	txtR.bottom =centerY-3; 	txtR.top=txtR.bottom-vButtonFontSize;	VDrawChar(growBoxChar,&txtR);	TextSetUp(vSystemFont,vSystemFontSize,vNormal);	MetaCopy(&r);	UnsetMetaPort(); 	}void  DragPane::MouseDown(Point p,long modifiers)	{	LocalToGlobal(&p);	theWindow->Grow(p);	}	void  DragPane::Track(Point p,long modifiers,int lastCall)	{	VSetCursor(vCursorArrow);	}#if VPROvoid GrowPane::SetController(Controller *c)	{	controller = c;	}void GrowPane::CalcSize(Rect *r,Point *p,int type,int warning)	{		r->left = r->right - 16;		r->top = r->bottom - 16;	}void GrowPane::Display(int type,int x,int y)	{	Rect	r,txtR;		//JAM ALTERED MERGE-FORWIN-VPRO-JAM PORTTOWINQQQ	r = dataRect;	SetMetaPort();		VEraseRect(&r);	VMoveTo(dataRect.right-15,dataRect.top);	VLineTo(dataRect.right-15,dataRect.bottom);	VMoveTo(dataRect.left+1,dataRect.top);	VLineTo(dataRect.right,dataRect.top);	VMoveTo(dataRect.right-12,centerY-1);//	VSetFont(vButtonFont,vButtonFontSize,vNormal);	//	VDrawChar(58);/* the grow box *///	VSetFont(vSystemFont,vLargeFont,vNormal);		TextSetUp(vButtonFont,vButtonFontSize,vNormal); 	txtR.left = dataRect.right-12; 	txtR.bottom =centerY;		// MERGE-GOURAUD-PRO-10 	txtR.top=txtR.bottom-vButtonFontSize;	VDrawChar(58,&txtR);	TextSetUp(vSystemFont,vSystemFontSize,vNormal);	MetaCopy(&r);	UnsetMetaPort(); 	}void  GrowPane::MouseDown(Point p,long modifiers)	{	if (!active) return;	LocalToGlobal(&p);	theWindow->Grow(p);	}	void  GrowPane::Track(Point p,long modifiers,int lastCall)	{	//CursorArrow();	}#endif // VPRO