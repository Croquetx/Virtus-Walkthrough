/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VPane.h"#include "SrfCntrl.h"#include "CVEnvirn.h"#include "CVWCntrl.h"#include "CVDefs.h"#include "CVPolyh.h"#include "CVSrfDef.h"#include "CVSrfFet.h"#include "SrfObj.h"#include "SrfEBtn.h"#include "DesEBtn.h"#include "CVLayer.h"#include "ClrPane.h"#include "SrfDraft.h"#include "CadPosn.h"#include "CadBtn.h"#include "AppMssgs.h"#include "AppDeflt.h"#include "AppText.h"#include "ToolDef.h"#include "WalkDefs.h"#include "RuleItem.h"#include "Ruler.h"#include "VMath.h"#include "VWindow.h"#if VR#include "VRTools.h" // DAS-VR-COLOR 9/11/93#endif#include <stdio.h>#include <string.h>void SurfControl::SetSurfDef(CAVSurfDef *sDef) { surfDef = sDef; }void SurfControl::cController(V_Document *doc)	{			CadControl::cController(doc);	tools = (ToolButton*)controller->cTool(this,toolBSurfTools);		/* create the surface tool box buttons */		selectTools = (SelectToolButton*)controller->cTool(this,toolBSelect);	/* create the regular polyhedron buttons  */		regularPoly = (RegPolyButton*)controller->cTool(this,toolBRegular);	/* create the regular polygon buttons  */		toolSet = (ToolButton*)controller->cTool(this,toolBSurfToolSet);		/* create the regular polyhedron buttons  */		modifiers = (ModButton*)controller->cTool(this,toolBSurfModifiers);/* create the surface modifier buttons */	gouraud_modifiers = (GouraudModButton*)controller->cTool(this,toolBSurfGouraudModifiers);/* MERGE-GOURAUD */	walkList = (WalkList*)controller->cTool(this,toolLList);			/* create the layer List				  */			psd(cadDraft)->SetSurface(surfDef);	selectedList = new(V_Array);	selectedList->cArray(0,sizeof(CAVSurfFeature*),4);	psd(cadDraft)->SetSelect(selectedList);	color->SetColor(surfDef->GetColor(SURF_OUTSIDE));#if VR //jca 17JAN94	surfSide=SURF_OUTSIDE; // DAS-VR-SURFEDIT 10/1/93#endif	}void SurfControl::dController()	{			selectedList->dArray();	CadControl::dController();		}	#if VR // jca 17JAN94void SurfControl::SetSurfSide(int side)	{			surfSide = side;		if (vrTools) vrTools->SetSurfSide(side);	}#endifvoid *SurfControl::cTool(Controller *ctrl,int toolType)	{	void *tool = NULL;	switch(toolType)		{		case toolBSurfTools:			tools = new(SurfaceToolButton);			tools->cButtonSet();			tool = tools;			break;		case toolBSurfModifiers:			modifiers = new(SurfModButton);			modifiers->cButtonSet();			tool = modifiers;			break;		// MERGE-GOURAUD [[[		case toolBSurfGouraudModifiers:			gouraud_modifiers = new(GouraudModButton);			gouraud_modifiers->cButtonSet();			tool = gouraud_modifiers;			break;		// MERGE-GOURAUD ]]]		case toolBSurfToolSet:			toolSet = new(PosnSurfToolButton);			toolSet->cButtonSet();			tool = toolSet;			break; 		default:			tool = CadControl::cTool(ctrl,toolType);			break;		}		return(tool);	}voidSurfControl::Activate(int install)	{	V_Window *window;	char     str[256];		if((msgDeactivate != install) && (msgDummy2 != install))		{		toolConsole->SetButton(tools);		tools->SetHeir(ALTSELECTOR_SPOT,selectTools);		tools->SetHeir(REGULAR_SPOT,regularPoly);	  // PRO-17	tools->SetHeir(TOOL_SPOT,toolSet);		modifiers->SetController(this);		modifierConsole->SetButton(modifiers);		// MERGE-GOURAUD [[[		gouraud_modifiers->SetController(this);		gouraud_modifierConsole->SetButton(gouraud_modifiers);		gouraud_modifiers->SetButtonWidth(38);		// MERGE-GOURAUD ]]]		}			CadControl::Activate(install);	switch(install)		{		case msgCreate:			strcpy(str,title);			SetTitle(str);			break;		case msgInit:			editTool = FALSE;			ControlMessage(tools->GetTool(0),0L,ONSTATE);			break;		}	}int SurfControl::GetCreateSide( )	{	// { DAS-VR-SURFEDIT 10/1/93#if VWT	int where;	switch(modifiers->GetTool(3))		{		case bFRONT_SIDE: where = SURF_OUTSIDE; break;		case bSHARED_SIDE:where = SURF_SHARED; break;		case bBACK_SIDE:  where = SURF_INSIDE; break;		}	return(where);#elif VR	return surfSide;#endif// } DAS-VR-SURFEDIT 10/1/93	}void SurfControl::ControlMessage(int message,long modifiers,int state)	{		int	oldTool;		oldTool = message;		switch(message)		{		case bFRONT_SIDE: if(LOCKSTATE == state) psd(cadDraft)->MoveFeature(SURF_OUTSIDE); break;		case bSHARED_SIDE:if(LOCKSTATE == state) psd(cadDraft)->MoveFeature(SURF_SHARED); break;		case bBACK_SIDE:if(LOCKSTATE == state) psd(cadDraft)->MoveFeature(SURF_INSIDE); break;		default: CadControl::ControlMessage(message,modifiers,state);break;		}	switch(oldTool)		{		case bPOLY_ROOM:			cadDraft->ResetTools();			break;				default:			if(bZOOM_USER != message && TRUE == zoomState)				ZoomUser(FALSE);			break;		}	}voidSurfControl::Init(FFixed scale)	{	cadDraft->SetZoom(FixedToDbl(scale));	}		voidSurfControl::NewSurfFeature(V_Array  *featList)	{	pwc(controller)->NewSurfFeature(featList);	}void *SurfControl::GetSurfDef()	{			return(surfDef);	}voidSurfControl::Select(CAVSurfFeature *feat,V_Array *list)	{	psd(cadDraft)->SelectFeature(feat,list);	}	voidSurfControl::Request(void *val,int action,int who,int scope)	{		switch(action)		{		case objTools:			CadControl::Request(val,action,who,scope); 			break;			case msgEdit:		case msgUpdate:			switch(who)				{					case objTools: 					cadDraft->VDisplay(DRAW); 					// MERGE-GOURAUD-PRO ZoomUser(FALSE);					break;				case objOrigin:					SetPositionOrigin();					cadDraft->VDisplay(DRAW);					break;									case objHorzRuler:				case objVertRuler:					SetGuideLines();					hRuler->VDisplay(-DRAW);					vRuler->VDisplay(-DRAW);					cadDraft->VDisplay(DRAW);					break;				case objList:					walkList->VDisplay(ACT_REBUILD_DRAW);																		case objPolygon:					cadDraft->VDisplay(DRAW);					controller->Request(NULL,action,objPolygon,0);					break;								case objColor:// { DAS-VR-COLOR 9/11/93#if VWT					color->VDisplay(ACT_REBUILD_DRAW);					cadDraft->SetColor(color->GetColor());#elif VR					vrColor->VDisplay(ACT_REBUILD_DRAW);					cadDraft->SetColor(vrColor->GetColor());#endif// } DAS-VR-COLOR 9/11/93					break;										// ABD MERGE-TEXTURE 9/13/93 [[[							case objTexture:    /* ABD TEXTURE */					cadDraft->SetTexture(GetTexture());					break;				case objTextureList: 					// ¥¥¥¥¥ÊGetTextureList()->VDisplay(DRAW); 					break; /* ABD TEXTURE */	// ABD MERGE-TEXTURE 9/13/93 ]]]									case objPolyhedron:				default: 					controller->Request(this,action,who,scope); break;				}			break;				case msgDestroy:			switch(who)				{				case objList: 					if(!walkList->RemoveItem()) break;					controller->Request(this,action,who,scope);					break;				case objPolygon: 					cadDraft->VDisplay(DRAW);				default:					controller->Request(this,action,who,scope); 					break;				}						break;				case msgReset:			switch(who)				{				case objTools: editTool = bARROW; SetTool(0L,_TOGGLE); break;					default: controller->Request(this,action,who,scope); break;					}			break;		}	}/*========================================================================= * void	SurfControl::Response(void *val,int action,int who,int scope) *-------------------------------------------------------------------------*/voidSurfControl::Response(void *val,int action,int who,int scope)	{	switch(action)		{		case msgInit: 			switch(who)				{				case objDefaults:						SetScale(GetScale(),TRUE);					Request(NULL,msgUpdate,objTools,0);				default:					walkList->SetController(this);					break;				}			break;					case msgCreate:			switch(who)				{					case objPolygon:					if(val != this) cadDraft->VDisplay(ACT_REBUILD_DRAW);					break;				case objList: break;				}			break;				case msgEdit:		case msgUpdate:			switch(who)				{								case objList:if(val != this)walkList->VDisplay(ACT_REBUILD_DRAW);break;	#if VPRO				case objPosition:pwc(controller)->position->VDisplay(ACT_REBUILD_DRAW);break;	// MERGE-GOURAUD-PRO#else				case objPosition:position->VDisplay(ACT_REBUILD_DRAW);break;	// MERGE-GOURAUD-PRO#endif				case objCad: cadDraft->VDisplay(ACT_REBUILD_DRAW); break;				case objColor:color->VDisplay(ACT_REBUILD_DRAW);break;					case objMenu:walkList->VDisplay(ACT_REBUILD_DRAW);break;				case objPreference: SetPreference(controller->GetPreference(),FALSE); break;				case objPolygon: cadDraft->VDisplay(DRAW); break;				}			break;				case msgDestroy:			switch(who)				{				case objList:walkList->VDisplay(ACT_REBUILD_DRAW);break;				case objPolygon:cadDraft->VDisplay(ACT_REBUILD_DRAW);break;				}						break;				case msgReset:			switch(who)				{				case objList: walkList->Reset(); break;					case objColor: cadDraft->VDisplay(DRAW); break;				case objTools:					editTool = bARROW;					SetTool(0L,_NO_TOGGLE);					break;							case objSlice:				case objCad:				case objPolyhedron:					psd(cadDraft)->Reset();					break;								}			break;		}	}	int SurfControl::CheckPolyhedron(void *obj) { 	return(obj == polyhedron); }CadDraft *SurfControl::NewDraft()  {  return(new(SurfDraft)); }void SurfControl::ChangeView(int view)	{	CadControl::ChangeView(view);		}	#if VR// { DAS-VR-SURFEDIT 9/17/93	void SurfControl::EditView(int view)	{	surfSide=view;		}// } DAS-VR-SURFEDIT 9/17/93#endifvoid SurfControl::SetTitle(char *newTitle)	{	char str[256];		strcpy(str,newTitle);		switch(environment->GetView())			{		case insideView: 	sprintf(str,"%s:%s",TXTT_SURFEDITOR,TXTM_INSIDE); break;		case outsideView: 	sprintf(str,"%s:%s",TXTT_SURFEDITOR,TXTM_OUTSIDE);break;		}	CadControl::SetTitle(str);	}voidSurfControl::SetPreference(AppPreference *appPref,int initFlag)	{	CadControl::SetPreference(appPref,initFlag);	}// jca 23MAR94 return the state of the selected list.  Is anything in it?// And can we cut, copy, paste?intSurfControl::IsAnythingSelected(void){	return((selectedList->ALength() > 0) ? TRUE : FALSE);}// to tell the edit menu if we can paste the buffer stuffintSurfControl::CanBufferPaste(struct V_Buffer *cBuf){    ULong	bufPosition;	int direction, ok = 0;	bufPosition = cBuf->IOGetPosition();	if (bufPosition > 0)		{		direction = cBuf->IODirection();		cBuf->IOSetPosition(0);		cBuf->IOSetDirection(DATA_IN);		ok = IO_ID(cBuf,IFF_FEAT);		cBuf->IOSetPosition(bufPosition);		cBuf->IOSetDirection(direction);		}    return(ok);}// and if anything is selected, is it (or are they) opaque, translucent,// transparent, straight, rounded, pointed, scaled, rotated, skewed, etc.ULongSurfControl::SelectedConditions(void){	ULong conditions = 0L;	if (IsAnythingSelected())		{		CAVSurfFeature **cavSurfList;        UShort opacity;        int i;		cavSurfList = (CAVSurfFeature **)selectedList->Use();		for (i = 0; i < selectedList->ALength(); i++)			{			opacity = cavSurfList[i]->GetOpacity(); 			if (cavSurfList[i]->IsFeatScaled())			conditions |= SELECTED_SCALED;			if (cavSurfList[i]->IsFeatRotated())		conditions |= SELECTED_ROTATED;			if (cavSurfList[i]->CanSidesBeChanged())	conditions |= SELECTED_SIDES;			if (IS_OPAQUE(opacity)) 				conditions |= SELECTED_OPAQUE;			else if (IS_TRANSLUCENT(opacity))  	conditions |= SELECTED_TRANSLUCENT;			else /* if (IS_TRANSPARENT(opacity))*/	conditions |= SELECTED_TRANSPARENT;			}        selectedList->Unuse();		}	return(conditions);}