/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VwCntrl.h"#include "CVWCntrl.h"#include "VwBtn.h"#include "WalkPane.h"#if VR#include "WalkBPne.h" // DAS-VR-WALKBPANE 8/12/93#include "VGUtil.h"#endif#include "View.h"#include "Polyhdrn.h"#include "WalkBuff.h"#include "AppDeflt.h"#include "CadPosn.h"#include "ClrPane.h"#include "FoclPane.h"#include "ToolDef.h"#include "TumAxis.h"#include "AppText.h"#include "Informtn.h"#include "VMath.h"#include "VWindow.h"#include <stdio.h>#include <string.h>#if USE_HMD		// ABD HMD JUL95#include "Observer.h"#include "HMD.h"#endif // USE_HMDvoid ViewController::cController(V_Document *doc)	{			recordState =  WALK_STOP;	Controller::cController(doc);					walkPane = (WalkPane*)cTool(this,toolPWalk);					#if VR	walkBPane = (WalkBPane*)cTool(this,toolBWalk);// DAS-VR-WALKBPANE 8/13/93#endif				#if (!VPLAYER)	controller->cTool(this,toolFlush);					environmentConsole = (V_Console*)controller->cTool(this,toolCCad);		three_d_pick_console = (V_Console*)controller->cTool(this,toolP3dPick);/* MERGE-GOURAUD */	three_d_pick_button = (Pick3DButton*)controller->cTool(this,toolB3dPick);		color = (ColorSelect*)controller->cTool(this,toolPColor);		tumbleAxis = (TumbleAxis*)controller->cTool(this,toolPAxis);			focalPane = (FocalPane*)controller->cTool(this,toolPFocal);			recording = (ViewCameraButton*)controller->cTool(this,toolBCamera);	#endif //!VPLAYER	}void *ViewController::cTool(Controller *ctrl,int toolType)	{	void *tool = NULL;		switch(toolType)		{		case toolCCad:			environmentConsole = new(V_Console);			environmentConsole->cPane(FALSE);			environmentConsole->SetPosition(NULL,bottomLeftConsole);			tool = environmentConsole;			break;#if (!VPLAYER)		case toolPColor:			color = new(ColorSelect);			color->cPane(FALSE);			tool = color;			break;		case toolPAxis:			tumbleAxis = new(TumbleAxis);			tumbleAxis->cPane(FALSE);			tool = tumbleAxis;			break;		case toolPFocal:			focalPane = new(FocalPane);			focalPane->cPane(FALSE);			tool = focalPane;			break;		case toolBCamera:			recording = new(ViewCameraButton);			recording->cButtonSet();						tool = recording;			break;#endif //!VPLAYER		// MERGE-GOURAUD-PRO [[[#if VPRO		case toolP3dPick:			three_d_pick_console = new(V_Console);			three_d_pick_console->cPane(FALSE);			three_d_pick_console->SetPosition(NULL,topRightConsole);			tool = three_d_pick_console;			break;		case toolB3dPick:			three_d_pick_button = new(Pick3DButton);			three_d_pick_button->cButtonSet();			tool = three_d_pick_button;			break;#endif		// MERGE-GOURAUD-PRO ]]]		case toolPWalk:			walkPane = new(WalkPane);			walkPane->cPane(FALSE);			walkPane->Init(this,view);			tool = walkPane;			break;// < DAS-VR-WALKBPANE 8/12/93 this defines the walk button pane for VR.#if VR		case toolVRButtons:				// ABD WILLIAMS 8/27/93 MERGE6		case toolBWalk:			walkBPane = new(WalkBPane);			walkBPane->cPane(GRAYOUT);  // DAS-VR-Gray out the pane 8/14/93			walkBPane->Init(this,view);			tool = walkBPane;			break;#endif// > DAS-VR-WALKBPANE 8/12/93 5					default:			tool = Controller::cTool(ctrl,toolType);			break;		}		return(tool);	}voidViewController::Activate(int install)	{		char	str[256];	V_Window *window;		window = NULL;		if(msgDeactivate != install)		{	#if (!VPLAYER)		if(color)color->SetController(this);			if(tumbleAxis)tumbleAxis->SetController(this);			if(focalPane)focalPane->SetController(this);			if(recording)recording->SetController(this);			if(environmentConsole)environmentConsole->SetButton(recording);		// MERGE-GOURAUD-PRO [[[		#if VPRO 	// MERGE-VR-FIX		three_d_pick_button->SetController(this);		three_d_pick_console->SetButton(three_d_pick_button);			#endif 	// MERGE-VR-FIX		// MERGE-GOURAUD-PRO ]]]		#if VPRO		// ABD TEXTURE set the texture palette controller to this, so no texture		// updates occur (our controller ignores objTexture updates).		controller->SetPaletteController(toolWTexture, this);		controller->ActivatePalette(toolWTexture, FALSE);		#endif // VPRO#endif //!VPLAYER		}			switch(install)		{		case msgCreate:			window = GetWindow(toolCRTLView);			window->Install(walkPane);#if VR						window->Install(walkBPane);// DAS-VR-WALKBPANE 8/13/93#endif#if VPLAYER			SetTitle(title);#else			strcpy(str,TXTT_VIEW);			SetTitle(str);#endif //VPLAYER			break;				case msgReset:			controller->cTool(this,toolFlush);									window = GetWindow(objTools);			if(environmentConsole) window->Install(environmentConsole);#if (!VPLAYER)			if (three_d_pick_console) window->Install(three_d_pick_console);	// MERGE-GOURAUD-PRO			if(color) window->Install(color);			if(tumbleAxis) window->Install(tumbleAxis);			if(focalPane) window->Install(focalPane);#endif //!VPLAYER			#if VPRO			three_d_pick_button->SetState(0,ONSTATE);			three_d_pick_button->SetState(1,OFFSTATE);			three_d_pick_button->SetState(2,OFFSTATE);			#endif#if VPRO			pwc(controller)->ActivatePalette(toolWCoord, FALSE);#endif			polyhedron = ((Polyhedron*)information->polyhedron);			Request(NULL,msgReset,objAxis,0);			break;				case msgDeactivate:			return;			break;		}	}void ViewController::SetTitle(char *newTitle)	{	char str[256];#if VPLAYER	Controller::SetTitle(newTitle);#else #if SPANISH  // jca 27FEB95 spanish has a "noun adjective" structure	sprintf(str,"%s %s",TXTT_VIEW,TXTT_WALKEDITOR); #else	sprintf(str,"%s %s",TXTT_WALKEDITOR,TXTT_VIEW); #endif // SPANISH	Controller::SetTitle(str);#endif //VPLAYER	}void ViewController::GetPlace(Rect *r,int warning,int who)	{	Rect	tr;		switch(who)		{#if (!VPLAYER)		case toolPAxis:			environmentConsole->GetRect(&tr);			r->right = tr.right;			r->left = tr.left;			r->bottom = tr.top;			if (warning)				// MERGE-GOURAUD-PRO-8				r->top=r->bottom-50;	// MERGE-GOURAUD-PRO-8			else						// MERGE-GOURAUD-PRO-8				r->top=r->bottom-83;			break;				case toolPColor:			// MERGE-VR-FIX [[[			#if VPRO			three_d_pick_console->GetRect(r);			r->top=r->bottom-1;			r->bottom=r->top+14;			break;			#else			r->bottom=r->top+15;			break;			#endif // VPRO			// MERGE-VR-FIX ]]]		case toolPFocal:			color->GetRect(&tr);			r->top = tr.bottom;			color->theWindow->GetRect(&tr);			// MERGE-GOURAUD-PRO-8			if (warning)					// MERGE-GOURAUD-PRO-8				tr.top = tr.bottom - 73;	// MERGE-GOURAUD-PRO-8			else							// MERGE-GOURAUD-PRO-8				tr.top = tr.bottom - 106;	// MERGE-GOURAUD-PRO-8			r->right = tr.right;			r->left = tr.left;			r->bottom = tr.top;			break;	#endif //!VPLAYER#if VR		// < DAS-VR-WALKBPANE 8/13/93			case toolPWalk: // VR this is to make room for the buttons for VR			r->bottom-=(VScrollWidth()-1);			break;		case toolBWalk: // VR this is the new walk button pane			r->top = r->bottom-(VScrollWidth()-1);		#if MACINTOSH			if(walkBPane->theWindow->wType&GROWBOX)				r->right -= (VScrollWidth()-1);		#endif //MACINTOSH			break;// > DAS-VR-WALKBPANE 8/13/93	#endif		}	}	void ViewController::SetViewPoint(Point3DFFixed newView,Angle3DFFixed newAngle)	{	Point3D	tmpView;	Angle3D	tmpAngle;		tmpView.x = FFRound(newView.x);	tmpView.y = FFRound(newView.y);	tmpView.z = FFRound(newView.z);	tmpAngle.roll = FFRound(newAngle.roll);	tmpAngle.pitch = FFRound(newAngle.pitch);	tmpAngle.yaw = FFRound(newAngle.yaw);	view->SetPoint(tmpView);	view->SetAngle(tmpAngle);	}	voidViewController::Request(void *val,int action,int who,int scope)	{	V_Window *window;	Rect	r;	Angle3D			agl;		switch(action)		{		case msgUpdate:			switch(who)				{				case obj3dPick:									// ABD 3D PICK 8/13/93					controller->Request(NULL,msgUpdate,who,0);	// ABD 3D PICK 8/13/93					break;										// ABD 3D PICK 8/13/93				case objObserver:					controller->Request(NULL,msgUpdate,objObserver,0);					controller->SetChange(TRUE);					break;											default:					controller->Request(NULL,action,who,0);					break;									}			break;				case msgEdit:			switch(who)				{#if (!VPLAYER)				case objEditSurface: // DAS-VR 9/6/93					controller->Request(val,action,who,scope);					break;				case objCenterPoly: // DAS-VR 8/29/93					if((struct Polyhedron*)val == polyhedron) val=0;					controller->Request(val,action,who,scope);					break;				case objLight:					pwc(controller)->LaunchEditor(polyhedron,FFZero,NULL,Pt3DFFZero,toolCRTLLight);					break;								case objColor:					polyhedron->SetColor(color->GetColor(),0xFFFF,SURF_SHARED);					walkPane->VDisplay(DRAW);					controller->SetChange(TRUE);					break;#endif //!VPLAYER									default:					controller->Request(NULL,action,who,0);					break;				}			break;					case msgRecord:			if(objObserver == who)				pwc(controller)->ObserverRecord(scope);			break;					case msgPlay:			if(objObserver == who)				pwc(controller)->PlayBack();			break;					case msgReset:			switch(who)				{				case objObserver:#if (!VPLAYER)					if(tumbleAxis)tumbleAxis->Orient(view->angle);					controller->Request(NULL,action,who,0);#endif //!VPLAYER					break;								case objAxis:#if (!VPLAYER)					if(tumbleAxis)tumbleAxis->Orient(view->angle);#endif //!VPLAYER					break;								default:					controller->Request(NULL,action,who,0);					break;				}			break;		}	}voidViewController::Response(void *val,int action,int who,int scope)	{	Angle3D	newAngle;	Point3D	newPoint;	int		focal,film;	RGBColor color;		switch(action)		{		case msgInit:		case msgReset:			switch(who) 				{				case objDefaults:				case objView:				case objIO:					SetPreference(controller->GetPreference(),(action==msgInit) ? TRUE : FALSE);					break;									case objSlice:/* dude - for tumble editor update */				case objObserver:				case objPolygon:				case objPolyhedron:					view->ResetViewPoly();					walkPane->VDisplay(DRAW);					break;				}			break;					case msgEdit:		case msgCreate:		case msgDestroy:			switch(who)				{				case objSlice:/* dude - for tumble editor update */				case objPolygon:				case objPolyhedron:				case objObserver:				case objView:					view->ResetViewPoly();					walkPane->VDisplay(DRAW);					break;				#if USE_HMD				case objHMD:					((Observer*)view)->CreateHMD(scope);					break;                #endif				}			break;					case msgUpdate:			switch(who)				{				case objSlice:/* dude - for tumble editor update */				case objPolygon:				case objObserver:				case obj3dPick:			// ABD 3D PICK 8/13/93				case objView:					walkPane->VDisplay(DRAW);					break;				}			break;				default:			break;		}	}voidViewController::SetView(View *newView)	{	view = newView;	}voidViewController::SetOptions(int options)	{	AppPreference		*appPref;	RenderPreference	*renderPref;	NavigatePreference	*navigPref;	int viewOptions = 0;		options = 0;		appPref = GetPreference();	renderPref = (RenderPreference*)appPref->GetPreference(preferRenderer);	navigPref = (NavigatePreference*)appPref->GetPreference(preferNavigate);	if (renderPref->renderDrawMode & RENDER_FILL) viewOptions |= DRAW_FILL;	if (renderPref->renderDrawMode & RENDER_FRAME) viewOptions |= DRAW_FRAME;	if (!(renderPref->renderDrawMode & RENDER_NOTEXTURES)) viewOptions |= DRAW_TEXTURES;	if (!(renderPref->renderDrawMode & RENDER_NOGOURAUD)) viewOptions |= DRAW_GOURAUD;		// MERGE-GOURAUD-PRO-7	if (renderPref->renderOpenMode & RENDER_SEEIN) viewOptions |= DRAW_SEE_IN;	if (renderPref->renderOpenMode & RENDER_SEEOUT) viewOptions |= DRAW_SEE_OUT;	if (renderPref->renderOpenMode & RENDER_SEECONN) viewOptions |= DRAW_SEE_THROUGH;	if (renderPref->renderShadeMode & RENDER_FLATSH) viewOptions |= DRAW_SHADE;	if (renderPref->renderShadeMode & RENDER_NOSHADE) viewOptions |= DRAW_NO_SHADE;	if (renderPref->renderShadeMode & RENDER_WHITESH) viewOptions |= DRAW_WHITE_SHADE;	if (renderPref->frameBlack) viewOptions |= DRAW_BLACK_FRAME;	if (renderPref->interpTransp) viewOptions |= DRAW_INTERP_TRANSP;	if (renderPref->dither) viewOptions |= DRAW_DITHER;	if (navigPref->navigateMode & NAVIG_BUTTON) options |= VIEW_BUTTON;	if (navigPref->navigateMode & NAVIG_CROSS) options |= VIEW_CROSSHAIR;	if (navigPref->navigateMode & NAVIG_GRID) options |= VIEW_VELOCITY;	if (navigPref->navigateMode & NAVIG_COLLISION) options |= VIEW_COLLISIONS;	view->SetOptions(viewOptions);	walkPane->SetOptions(options);	}V_Window *ViewController::GetWindow(int type)	{	V_Window	*window;	switch(type)		{		case objCoord:	/* ABD MERGE-GOURAUD-PRO */		case objDepth:	/* ABD MERGE-GOURAUD-PRO */#if VPRO		case objTexturePal:	/* ABD MERGE-GOURAUD-PRO */#endif		case objTools: window = controller->GetWindow(type); break;		case toolCRTLView:		case toolCRTLLibrary:		default:	// MERGE-GOURAUD-PRO-5			if(!(walkPane->theWindow))				window = controller->GetWindow(type);			else				window = walkPane->theWindow; 			break;		}			return(window);	}voidViewController::SetPreference(AppPreference *appPref,int initFlag)	{	NavigatePreference	*navigPref;	RenderPreference	*renderPref;	UnitPreference		*unitPref;#if USE_HMD	HMDPreference		*hmdPref;	 		// ABD HMD JUL95#endif // USE_HMD   // RSH 80195	int	reDrawFlag,state,changeFlag,viewOptions,options;	int	focal,film,hAspect,vAspect;			options = reDrawFlag = 0;	navigPref = (NavigatePreference*)appPref->GetPreference(preferNavigate);	renderPref = (RenderPreference*)appPref->GetPreference(preferRenderer);	unitPref = (UnitPreference*)appPref->GetPreference(preferUnits);#if USE_HMD	hmdPref = (HMDPreference*)appPref->GetPreference(preferHMD); 		// ABD HMD JUL95#endif // USE_HMD   // RSH 80195	changeFlag = navigPref->GetChange();	if(PREF_NOCHANGE != changeFlag || initFlag)		{		reDrawFlag |= 0x01;		if((navigPref->focalLength != view->focalLength) 			|| (navigPref->filmWidth != view->filmWidth))			view->SetFocalValue(navigPref->focalLength,navigPref->filmWidth);#if (!VPLAYER)		if(focalPane)			focalPane->SetFocal(navigPref->focalLength);#endif //!VPLAYER				options = 0;				if (navigPref->navigateMode & NAVIG_BUTTON) options |= VIEW_BUTTON;		if (navigPref->navigateMode & NAVIG_CROSS) options |= VIEW_CROSSHAIR;		if (navigPref->navigateMode & NAVIG_GRID) options |= VIEW_VELOCITY;		if (navigPref->navigateMode & NAVIG_COLLISION) options |= VIEW_COLLISIONS;		walkPane->SetOptions(options);		if (navigPref->aspectState)			{			hAspect = navigPref->aspectRatio.h;			vAspect = navigPref->aspectRatio.v;			}		else			{			hAspect = 0;			vAspect = 0;			}		if(walkPane->AspectRatio(hAspect,vAspect)) 			reDrawFlag |= 0x02;		}			changeFlag = renderPref->GetChange();	if(PREF_NOCHANGE != changeFlag || initFlag)		{		reDrawFlag |= 0x01;		viewOptions = 0;				if (renderPref->renderDrawMode & RENDER_FILL) viewOptions |= DRAW_FILL;		if (renderPref->renderDrawMode & RENDER_FRAME) viewOptions |= DRAW_FRAME;		if (!(renderPref->renderDrawMode & RENDER_NOTEXTURES)) viewOptions |= DRAW_TEXTURES;		if (!(renderPref->renderDrawMode & RENDER_NOGOURAUD)) viewOptions |= DRAW_GOURAUD;		if (renderPref->renderOpenMode & RENDER_SEEIN) viewOptions |= DRAW_SEE_IN;		if (renderPref->renderOpenMode & RENDER_SEEOUT) viewOptions |= DRAW_SEE_OUT;		if (renderPref->renderOpenMode & RENDER_SEECONN) viewOptions |= DRAW_SEE_THROUGH;		if (renderPref->renderShadeMode & RENDER_FLATSH) viewOptions |= DRAW_SHADE;		if (renderPref->renderShadeMode & RENDER_NOSHADE) viewOptions |= DRAW_NO_SHADE;		if (renderPref->renderShadeMode & RENDER_WHITESH) viewOptions |= DRAW_WHITE_SHADE;		if (renderPref->frameBlack) viewOptions |= DRAW_BLACK_FRAME;		if (renderPref->interpTransp) viewOptions |= DRAW_INTERP_TRANSP;		if (renderPref->dither) viewOptions |= DRAW_DITHER;		view->SetOptions(viewOptions);		}		if (unitPref) changeFlag = unitPref->GetChange();	if(PREF_NOCHANGE != changeFlag || initFlag)		{		reDrawFlag |= 0x01;		}#if USE_HMD	if (hmdPref) changeFlag = hmdPref->GetChange();		// ABD HMD JUL95	if(PREF_NOCHANGE != changeFlag || initFlag)		{		reDrawFlag |= 0x01;		// HMD-TO-DO need to compare values here and set reDrawFlag appropriately		if (gHMD)			gHMD->SetIOD(hmdPref->iod);		}#endif // USE_HMD   // RSH 80195	view->ResetViewPoly();/*	switch(reDrawFlag)		{		case 0x01: 			walkPane->VDisplay(DRAW); 			break;		case 0x02: 		case 0x03: 			walkPane->VDisplay(ACT_REBUILD_DRAW); 			break;		default: 			break;		}		*/	switch(reDrawFlag)		{		case 0x01: 		case 0x02: 		case 0x03: 			walkPane->Reset(); 			break;		default: 			break;		}			}intViewController::GetRecordState()	{	return recordState;	}voidViewController::SetRecordState(int newState)	{	recordState = newState;	switch(recordState)		{		case WALK_RECORD:Request(this,msgRecord,objObserver,TRUE); break;		case WALK_PLAY: #if (!VPLAYER)			if(recording) recording->SetButtonState(recordState);#endif //!VPLAYER			Request(this,msgPlay,objObserver,0); 			recordState = WALK_STOP;			break;		case WALK_STOP: Request(this,msgRecord,objObserver,FALSE); break;		}#if (!VPLAYER)	if(recording)		recording->SetButtonState(recordState);#endif //!VPLAYER	}voidViewController::FullScreen(int state)	{#if VR	if (state)		walkPane->theWindow->UnInstall(walkBPane);	else		walkPane->theWindow->Install(walkBPane);#endif //VR	walkPane->FullScreen(((WalkController*)controller)->FullScreen(this,state));	}int ViewController::ExportContents(V_Buffer *buffer,int flag)	{	int err;	err = 0;#if (!VPLAYER)	switch(flag)		{		case formatPICT:err = walkPane->TakeSnapShot(buffer,formatPICT);break;		case formatBMP:err = walkPane->TakeSnapShot(buffer,formatBMP);break;		case formatTIFF:err = walkPane->TakeSnapShot(buffer, formatTIFF); break;		case formatFLIC:err = walkPane->Animation(buffer,formatFLIC);break;		case formatAVI:err = walkPane->Animation(buffer,formatAVI);break;		case formatPICS:err = walkPane->Animation(buffer,formatPICS);break;		case formatQuickTime:err = walkPane->Animation(buffer,formatQuickTime);break;		case formatEPS:err = walkPane->TakeSnapShot(buffer,formatEPS);break;        case formatIllustrator:err = walkPane->TakeSnapShot(buffer,formatIllustrator);break;		default: err = -1; break;		}#endif //!VPLAYER	return(err);	}	