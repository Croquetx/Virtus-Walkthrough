/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  * Platform: 	MACINTOSH 	X *				WINDOWS		X *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VPane.h"#include "CVLayer.h"#include "CVLItem.h"#include "CadCntrl.h"#include "AppText.h"#include "BallHelp.h"#include "Misc.h"#include "VGraphic.h"#include "VGUtil.h"#include "VDialog.h"#include "VTextDef.h"#include <stdio.h>#include <string.h>	void CAVLayer::cPane(int flag)	{	WalkList::cPane(flag);	theList->dArray();	theList = NULL;	}void CAVLayer::SetController(Controller *ctrl)	{	LayerItem	**lyr;	int			i,length;		WalkList::SetController(ctrl);			if(!theList || !(length = theList->ALength())) return;		lyr = (LayerItem**)theList->Use();	for(i = 0; i < length; i++,lyr++)		(*lyr)->SetController(controller);	theList->Unuse();	}voidCAVLayer::TrackHelp(Point pt,long modifiers)// DAS-VWINDOW 9/30/93	{// { DAS-VR-HELP 9/30/93#if VWT && !SPECIAL_EDITION         	// merge SE, vrmadness		// GJR 7/4/95	Rect r;	r = dataRect;	BalloonHotRect(&r,pt);	Bubble(pt,&r,TXTB_LAYERLIST);		#endif// } DAS-VR-HELP 9/30/93	}			void CAVLayer::SetList(V_Array *newList)	{	WalkList::SetList(newList);	SetController(controller);	if(theWindow)Reset();	}void CAVLayer::MouseDown(Point p,long modifiers)	{#if !SPECIAL_EDITION         	// merge SE, vrmadness		// GJR 7/4/95	LayerItem *lyr;	int flag;		if(doubleClick&modifiers) 		{		lyr = GetLayer();		flag = lyr->GetFlag();		if(!(TRACE_LAYER&flag))			{			pcc(controller)->EditLayer(lyr,msgUpdate,0);			controller->Request(NULL,msgEdit,objCad,0);			}		}	else WalkList::MouseDown(p,modifiers);#endif //!SPECIAL_EDITION		// merge SE, vrmadness		// GJR 7/4/95	}void CAVLayer::GetDefaultName(char *str)	{	strcpy(str,TXTD_UNNAMED);	}LayerItem *CAVLayer::GetLayer()	{		LayerItem *currentLayer;	theList->Get(selection,&currentLayer);	return(currentLayer);	}int CAVLayer::AddItem()	{	LayerItem	*nlayer;	char		str[256];	int			success;		GetDefaultName(str);	if(success = ListName(str))		{		theList->Get(selection,&nlayer);		nlayer->SetHilite(FALSE);		nlayer = new(LayerItem);		nlayer->cListItem(str);		nlayer->SetController(controller);		nlayer->SetHilite(TRUE);		theList->Insert(selection,&nlayer);		SetSelection(selection);		Reset();		}			return(success);	}int CAVLayer::RemoveItem()	{		LayerItem	*item;		WalkList::RemoveItem();		if(!theList->ALength()) 		{		item = new(LayerItem);		item->cListItem(TXTD_UNNAMED);		item->SetController(controller);		theList->Append(&item);		SetSelection(0);		}	return(TRUE);	}	void CAVLayer::MenuSelection(Point p,long modifiers)	{#if !SPECIAL_EDITION         	// merge SE, vrmadness		// GJR 7/4/95	MenuLayer	*themenu = new(MenuLayer);	LayerItem *theItem = GetLayer();	themenu->ctheMenu(theItem,(depth>2) ? TRUE : FALSE );		themenu->Action(themenu->PopUp(this,p,0),modifiers);	themenu->dtheMenu();		VDisplay(DRAW);#endif //SPECIAL_EDITION		// merge SE, vrmadness		// GJR 7/4/95	}intCAVLayer::CreateOK()	{	LayerItem *lyr;	int	layerFlag;		lyr = GetLayer();	layerFlag = lyr->GetFlag();	if(LAYER_NOCREATE&layerFlag)		{		AlertDialog		*alertDialog;		WarningDialog	*dlDialog;				//send message to regular window to deactivate		if(TRACE_LAYER&layerFlag)			{			AlertMessage(TXTW_TRACELAY);			return(FALSE);			}		else			{			if(!WarningMessage(TXTW_LAYACTIVE,TXTC_CANCEL,TXTC_OK,POSITIVE_BUTTON_TWO|DEFAULT_BUTTON_TWO))				return(FALSE);			}		}	return(TRUE);	}int CAVLayer::ListName(char *str)	{		InputTextDialog *dialog = new(InputTextDialog);	return(dialog->cInputDialog(TXT_NEW_LAYER,TXT_LAYER_NAME,str,inputText));	// PRO-JAP	}voidMenuLayer::ctheMenu(EditItem *item,int inColor)	{	char name[256];	short flagState;		layer = (LayerItem*)item;			flagState = layer->GetFlag();		cMenu(TXTM_LAYER,0);	SetMnemonics(FALSE);	Append(TXTM_LAYNAME);	Append(TXTM_LAYCOLOR);	Append(TXTM_LAYCLRPOLY);	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93	Append(TXTM_LAYACTIVE);						Append(TXTM_LAYVIS);	Append(TXTM_LAYFEATRE);	Append(TXTM_LAYRENDER);		Select(menuLayerLock,LOCK_LAYER&flagState);	Select(menuLayerHide,HIDE_LAYER&flagState);	Select(menuLayerObject,!(COLOR_LAYER&flagState));	Select(menuLayerFeatures,FEATURE_LAYER&flagState);	Select(menuLayerRender,RENDER_LAYER&flagState);	Activate(menuLayerColor,inColor); 	Activate(menuLayerName,(TRACE_LAYER&flagState) ? FALSE : TRUE); 				ListMenu::ctheMenu(item,inColor);	}	void MenuLayer::Action(int iNum,long modifiers)	{	Controller	*controller = layer->controller; 	RGBColor	col;	char		newName[256],str[256];	int			state;		state = layer->GetFlag();	switch(iNum)		{		case menuLayerName:			strcpy(newName,layer->name);			if(ListName(newName))				{				strcpy(layer->name,newName);				controller->Request(NULL,msgEdit,objList,0);				}			break;					case menuLayerColor:			col = layer->color;			sprintf(str,"%s %s",TXTC_SELECT,TXTC_LAYSELCLR);			VColorWheel(str,&col);			layer->color=col;			controller->Request(NULL,msgEdit,objList,0);			controller->Request(NULL,msgUpdate,objCad,0);			break;		case menuLayerObject:			state = !(state&COLOR_LAYER);			Select(menuLayerObject,!state);			layer->SetFlag(COLOR_LAYER,state);			controller->Request(NULL,msgUpdate,objCad,0);			break;		case menuLayerLock:			state = !(state&LOCK_LAYER);			Select(menuLayerLock,state);			layer->SetFlag(LOCK_LAYER,state);			pcc(controller)->EditLayer(layer,msgEdit,objPolyhedron);			controller->Request(NULL,msgUpdate,objCad,0);			break;					case menuLayerHide:			state = !(state&HIDE_LAYER);			Select(menuLayerHide,state);			layer->SetFlag(HIDE_LAYER,state);			pcc(controller)->EditLayer(layer,msgEdit,objPolyhedron);			controller->Request(NULL,msgUpdate,objCad,0);			break;					case menuLayerFeatures:			state = !(state&FEATURE_LAYER);			Select(menuLayerFeatures,state);			layer->SetFlag(FEATURE_LAYER,state);			controller->Request(NULL,msgUpdate,objCad,0);			break;		case menuLayerRender:			state = !(state&RENDER_LAYER);			Select(menuLayerRender,!state);			layer->SetFlag(RENDER_LAYER,state);			pcc(controller)->EditLayer(layer,msgEdit,objView);			controller->Request(NULL,msgEdit,objView,0);			break;		}	}	int MenuLayer::ListName(char *str)	{		InputTextDialog *dialog = new(InputTextDialog);	return(dialog->cInputDialog(TXT_CHANGE_NAME,TXT_LAYER_NAME,str,inputText));		// PRO-JAP	}