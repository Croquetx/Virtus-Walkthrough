/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  * Platform: 	MACINTOSH 	X *				WINDOWS		X *------------------------------------------------------------------------------ */#include "VTypes.h"#include "CadPosn.h"#include "CVPosn.h"#include "CVEnvirn.h"#include "CadCntrl.h"#include "CVDefs.h"#include "Format.h"#include "Unit.h"#include "AppDeflt.h"#include "BallHelp.h"#include "ToolDef.h"#include "Misc.h"#include "AppText.h"#include "VMath.h"#include "VGraphic.h"#include "WalkDefs.h"	// MERGE-GOURAUD-PRO-9#include <stdio.h>FFixed percentScale = INITFIXXED(100,0x0000);#define MAX_NUMBER_ITEMS	6#define ITEM_HEIGHT			10#define ITEM_SPACE			3#define ITEM_TOP_MARGIN		5#if JAPANESE	#if MACINTOSH		#define ITEM_LEFT_MARGIN	17		#define ITEM_RIGHT_MARGIN	3	#elif WINDOWS		#define ITEM_LEFT_MARGIN	17		#define ITEM_RIGHT_MARGIN	4	#endif // MACINTOSH#else	#if MACINTOSH		#define ITEM_LEFT_MARGIN	10		#define ITEM_RIGHT_MARGIN	3	#elif WINDOWS		#define ITEM_LEFT_MARGIN	10		#define ITEM_RIGHT_MARGIN	4	#endif // MACINTOSH#endif // if japanese-elsevoid CadPosition::cPane(int flag)	{	CAVPosition	*pBox;	char	posName[4];	int	isDelta,i;		controller = NULL;	hFormatter = new(Formatter);	hFormatter->cFormat();	vFormatter = new(Formatter);	vFormatter->cFormat();	absFormatter = new(Formatter);	absFormatter->cFormat();	angleFormatter = new(Formatter);	angleFormatter->cFormat();	angleFormatter->SetType(degree);	angleFormatter->SetPromotion(FALSE);	/* angleFormatter->SetScale(radian2Degree);*/	scaleFormatter = new(Formatter);	scaleFormatter->SetType(custom);	scaleFormatter->SetCustom(TXT_PERCENT_SIGN);		// PRO-JAP	scaleFormatter->SetPromotion(FALSE);	scaleFormatter->SetScale(percentScale);		V_Pane::cPane(flag);		#if 0		posName[1] = 0;	#if JAPANESE	posName[2] = 0;	#endif JAPANESE	#endif		stockItemList = new(V_ItemList);	stockItemList->cItemList();	for(i = 0; i <= trackDepth; i++)		{		switch(i)			{			case trackHPos:   pBox=new(CAVPosH); sprintf(posName,"%s",CADPOSN_H); isDelta=0; break;			case trackVPos:   pBox=new(CAVPosV); sprintf(posName,"%s",CADPOSN_V); isDelta=0; break;			case trackDHPos:  pBox=new(CAVPosDH); sprintf(posName,"%s",CADPOSN_H); isDelta=DELTA_MARK; break;			case trackDVPos:  pBox=new(CAVPosDV); sprintf(posName,"%s",CADPOSN_V); isDelta=DELTA_MARK; break;			case trackLength: pBox=new(CAVPosLine2D); sprintf(posName,"%s",CADPOSN_L); isDelta=0; break;			case trackXPos:   pBox=new(CAVPosX); sprintf(posName,"%s",CADPOSN_X); isDelta=0; break;			case trackYPos:   pBox=new(CAVPosY); sprintf(posName,"%s",CADPOSN_Y); break;			case trackZPos:   pBox=new(CAVPosZ); sprintf(posName,"%s",CADPOSN_Z); break;			case trackDXPos:  pBox=new(CAVPosDX); sprintf(posName,"%s",CADPOSN_X); isDelta=DELTA_MARK; break;			case trackDYPos:  pBox=new(CAVPosDY); sprintf(posName,"%s",CADPOSN_Y); isDelta=DELTA_MARK; break;			case trackDZPos:  pBox=new(CAVPosDZ); sprintf(posName,"%s",CADPOSN_Z); isDelta=DELTA_MARK; break;			case trackAngle:  pBox=new(CAVPosAngle); sprintf(posName,"%s",CADPOSN_A); isDelta=0; break;			case trackDAngle: pBox=new(CAVPosAngle); sprintf(posName,"%s",CADPOSN_A); isDelta=DELTA_MARK; break;			case trackHScale: pBox=new(CAVScaleH); sprintf(posName,"%s",CADPOSN_H); isDelta=DELTA_MARK; break;			case trackVScale: pBox=new(CAVScaleV); sprintf(posName,"%s",CADPOSN_V); isDelta=DELTA_MARK; break;			case trackXScale: pBox=new(CAVPosX); sprintf(posName,"%s",CADPOSN_X); isDelta=0; break;			case trackYScale: pBox=new(CAVPosY); sprintf(posName,"%s",CADPOSN_Y); isDelta=0; break;			case trackZScale: pBox=new(CAVPosZ); sprintf(posName,"%s",CADPOSN_Z); isDelta=0;  break;			case trackFloor:  pBox=new(CAVPosFloor); sprintf(posName,"%s",CADPOSN_F); isDelta=0; break;			case trackDepth:  pBox=new(CAVPosDepth); sprintf(posName,"%s",CADPOSN_D); isDelta=0; break;			#if 0			case trackHPos:   pBox=new(CAVPosH); posName[0]='h'; isDelta=0; break;			case trackVPos:   pBox=new(CAVPosV); posName[0]='v'; isDelta=0; break;			case trackDHPos:  pBox=new(CAVPosDH);posName[0]='h'; isDelta=DELTA_MARK; break;			case trackDVPos:  pBox=new(CAVPosDV);posName[0]='v'; isDelta=DELTA_MARK; break;			case trackLength: pBox=new(CAVPosLine2D); posName[0]='l'; isDelta=0; break;			case trackXPos:   pBox=new(CAVPosX); posName[0]='x'; isDelta=0; break;			case trackYPos:   pBox=new(CAVPosY); posName[0]='y'; isDelta=0; break;			case trackZPos:   pBox=new(CAVPosZ); posName[0]='z'; isDelta=0; break;			case trackDXPos:  pBox=new(CAVPosDX); posName[0]='x'; isDelta=DELTA_MARK; break;			case trackDYPos:  pBox=new(CAVPosDY); posName[0]='y'; isDelta=DELTA_MARK; break;			case trackDZPos:  pBox=new(CAVPosDZ); posName[0]='z'; isDelta=DELTA_MARK; break;			case trackAngle:  pBox=new(CAVPosAngle); posName[0]='a'; isDelta=0; break;			case trackDAngle: pBox=new(CAVPosAngle); posName[0]='a'; isDelta=DELTA_MARK; break;			case trackHScale: pBox=new(CAVScaleH); posName[0]='h'; isDelta=DELTA_MARK; break;			case trackVScale: pBox=new(CAVScaleV); posName[0]='v'; isDelta=DELTA_MARK; break;			case trackXScale: pBox=new(CAVPosX); posName[0]='x'; isDelta=0; break;			case trackYScale: pBox=new(CAVPosY); posName[0]='y'; isDelta=0; break;			case trackZScale: pBox=new(CAVPosZ); posName[0]='z'; isDelta=0;  break;			case trackFloor:  pBox=new(CAVPosFloor); posName[0]='f'; isDelta=0; break;			case trackDepth:  pBox=new(CAVPosDepth); posName[0]='d'; isDelta=0; break;			#endif			}				pBox->cItem();		pBox->SetID(i);		pBox->SetText(posName);		pBox->SetDeltaFlag(isDelta);		stockItemList->AddItem(pBox);		}		itemList->SetLength(0);	}void CadPosition::dPane()	{	hFormatter->dFormat();	vFormatter->dFormat();	absFormatter->dFormat();	angleFormatter->dFormat();	scaleFormatter->dFormat();	itemList->SetLength(0);	stockItemList->dItemList();	V_Pane::dPane();	}voidCadPosition::TrackHelp(Point pt, long modifiers)// DAS-VWINDOW 9/30/93	{	Rect r;	r = dataRect;	BalloonHotRect(&r,pt);// { DAS-VR-HELP 9/30/93#if VWT	Bubble(pt,&r,TXTB_POSITION);	#endif	// } DAS-VR-HELP 9/30/93	}void CadPosition::SetController(Controller *ctrl)	{	CAVPosition	**posBox;	int i,length;		controller = ctrl;		length = stockItemList->ALength();	posBox = (CAVPosition	**)stockItemList->Use();	for(i = 0; i < length; i++,posBox++)		(*posBox)->SetController(controller);	stockItemList->Unuse();	}	void CadPosition::SetEnvironment(CAVEnvironment *e){ environment = e; }	void CadPosition::CalcSize(Rect *r,Point *p,int type,int warning)	{	int	num;		controller->GetPlace(r,warning,toolPPosition);		num = MAX_NUMBER_ITEMS;	num *= (ITEM_HEIGHT+ITEM_SPACE);	r->top = r->bottom - num - ITEM_TOP_MARGIN;	stockItemList->Install(this);	}void CadPosition::Display(int type,int h,int v)	{	Rect	r;	TrackData	trackData;	CAVPosition	**posBox;	int			i,length;	#if WINDOWS	SetMetaPort();#endif //WINDOWS	VPenMode(vPatCopy);	r = dataRect;	if(depth  >=  4)		{		VForeColor(&vColorSlateM);		VPaintRect(&r);				VForeColor(&vBlack);		}	else		VEraseRect(&r);			VMoveTo(dataRect.left,dataRect.top);	VLineTo(dataRect.right-1,dataRect.top);	VLineTo(dataRect.right-1,dataRect.bottom - 1);	VLineTo(dataRect.left,dataRect.bottom - 1);#if WINDOWS	VTextMode(vSrcXor);#elif MACINTOSH	VTextMode(vSrcOr);#endif //WINDOWS	V_Pane::Display(type,h,v);	VTextMode(vSrcOr);#if WINDOWS	MetaCopy(&r);	UnsetMetaPort(); #endif //WINDOWS	trackData.point = Pt3DFFZero;	trackData.anchor = Pt3DFFZero;	trackData.scale = Pt3DFFZero;	trackData.angle = Ang3DFFZero;	trackData.flag = POSITION_UPDATE;	SetPositionValue(&trackData);	}	void CadPosition::SetPositionValue(TrackData *trackData)	{	CAVPosition	**posBox;	FFixed	val,oldVal;	char	str[256];	int		i,length;	if(!theWindow)return;		length = itemList->ALength();	posBox = (CAVPosition	**)itemList->Use();		SetPane();    VTextMode(vSrcXor);	TextSetUp(vTimesFont,vMediumFont,vNormal);	for(i = 0; i < length; i++,posBox++)		{		oldVal = (*posBox)->GetValue();		val = (*posBox)->CalcValue(trackData,environment);		if((POSITION_UPDATE&trackData->flag) || !FFEqual(oldVal,val)) 			{			switch((*posBox)->GetID())				{				case trackAngle:				case trackDAngle:					(*posBox)->SetValue(val);					angleFormatter->Format(val,str);					break;									case trackVScale:				case trackYScale:				case trackHScale:				case trackXScale:					scaleFormatter->Format(val,str);					break;				case trackVPos:				case trackYPos:					vFormatter->Format(val,str);					break;								case trackHPos:				case trackXPos:					// MERGE-GOURAUD-PRO-9 [[[					switch(((CadControl*)controller)->environment->view)						{						case bottomView:						case backView:						case leftView:						case insideView:							val.intg = -val.intg;							break;						}					// MERGE-GOURAUD-PRO-9 ]]]					hFormatter->Format(val,str);					break;														default:					absFormatter->Format(val,str);					break;				}			(*posBox)->DisplayValue(str);			}		}	itemList->Unuse();	TextSetUp(vSystemFont,vSystemFontSize,vNormal);	VTextMode(vSrcOr);	UnsetPane();	}void CadPosition::SetTrackSet(TrackSet *trackSet)	{	CAVPosition	**posBox,**stockBox;	Rect	r;	int		i,length,itemNum;		r.top = ITEM_TOP_MARGIN;	r.bottom = r.top+ITEM_HEIGHT;	r.left=dataRect.left + ITEM_LEFT_MARGIN;	r.right=dataRect.right-ITEM_RIGHT_MARGIN;		length = itemList->SetLength(trackSet->length);	stockBox = (CAVPosition	**)stockItemList->Use();	posBox = (CAVPosition	**)itemList->Use();		for(i = 0; i < trackSet->length; i++,posBox++)		{		switch(i)			{			case 0:itemNum = trackSet->item1; break;			case 1:itemNum = trackSet->item2; break;			case 2:itemNum = trackSet->item3; break;			case 3:itemNum = trackSet->item4; break;			case 4:itemNum = trackSet->item5; break;			case 5:itemNum = trackSet->item6; break;			case 6:itemNum = trackSet->item7; break;			case 7:itemNum = trackSet->item8; break;			}				*posBox = stockBox[itemNum];		(*posBox)->SetRect(&r);		r.top = r.bottom+ITEM_SPACE;		r.bottom = r.top+ITEM_HEIGHT;		}	stockItemList->Unuse();	itemList->Unuse();			VDisplay(DRAW);	}	void CadPosition::SetFormat(Formatter *format) 	{	hFormatter->Copy(format);	vFormatter->Copy(format);	absFormatter->Copy(format);	}	void CadPosition::SetOrigin(PointFFixed pt) 	{	hFormatter->SetOrigin(pt.h);	vFormatter->SetOrigin(pt.v);	}	