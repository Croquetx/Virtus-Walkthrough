/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VPane.h"#include "LbVCntrl.h"#include "Library.h"#include "LbWCntrl.h"#include "WlkCntrl.h"#include "LibList.h"#include "LibItem.h"#include "LibIndex.h"#include "WalkPane.h"#include "View.h"#include "LibDefs.h"#include "Polyhdrn.h"#include "Position.h"#include "WalkBuff.h"#include "VMDL.h"#include "AppMssgs.h"#include "AppDeflt.h"#include "AppText.h"#include "Misc.h"#include "Observer.h"#include "Informtn.h"#include "Drawing.h"#include "ToolDef.h"#include "VMath.h"#include "VWindow.h"#include "VFile.h"#include "VError.h"#include "SurfDef.h"			// ABD SURFACE LIBRARY 8/12/93#include "SurfFeat.h"			// ABD SURFACE LIBRARY 8/12/93#include "TextSrvr.h"		// ABD MERGE-TEXTURE 9/13/93#include "CVWCNTRL.h"		// ABD MERGE-TEXTURE 9/13/93#include "TextArry.h"	// MERGE16#if VR							// ABD WILLIAMS 8/10/93 v#include "VRWLKPAN.H"			// ABD WILLIAMS 8/10/93#include "VRLBLIST.H"			// ABD WILLIAMS 8/10/93#include "VRLBITEM.H"			// ABD WILLIAMS 8/10/93#include "VRLBENTR.H"			// ABD WILLIAMS MERGE6 8/27/93#endif // VR					// ABD WILLIAMS 8/10/93 ^#include "Unit.h"#include <string.h>#define DEFAULT_LIBRARY_WIDTH	135extern	struct V_Buffer *clipBuf;/* in Library.c */void LibViewController::cController(V_Document *doc)	{		Controller::cController(doc);#if VR			// ABD WILLIAMS 8/10/93 v	walkPane = (WalkPane*)cTool(this,toolVRPWalk);		/* create the walk pane */#elif VWT	walkPane = (WalkPane*)cTool(this,toolPWalk);		#endif	// VR	// ABD WILLIAMS 8/10/93 ^		color = NULL;		environmentConsole = NULL;		tumbleAxis = NULL;	focalPane = NULL;		recording = NULL;		#if VR			// ABD WILLIAMS 8/10/93 v	libraryIndex = (VRLibraryIndex*)controller->cTool(this,toolVRTIndex);			// ABD WILLIAMS 8/10/93	libraryList = (VRLibraryList*)controller->cTool(this,toolVRLLibrary);			// ABD WILLIAMS 8/10/93	libraryTitle = (VRLibraryTitle*)controller->cTool(this,toolVRPTitle);			// ABD WILLIAMS 8/10/93	libraryItemTitle = (VRLibraryItemTitle*)controller->cTool(this,toolVRPItem);			// ABD WILLIAMS MERGE7 9/2/93#if MACINTOSH			// ABD WILLIAMS MERGE8 v	libraryGrow = (GrowPane*)controller->cTool(this,toolPGrow);			// ABD WILLIAMS MERGE8 9/3/93#elif WINDOWS	libraryGrow = (GrowPane*)controller->cTool(this,toolPGrow);//this is ok.  jca 8 sept 93NULL;#endif // MACINTOSH		// ABD WILLIAMS MERGE8 ^	// ABD WILLIAMS MERGE4 removed libraryButtons line 8/24/93	walkBPane = (WalkBPane*)controller->cTool(this,toolVRButtons);			// ABD WILLIAMS 8/10/93#elif VWT	libraryIndex = (LibraryIndex*)controller->cTool(this,toolTIndex);	libraryList = (LibraryList*)controller->cTool(this,toolLLibrary);	libraryTitle = (LibraryTitle*)controller->cTool(this,toolPTitle);#endif	// VR	// ABD WILLIAMS 8/10/93 ^	breakPosition = DEFAULT_LIBRARY_WIDTH;	lastIndex = -1;	featPolyhedron = NULL;		// ABD DWE SURFACE LIBRARY 8/12/93	}void LibViewController::dController()	{	libraryIndex->dIndex();	ViewController::dController();	}void *LibViewController::cTool(Controller *ctrl,int toolType)	{	void *tool = NULL;		switch(toolType)		{#if VR			// ABD WILLIAMS 8/10/93 v		case toolVRLLibrary:/* create library list pane */	// ABD WILLIAMS 8/10/93			libraryList = new(VRLibraryList);			libraryList->cPane(FALSE);			libraryList->SetController(this);			libraryList->LoadIndex(libraryIndex);			tool = libraryList;			break;// ABD WILLIAMS 8/27/93 MERGE6 v		case toolVRButtons:			walkBPane = (WalkBPane*)new(VRConsole);			walkBPane->cPane(FALSE);  // DAS-VR-Gray out the pane 8/14/93			walkBPane->Init(this,view);			tool = walkBPane;			break;// ABD WILLIAMS 8/27/93 MERGE6 ^					// ABD WILLIAMS MERGE4 removed toolVRPWalkButtons case		case toolVRPTitle:/* create library title pane */	// ABD WILLIAMS 8/10/93			libraryTitle = new(VRLibraryTitle);			libraryTitle->cPane(FALSE);				libraryTitle->SetController(this);			tool = libraryTitle;			break;			// ABD WILLIAMS MERGE7 9/2/93 v		case toolVRPItem:/* create library item title pane */			libraryItemTitle = new(VRLibraryItemTitle);			libraryItemTitle->cPane(FALSE);				libraryItemTitle->SetController(this);			tool = libraryItemTitle;			break;// ABD WILLIAMS MERGE7 9/2/93 ^// ABD WILLIAMS MERGE8 9/3/93 v		case toolPGrow:/* create library grow pane */			libraryGrow = new(GrowPane);			libraryGrow->cPane(FALSE);				libraryGrow->SetController(this);			tool = libraryGrow;			break;// ABD WILLIAMS MERGE8 9/3/93 ^		case toolVRTIndex:/* create library index */		// ABD WILLIAMS 8/10/93			libraryIndex = new(VRLibraryIndex);			libraryIndex->cIndex();			tool = libraryIndex;			break;				case toolVRPWalk:									// ABD WILLIAMS 8/10/93			walkPane = new(VRWalkPane);			walkPane->cPane(FALSE);			walkPane->Init(this,view);/* dude */			tool = walkPane;			break;					case toolVRTView:									// ABD WILLIAMS 8/10/93			tool = ViewController::cTool(ctrl,toolType);			break;#elif VWT		case toolLLibrary:/* create library list pane */			libraryList = new(LibraryList);			libraryList->cPane(FALSE);			libraryList->SetController(this);			libraryList->LoadIndex(libraryIndex);			tool = libraryList;			break;		case toolPTitle:/* create library title pane */			libraryTitle = new(LibraryTitle);			libraryTitle->cPane(FALSE);				libraryTitle->SetController(this);			tool = libraryTitle;			break;		case toolTIndex:/* create library index */			libraryIndex = new(LibraryIndex);			libraryIndex->cIndex();			tool = libraryIndex;			break;				case toolPWalk:		case toolTView:			tool = ViewController::cTool(ctrl,toolType);			break;#endif //VR	// ABD WILLIAMS 8/10/93 ^					default:				tool = NULL;			break;		}		return(tool);	}voidLibViewController::Activate(int install)	{		V_Window *window;	char 	str[256];		window = NULL;		if(msgDeactivate != install)		{		libraryTitle->SetController(this);	#if VR // jca 17JAN94		libraryItemTitle->SetController(this);	// ABD WILLIAMS MERGE7 9/2/93		libraryGrow->SetController(this);	// ABD WILLIAMS MERGE8 9/5/93#endif // VR		libraryList->SetController(this);		// ABD MERGE4 WILLIAMS 8/25/93 removed a couple of lines here		}			switch(install)		{		case msgCreate:			window = GetWindow(toolCRTLLibrary);			window->Install(libraryTitle);#if VR // jca 17JAN94			window->Install(libraryItemTitle);	// ABD WILLIAMS MERGE7 9/2/93			window->Install(libraryGrow);		// ABD WILLIAMS MERGE8 9/5/93			// ABD WILLIAMS MERGE4 8/24/93 removed SetDoc line#endif // VR			window->Install(libraryList);			window->Install(walkPane);			#if VR			// ABD WILLIAMS 8/10/93 v			window->Install(walkBPane);			// ABD WILLIAMS MERGE6 8/27/93#endif //VR 	// ABD WILLIAMS 8/10/93 ^			strcpy(str,TXTM_VIEWWALK);			SetTitle(str);			if(libraryIndex->ALength())				{				LoadLibraryItem(0);				libraryList->SetSelection(0);				}			/* window->Show();*/			polyhedron = ((Polyhedron*)information->polyhedron);			break;				case msgReset:				case msgInit:			polyhedron = ((Polyhedron*)information->polyhedron);			break;		case msgDeactivate:			return;			break;		}	}void LibViewController::SetTitle(char *newTitle)	{	char str[256];	V_Window *window;		// ABD WILLIAMS MERGE10 9/9/93	str[0] = 0x00;// ABD WILLIAMS MERGE10 9/9/93 [[[#if VR			// MERGE15	if (((Library*)(document))->gallery_3d)	{	strcpy(title,TXTT_GALLERIES3D);	}	else	{	strcpy(title,TXTT_GALLERIES2D);	}	if(!(window = GetWindow(GetType()))) return;	window->SetTitle(title);#else  // VWT	Controller::SetTitle(str);#endif// ABD WILLIAMS MERGE10 9/9/93 ]]]	}#define LIB_ITEM_NAME_HEIGHT LIBTITLE_HEIGHT			// ABD WILLIAMS MERGE7 9/2/93#define LIB_BUTTONS_HEIGHT 15			// ABD WILLIAMS MERGE7 9/2/93void LibViewController::GetPlace(Rect *r,int warning,int who)	{		int offset;	if(((WalkController*)controller)->fullFlag)offset = 0;	else offset = breakPosition;	switch(who)		{// ABD WILLIAMS MERGE7 9/2/93 v#if VR			// ABD WILLIAMS 8/10/93 v		case toolVRPTitle:			r->bottom = r->top + LIBTITLE_HEIGHT; 			break;		case toolVRPItem:			r->top = (((r->bottom - LIB_BUTTONS_HEIGHT) - LIBPREVIEW_HEIGHT) - LIB_ITEM_NAME_HEIGHT) - 1;	// ABD MERGE13			r->bottom = (r->bottom - LIB_BUTTONS_HEIGHT) - LIBPREVIEW_HEIGHT; 			break;		case toolVRLLibrary:			r->top = r->top + LIBTITLE_HEIGHT; 			r->bottom = (((r->bottom - LIB_BUTTONS_HEIGHT) - LIBPREVIEW_HEIGHT) - LIB_ITEM_NAME_HEIGHT) - 1;	// ABD MERGE13			break;		case toolVRPWalk:			r->top = (r->bottom - LIB_BUTTONS_HEIGHT) - LIBPREVIEW_HEIGHT;			r->bottom = (r->bottom - LIB_BUTTONS_HEIGHT);			break;		case toolVRButtons:			r->top = r->bottom - LIB_BUTTONS_HEIGHT;#if MACINTOSH 				// ABD MERGE8 WILLIAMS 9/3/93			r->right = r->right - LIB_BUTTONS_HEIGHT;#endif // MACINTOSH 		// ABD MERGE8 WILLIAMS 9/3/93			break;			#elif VWT// ABD WILLIAMS MERGE7 9/2/93 ^		case toolPTitle: r->bottom = LIBTITLE_HEIGHT; r->right = r->left + offset; break;		case toolLList: r->top = LIBTITLE_HEIGHT; r->right = r->left + offset; break;		case toolPWalk: r->left = offset; break;		#endif // VR		}	}voidLibViewController::LoadLibraryItem(int currentIndex)	{	AppPreference	*appPref;	V_File	*originalCopy;	Polyhedron *rootPoly, *featPoly;	// ABD DWE SURFACE LIBRARY 8/12/93	long id;							// ABD DWE SURFACE LIBRARY 8/12/93	extern struct TextureServer *gTextureServer;	// ABD MERGE-TEXTURE 9/13/93// REMOVE jca 19JAN94 	extern TextureArray *gAllTextures;	if(currentIndex == lastIndex) return;		lastIndex = currentIndex;		originalCopy = pLc(controller)->GetFile();		// pLc(controller)->SetDrawing();	// ABD DWE SURFACE LIBRARY replaced with call below		originalCopy->SetQuery(LOAD,TXT_OPEN_LIBRARY);		// PRO-JAP	originalCopy->IOSetDirection(DATA_IN);	originalCopy->Open(FALSE);	libraryIndex->OpenEntry(originalCopy,currentIndex);	originalCopy->IOSetDirection(DATA_IN);	// IO_ID(originalCopy,IFF_PRSM);	// ABD DWE SURFACE LIBRARY replaced with call IOType below 	// ABD DWE SURFACE LIBRARY 8/12/93 v		// see if this item is a feature call setdrawing to set up the drawing if it is a feature		originalCopy->IOType(&id, IO_LONG);	pLc(controller)->SetDrawing(id==IFF_FEAT,&rootPoly,&featPoly);	polyhedron = rootPoly;	featPolyhedron = featPoly;		// ABD DWE SURFACE LIBRARY 8/12/93 ^	// REMOVE jca 19JAN94	gTextureServer->BeginTextureIO(originalCopy, gAllTextures);	// MERGE16 was pLc(controller)->docTextures ABD MERGE-TEXTURE 9/13/93	gTextureServer->BeginTextureIO(originalCopy, pLc(controller)->docTextures);	// jca 19Jan94 reverted to PRO	IO_LIB(originalCopy);	gTextureServer->EndTextureIOLib(originalCopy);	// ABD MERGE-TEXTURE 9/13/93	libraryIndex->CloseEntry(originalCopy);	originalCopy->Close();	appPref = controller->GetPreference();	SetPreference(appPref,TRUE);	#if VR // jca 17JAN94	// ABD WILLIAMS MERGE5 8/25/93 v	if (libraryList)	{		view->SetPoint(libraryList->GetObsPoint());	// ABD WILLIAMS MERGE5 8/25/93		view->SetAngle(libraryList->GetObsAngle());	// ABD WILLIAMS MERGE5 8/25/93	}	// ABD MERGE6 removed Debugger()	// ABD WILLIAMS MERGE5 8/25/93 ^#endif // VR	}intLibViewController::EditBuffer(long action,long modifiers)	{	V_File	*originalCopy;	LibraryEntry	*entry;	LibraryItem	*item;	char data[256],str[256];	long	lt,pasteType, length;	int itemNum,err;	long old_pos;	// MERGE-GOURAUD-PRO-9	err = noErr;		originalCopy = pLc(controller)->GetFile();	switch(action)		{		case MSG_COPY: 			if(!libraryList->theList->ALength())return(-1);						itemNum = libraryList->selection;			clipBuf->IOSetPosition(0);			originalCopy->SetQuery(LOAD,TXT_LOAD_LIBRARY);		// PRO-JAP			originalCopy->IOSetDirection(DATA_IN);			originalCopy->Open(FALSE);			libraryIndex->OpenEntry(originalCopy,itemNum);			clipBuf->IOSetDirection(DATA_OUT);			clipBuf->IOSetPosition(0);			clipBuf->IOSetLength(0);			libraryIndex->Get(itemNum,&entry);			length = entry->GetLength();			while((length-=256) > 0)				{				originalCopy->IOData(&data,256);				clipBuf->IOData(&data,256);				}			length = 256+length;			originalCopy->IOData(&data,length);			clipBuf->IOData(&data,length);			libraryIndex->CloseEntry(originalCopy);			originalCopy->Close();			break;					case MSG_NEWNAME: 			#if !SAVE_DISABLED	// ABD-SAVE-DISABLED			item = (LibraryItem	*)libraryList->GetCurrentItem();			itemNum = libraryList->selection;			item->GetName(str);						originalCopy->SetQuery(LOAD,TXT_LOAD_LIBRARY);	// PRO-JAP			originalCopy->IOSetDirection(DATA_IN);			originalCopy->Open(FALSE);			originalCopy->IOSetDirection(DATA_OUT);			libraryIndex->NameEntry(originalCopy,itemNum,str);			originalCopy->Close();			#endif // !SAVE_DISABLED			break;					case MSG_PASTE: 			#if !SAVE_DISABLED	// ABD-SAVE-DISABLED			clipBuf->IOLength(&lt);			if(!lt)return(-1);			old_pos = clipBuf->IOGetPosition();	// MERGE-GOURAUD-PRO-9			clipBuf->IOSetPosition(0);			clipBuf->IOSetDirection(DATA_IN);			clipBuf->IOType(&pasteType, IO_LONG);			//JAM 25Sept94 also can paste surface features into libraries			if((IFF_PRSM != pasteType) && (IFF_PGRP != pasteType)				&& (IFF_FEAT != pasteType)) return(-1);			clipBuf->IOSetPosition(0);						libraryList->AddItem();			item = (LibraryItem	*)libraryList->GetCurrentItem();						itemNum = libraryList->selection;			clipBuf->IOSetPosition(0);			clipBuf->IOSetDirection(DATA_IN);			originalCopy->SetQuery(LOAD,TXT_LOAD_LIBRARY);	// PRO-JAP			originalCopy->IOSetDirection(DATA_IN);			originalCopy->Open(FALSE);			originalCopy->IOSetDirection(DATA_OUT);			libraryIndex->InsertEntry(originalCopy,itemNum,clipBuf);			libraryIndex->Get(itemNum,&entry);						item->SetEntry(entry,libraryIndex->ALength()-1);			originalCopy->Close();			lastIndex = -1;			LoadLibraryItem(itemNum);			Request(NULL,msgReset,objList,0);			clipBuf->IOSetPosition(old_pos);	// MERGE-GOURAUD-PRO-9			#endif // !SAVE_DISABLED			break;					case MSG_CUT: 			#if !SAVE_DISABLED	// ABD-SAVE-DISABLED			err = EditBuffer(MSG_COPY,modifiers);			#endif // !SAVE_DISABLED		case MSG_CLEAR: 			#if !SAVE_DISABLED	// ABD-SAVE-DISABLED			if(!libraryList->theList->ALength())return(-1);			itemNum = libraryList->selection;			originalCopy->SetQuery(LOAD,TXT_LOAD_LIBRARY);	// PRO-JAP			originalCopy->Open(FALSE);			libraryIndex->RemoveEntry(originalCopy,itemNum);			originalCopy->Close();			libraryList->RemoveItem();			lastIndex = -1;						if(libraryList->theList->ALength())					{				if(0 > libraryList->selection)						libraryList->selection = 0;						item = (LibraryItem	*)libraryList->GetCurrentItem();				item->SetHilite(TRUE);				LoadLibraryItem(libraryList->selection);				}			else				{				// pLc(controller)->SetDrawing(); // ABD replaced with code below								// ABD DWE SURFACE LIBRARY 8/12/93 v								Polyhedron *rootPoly, *featPoly;						pLc(controller)->SetDrawing(FALSE,&rootPoly,&featPoly);				polyhedron = rootPoly;				featPolyhedron = featPoly;								// ABD DWE SURFACE LIBRARY 8/12/93 ^				view->drawing = pLc(controller)->drawing;				view->ResetViewPoly();				Response(NULL,msgInit,objDefaults,0);				Request(NULL,msgUpdate,objView,0);				}			#endif // !SAVE_DISABLED			break;					case MSG_DUPLICATE:			#if !SAVE_DISABLED	// ABD-SAVE-DISABLED			err = EditBuffer(MSG_COPY,modifiers);			if (err < noErr) break;			err = EditBuffer(MSG_PASTE,modifiers);			#endif // !SAVE_DISABLED			break;		}	return(err);	}	voidLibViewController::SetBreakPosition(int pos)	{	breakPosition = pos;	Request(NULL,msgReset,objDefaults,0);	}intLibViewController::Empty()	{	int 	empty;	if(!libraryList)return(TRUE);	if(libraryList->theList->ALength())empty = FALSE; else empty = TRUE;	return(empty);	}intLibViewController::IO(V_Buffer *buffer)	{	int		err = FALSE;	if(err = libraryIndex->IO(buffer)) return(err);	libraryList->LoadIndex(libraryIndex);	return(err);	}voidLibViewController::IO_LIB(V_Buffer *buffer)	{	LibraryEntry	*entry;	char			data[1000];	Polyhedron		*clone,**ppoly;	Point3DFFixed	tmp3D,newPoint;	Angle3DFFixed	newAngle;	long			id;	int				length,i,first = TRUE;			RGBColor		backColor;	OSErr err = noErr;		// ABD SURFACE LIBRARY 8/12/93	Unit			*oldUnit = NULL;				if(buffer->IODirection() == DATA_IN)		{					while (!err)		// ABD SURFACE LIBRARY 8/12/93 was while (TRUE)			{						id = buffer->OpenChunkR();			if (id == 0) break;						switch(id)				{				case IFF_VERS:					IO_VERS(buffer);					break;								case IFF_UNIT:					if (featPolyhedron != NULL)						{						oldUnit = new(Unit);						oldUnit->cUnit();						oldUnit->IO(buffer);						}						break;				/*				case IFF_VPRF:					pLc(controller)->observer->IO(buffer);					break;				case IFF_LIBROOT:					polyhedron->IO_COLR(buffer);					break;*/// ABD MERGE-TEXTURE 9/13/93 [[[				case IFF_TXTB: 					err = gTextureServer->IOTextureTable(buffer, 0);  /* ABD TEXTURE purge textures param ignored on input */					break;// ABD MERGE-TEXTURE 9/13/93 ]]]				case IFF_PGRP:				case IFF_PRSM:					clone = new(Polyhedron);					clone->cPolyhedron(view->drawing);					if(IFF_PRSM == id) clone->IO(buffer);					else clone->IOGroup(buffer);						if(first)						{						tmp3D.z.frac = 0;						tmp3D.z.intg = -clone->posnBoundMin.z;						tmp3D.x = FFNeg(clone->posn->origin.x);						tmp3D.y = FFNeg(clone->posn->origin.y);												pLc(controller)->GetPosition(&newPoint,&newAngle);						/* newPoint = FF3DAdd(newPoint,tmp3D);*/												newPoint.x = FFZero;						newPoint.y.intg = -120;						newPoint.z.intg = 66;						newAngle = FFAngleZero;												pLc(controller)->SetPosition(newPoint,newAngle);						first = FALSE; 						}							clone->Move(tmp3D);										polyhedron->Install(clone);					break;			// ABD DWE SURFACE LIBRARY 8/12/93 v// For features, create the SurfFeature object and I/O into it. Install the feature into the// end surface of the featPolyhedron. featPolyhedron is created in LIBWalkController::SetDrawing().// The features need to be installed in reverse order, so call MoveFeature() to install it in front.				case IFF_FEAT:					if (featPolyhedron != NULL)						{						SurfDef			*sDef;						SurfFeature		*feat;												sDef = featPolyhedron->GetSurfDef(featPolyhedron->SurfCount()-1);						if (!err)							{							double	factor;							Unit	*polyUnit;														feat = new(SurfFeature);							feat->cSurfFeature();							err = feat->IO(buffer);							if (!err && feat->FeatValid())								{								polyUnit = new(Unit);								polyUnit->cUnit();								polyUnit->SetSize(SI_INCH);								if (oldUnit && polyUnit)									{									factor = polyUnit->ConvertFrom(oldUnit);									if (factor < 0.999 || factor > 1.0001)										{										FFixed	f = DblToFixed(factor);										feat->ChangeUnit(f);										}									}								sDef->InstallFeature(feat, SURF_SHARED);								sDef->MoveFeature(feat, -32000, SURF_SHARED);								polyUnit->dUnit();								}							else								feat->dSurfFeature();							}						}					break;// ABD DWE SURFACE LIBRARY 8/12/93 ^				default: break;				}					buffer->CloseChunk();			}					}	if (oldUnit)		oldUnit->dUnit();	}	voidLibViewController::Request(void *val,int action,int who,int scope)	{		switch(action)		{		case msgEdit:			if(objList == who) 				EditBuffer(MSG_NEWNAME,0);			break;					case msgUpdate:			switch(who)				{				case objPolyhedron:					/* dude 					pLc(controller)->SetPosition(view->FFpoint, view->FFangle);					*/								case objObserver:					walkPane->VDisplay(DRAW);					break;									case objView:					walkPane->VDisplay(DRAW);					break;								case objList:					libraryList->VDisplay(DRAW);					break;				}			break;				case msgReset:			switch(who)				{				case objView:					view->ResetViewPoly();					walkPane->VDisplay(DRAW);					break;									case objList:					libraryList->Reset();					break;									case objDefaults:					libraryList->Reset();					walkPane->Reset();					libraryTitle->Reset();					break;				}			break;		}	}voidLibViewController::Response(void *val,int action,int who,int scope)	{	AppPreference		*appPref;	ModelPreference		*modelPref;	Angle3D	newAngle;	Point3D	newPoint;	int	focal,film;	RGBColor color;		switch(action)		{		case msgInit:			switch(who) 				{				case objDefaults:					polyhedron = pLc(controller)->drawing->polyhedron;					appPref = controller->GetPreference();					modelPref = (ModelPreference*)appPref->GetPreference(preferModeler);					polyhedron->SetColor(modelPref->skyColor,0xFFFF,SURF_SHARED);				case objView:					SetPreference(controller->GetPreference(),TRUE);					break;				case objIO: 					if(libraryList->theList->ALength())						{						libraryList->SetSelection(0);						libraryList->Reset(); 						#if VR			// ABD WILLIAMS 8/10/93 v						libraryList->BuildThumbnails();		// ABD WILLIAMS 8/10/93 #endif //VR 	// ABD WILLIAMS 8/10/93 ^						LoadLibraryItem(0); 						}					break;				}			break;					case msgReset:			switch(who) 				{				case objList:					libraryList->Reset(); break;							case objDefaults:					appPref = controller->GetPreference();					modelPref = (ModelPreference*)appPref->GetPreference(preferModeler);					polyhedron->SetColor(modelPref->skyColor,0xFFFF,SURF_SHARED);				case objIO:					SetPreference(controller->GetPreference(),TRUE);					break;								case objView:					SetPreference(controller->GetPreference(),TRUE);					walkPane->VDisplay(DRAW);					break;				}		case msgEdit:		case msgCreate:		case msgDestroy:			view->ResetViewPoly();					case msgUpdate:			switch(who)				{				case objPolygon:				case objPolyhedron:				case objObserver:				case objView:					walkPane->VDisplay(DRAW);					break;								case objList:					libraryList->VDisplay(DRAW);					break;				}			break;				default:			break;		}	}/* LibViewController::IsAnythingSelected returns true if we have alibrary list with anything in it, otherwise false.  (something isalways selected in a library, unless the library is empty).jca 24MAR94*/intLibViewController::IsAnythingSelected(void){	if(!libraryList->theList->ALength())	return(FALSE);	else 									return(TRUE);		}// to tell the edit menu if we can paste the buffer stuffintLibViewController::CanBufferPaste(struct V_Buffer *cBuf){    ULong	bufPosition;	int direction, ok = 0;    long incomingID;	bufPosition = cBuf->IOGetPosition();	if (bufPosition > 0)		{		direction = cBuf->IODirection();		cBuf->IOSetPosition(0);		cBuf->IOSetDirection(DATA_IN);		//JAM 25Sept94 also can paste surface features into libraries        //and IO_ID moved pointer--fixed so we can do groups now//		ok = ((IO_ID(cBuf,IFF_PRSM)) || (IO_ID(cBuf, IFF_PGRP)))		cBuf->IOType(&incomingID, IO_LONG);        ok = (incomingID == IFF_PRSM) || (incomingID == IFF_PGRP) || (incomingID == IFF_FEAT); 		cBuf->IOSetPosition(bufPosition);		cBuf->IOSetDirection(direction);		}    return(ok);}