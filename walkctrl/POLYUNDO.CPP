/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "PolyUndo.h"#include "UndoBuf.h"#include "CVPolyh.h"#include "Position.h"#include "PolyDefs.h"#include "CVObj.h"#include "CVConect.h"#include "CVSlice.h"#include "WalkBuff.h"#include "Misc.h"#include "VMath.h"#include "TextItem.h"		// ABD MERGE-TEXTURE 9/13/93#include <string.h>void UPoly::cEditSpec()	{	EditSpec::cEditSpec();	container = NULL;	contents = NULL;	connections[0] = NULL;	connections[1] = NULL;	connections[2] = NULL;	inheritFlag = TRUE;	}void UPoly::dEditSpec()	{	if(connections[0]) SwapConnections(NULL);	EditSpec::dEditSpec();	}void UPoly::SetInherit(int flag)	{	inheritFlag = flag;	}void UPoly::InheritEdit()	{/*	if(!inheritFlag)		undoPolyhedron->PromoteContents();*/	}int UPoly::CleanUp()	{	undoPolyhedron->ContainCleanUp();	undoPolyhedron->ConnectionCleanUp();	undoPolyhedron->AutoConnect();	return(0);	}int UPoly::SwapConnections(V_Array *connArray[3])	{	CAVConnection	**conn;	int		i,length,j,err = 0;		if(connections[0])		{		for( j = 0; j < 3; j++)			{			if(length = connections[j]->ALength())				{				conn = (CAVConnection	**)connections[j]->Use();				for(i = 0; i < length; i++,conn++)					(*conn)->dCAVConnection();				connections[j]->Unuse();				}			connections[j]->dArray();			}		}		if(connArray)		{		connections[0] = connArray[0];		connections[1] = connArray[1];		connections[2] = connArray[2];		}			return(err);	}intUPoly::GetConnections(V_Array *list[3])	{		list[0] = new(V_Array);	list[0]->cArray(0,sizeof(CAVConnection*),4);	list[1] = new(V_Array);	list[1]->cArray(0,sizeof(CAVConnection*),4);	list[2] = new(V_Array);	list[2]->cArray(0,sizeof(CAVConnection*),4);	undoPolyhedron->GetConnectionList(list);	return(0);	}intUPoly::SetContainer(Polyhedron	*cntr)	{		container = cntr;	}int UPoly::SetPolyhedron(CAVPolyhedron *newPoly)	{	undoPolyhedron = newPoly;	if(undoPolyhedron == container) container = NULL;	return(0);	}/*========================================================================= * CAVPolyhedron * UPoly::GetPolyhedron() *-------------------------------------------------------------------------*/CAVPolyhedron * UPoly::GetPolyhedron()	{	return(undoPolyhedron);	}/*========================================================================= * EditSpec *UPoly::Clone() *-------------------------------------------------------------------------*/EditSpec * UPoly::Clone()	{	EditSpec	*clone;	clone = new(UPoly);	clone->cEditSpec();	SetInherit(inheritFlag);	return(clone);	}/*========================================================================= * int UPoly::IO(V_Buffer *buffer) *-------------------------------------------------------------------------*/intUPoly::IO(V_Buffer *buffer)	{	int	err;		if(err = buffer->IOType(&inheritFlag,IO_SHORT)) return(err);			if(err = buffer->IOType(&editAction,IO_SHORT)) return(err);			if(err = buffer->IOType(&editMark,IO_SHORT)) return(err);			if(err =  buffer->IOType(&editForm,IO_SHORT)) return(err);			return(err);	}/*===============================================================================================================================================================================================================================*//*========================================================================= * int UPolyInstall::Edit() *-------------------------------------------------------------------------*/int UPolyInstall::Edit()	{	Polyhedron *oldContainer;	int		err = 0;		oldContainer = undoPolyhedron->FindContainer();	if(container)undoPolyhedron->Promote(container);	container = oldContainer;		return(err);	}/*========================================================================= * EditSpec *UPolyInstall::Clone() *-------------------------------------------------------------------------*/EditSpec * UPolyInstall::Clone()	{	UPolyInstall	*clone;		clone = new(UPolyInstall);	clone->cEditSpec();	clone->SetContainer(container);	clone->SetForm(editForm);	clone->SetAction(editAction);		return(clone);	}/*========================================================================= * int	UPolyType::SetEditType(short newEditType) *-------------------------------------------------------------------------*/int	UPolyType::SetEditType(short newEditType)	{	editType = newEditType;		return(0);	}/*========================================================================= * int UPolyType::Edit() *-------------------------------------------------------------------------*/int UPolyType::Edit()	{	int		err = 0;	short	swapEditType;	swapEditType = undoPolyhedron->GetEditType();	undoPolyhedron->SetEditType(editType);	editType = swapEditType;		return(err);	}/*========================================================================= * EditSpec *UPolyType::Clone() *-------------------------------------------------------------------------*/EditSpec * UPolyType::Clone()	{	UPolyType	*clone = new(UPolyType);	clone->cEditSpec();	clone->SetEditType(editType);	clone->SetForm(editForm);		return(clone);	}/*========================================================================= * int UPolyMove::Edit() *-------------------------------------------------------------------------*/int UPolyMove::Edit()	{	CAVPolyhedron	*oldContainer,**pPoly;	V_Array			*oldConnections[3];	int				i,length,err = 0;			if(!inheritFlag && undoPolyhedron->contents && (length = undoPolyhedron->contents->ALength()))		{		contents = new(V_Array);		contents->cArray(0,sizeof(CAVPolyhedron*),4);		undoPolyhedron->contents->CopyArray(contents);		pPoly = (CAVPolyhedron**)undoPolyhedron->contents->Use();		for( i = length-1; i >= 0; i--)			undoPolyhedron->Remove(pPoly[i]);		undoPolyhedron->contents->Unuse();		}	else		contents = NULL;	GetConnections(oldConnections);			err = EditAction();				if(connections[0] || connections[1] || connections[2])		undoPolyhedron->SetConnectionList(connections);			SwapConnections(oldConnections);		if(container)	 	{	 	oldContainer = pcp(undoPolyhedron->FindContainer());	 	if(oldContainer != container)			{			if(oldContainer)oldContainer->Remove(undoPolyhedron);			container->Install(undoPolyhedron);			container = oldContainer;			}		}		if(contents)		{		length = contents->ALength();		pPoly = (CAVPolyhedron**)contents->Use();		for( i = 0; i < length; i++,pPoly++)			undoPolyhedron->Install(*pPoly);		contents->Unuse();		}								return(err);	}/*========================================================================= * int UPolyMove::EditAction() *-------------------------------------------------------------------------*/int UPolyMove::EditAction()	{	Point3DFFixed	offset;	int				err = 0;				InheritEdit();			offset.x = FFSub(pointVector.x,baseVector.x);	offset.y = FFSub(pointVector.y,baseVector.y);	offset.z = FFSub(pointVector.z,baseVector.z);				switch(editAction)		{		case _EDIT_MOVE_TOPEND: undoPolyhedron->NewMoveEnds(offset,Pt3DFFZero); break;		case _EDIT_MOVE_BOTEND: undoPolyhedron->NewMoveEnds(Pt3DFFZero,offset); break;		case _EDIT_MOVE_BOTHEND:undoPolyhedron->NewMoveEndsAbs(&baseVector,&pointVector); break;		case _EDIT_MOVE: undoPolyhedron->NewMove(offset); break;		case _EDIT_MOVEORG: undoPolyhedron->OriginMove(offset);break;		case _EDIT_MOVEPT: editMark = undoPolyhedron->NewMoveCorner(offset,editMark); break;		case _EDIT_MOVELINE: editMark = undoPolyhedron->NewMoveWall(offset,editMark); break;		case _EDIT_ADDPT: undoPolyhedron->NewAddPoint(pointVector,editMark); break;		case _EDIT_REMPT: undoPolyhedron->NewRemovePoint(&pointVector,editMark); break;		default: err = -1; break;		}	return(err);	}/*========================================================================= * void UPolyMove::SetVector(Point3DFFixed bVector,Point3DFFixed pVector) *-------------------------------------------------------------------------*/void UPolyMove::SetVector(Point3DFFixed bVector,Point3DFFixed pVector)	{	baseVector = bVector;	pointVector = pVector;	}/*========================================================================= * int UPolyMove::Switch() *-------------------------------------------------------------------------*/int UPolyMove::Switch()	{	Point3DFFixed swapVector;		UPoly::Switch();		switch(editAction)		{		case _EDIT_ADDPT:	editAction = _EDIT_REMPT; editMark++; break;		case _EDIT_REMPT:	editAction = _EDIT_ADDPT; editMark--; break;		case _EDIT_MOVE_BOTHEND: break;		default:			swapVector = baseVector; 			baseVector = pointVector; 			pointVector = swapVector; 			break;		}			return(0);	}/*========================================================================= * EditSpec *UPolyMove::Clone() *-------------------------------------------------------------------------*/EditSpec * UPolyMove::Clone()	{	V_Buffer	*buf;	UPolyMove	*clone;		clone = new(UPolyMove);/*	buf = new(V_Buffer);	buf->cBuffer(DATA_OUT);	IO(buf);	buf->IOSetDirection(DATA_OUT);	buf->IOSetPosition(0);	clone->IO(buf);*/	clone->cEditSpec();	clone->SetVector(baseVector,pointVector);	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetContainer(container);	clone->SetInherit(inheritFlag);	clone->SetForm(editForm);	return(clone);	}/*========================================================================= * int UPolyMove::IO(V_Buffer *buffer) *-------------------------------------------------------------------------*/intUPolyMove::IO(V_Buffer *buffer)	{	int	err;		if(err = IOType(buffer,&pointVector,IO_POINT3D_FFIXED)) return(err);			if(err = IOType(buffer,&baseVector,IO_POINT3D_FFIXED)) return(err);			if(err =  buffer->IOType(&container,IO_LONG)) return(err);	/*DUDE*/		if(err = UPoly::IO(buffer)) return(err);	return(err);	}		int UPolyRotate::EditAction()	{	Position	*tPosn;	int			err = 0;		InheritEdit();	switch(editAction)		{		case _EDIT_ROTATE: 			if(!undoPolyhedron->container)				undoPolyhedron->Rotate(pointAngle,baseVector); 			else				{				tPosn = new(Position);				tPosn->cPosition();				undoPolyhedron->posn->Copy(tPosn);				tPosn->Rotate3D(pointAngle,baseVector);				tPosn->UnPosition(undoPolyhedron->container->posn);				tPosn->Copy(undoPolyhedron->rPosn);				tPosn->dPosition();				undoPolyhedron->UpdateMove();				}			break;					case _EDIT_ROTATEABS: 			baseAngle = undoPolyhedron->posn->orientation;			undoPolyhedron->RotateTo(pointAngle); 			break;					default: 			err = UPolyMove::EditAction(); 			break;		}	return(err);	}/*========================================================================= * void UPolyRotate::SetAngle(Angle3DFFixed bAngle,Angle3DFFixed pAngle) *-------------------------------------------------------------------------*/void UPolyRotate::SetAngle(Angle3DFFixed bAngle,Angle3DFFixed pAngle)	{	baseAngle = bAngle;	pointAngle = pAngle;	}/*========================================================================= * int UPolyRotate::Switch() *-------------------------------------------------------------------------*/int UPolyRotate::Switch()	{	Angle3DFFixed swapAngle;	EditSpec::Switch();	switch(editAction)		{		case _EDIT_ROTATE:  			baseAngle.roll = FFNeg(baseAngle.roll);			baseAngle.pitch = FFNeg(baseAngle.pitch);			baseAngle.yaw = FFNeg(baseAngle.yaw);			pointAngle.roll = FFNeg(pointAngle.roll);			pointAngle.pitch = FFNeg(pointAngle.pitch);			pointAngle.yaw = FFNeg(pointAngle.yaw);			break;					case _EDIT_ROTATEABS: 			swapAngle = baseAngle;			baseAngle = pointAngle;			pointAngle = swapAngle;			break;		default: 			break;		}	return(0);	}EditSpec * UPolyRotate::Clone()	{	UPolyRotate	*clone;	clone = new(UPolyRotate);	clone->cEditSpec();	clone->SetVector(baseVector,pointVector);	clone->SetAngle(baseAngle,pointAngle);	clone->SetAction(editAction);	clone->SetInherit(inheritFlag);	clone->SetMark(editMark);	clone->SetForm(editForm);	return(clone);	}int UPolyScale::EditAction()	{	Position		*tPosn;	Point3DFFixed	newScale;	Point3DFFixed	newOrigin;	int				err = 0;	InheritEdit();		switch(editAction)		{		case _EDIT_SCALE: 			if(!undoPolyhedron->container)				undoPolyhedron->Scale(multScale,originScale); 			else				{				tPosn = new(Position);				tPosn->cPosition();				undoPolyhedron->posn->Copy(tPosn);				tPosn->Scale3D(multScale,originScale);				tPosn->UnPosition(undoPolyhedron->container->posn);				tPosn->Copy(undoPolyhedron->rPosn);				tPosn->dPosition();				undoPolyhedron->UpdateMove();				}				multScale.x = FFDiv(FFOne,multScale.x);			multScale.y = FFDiv(FFOne,multScale.y);			multScale.z = FFDiv(FFOne,multScale.z);			break;		case _EDIT_SCALEABS: 			newScale = multScale;			multScale = undoPolyhedron->posn->GetScale();			undoPolyhedron->rPosn->SetShear(Shr3DFFZero); /* REVISIT WHEN CALL AVAILABLE DUDE */			undoPolyhedron->ScaleTo(newScale); 			break;					default: 			err = UPolyMove::EditAction(); 			break;		}	return(err);	}void UPolyScale::SetScale(Point3DFFixed bScale,Point3DFFixed pScale)	{	multScale = bScale;	originScale = pScale;	}EditSpec * UPolyScale::Clone()	{	UPolyScale	*clone;	clone = new(UPolyScale);	clone->cEditSpec();	clone->SetScale(multScale,originScale);	clone->SetAction(editAction);	clone->SetInherit(inheritFlag);	clone->SetMark(editMark);	clone->SetForm(editForm);	return(clone);	}/*========================================================================= * int UPolySkew::EditAction() *-------------------------------------------------------------------------*/int UPolySkew::EditAction()	{	PointFFixed		oldTopSkew,oldBottomSkew;	PointFFixed		tmpTopSkew,tmpBottomSkew;	int				err = 0;		InheritEdit();	switch(editAction)		{		case _EDIT_UNSKEW: 			oldTopSkew = undoPolyhedron->pointSkew;			oldBottomSkew = undoPolyhedron->baseSkew;			tmpTopSkew.h = FFSub(topSkew.h,oldTopSkew.h);			tmpTopSkew.v = FFSub(topSkew.v,oldTopSkew.v);			tmpBottomSkew.h = FFSub(bottomSkew.h,oldBottomSkew.h);			tmpBottomSkew.v = FFSub(bottomSkew.v,oldBottomSkew.v);			undoPolyhedron->SkewEnds(tmpTopSkew,tmpBottomSkew); 			SetSkew(oldTopSkew,oldBottomSkew);			break;					default: 			err = UPolyMove::EditAction(); 			break;		}			return(err);	}/*========================================================================= * void UPolySkew::SetSkew(PointFFixed newTopSkew,PointFFixed newBottomSkew) *-------------------------------------------------------------------------*/void UPolySkew::SetSkew(PointFFixed newTopSkew,PointFFixed newBottomSkew)	{	topSkew = newTopSkew;	bottomSkew = newBottomSkew;	}/*========================================================================= * EditSpec *UPolySkew::Clone() *-------------------------------------------------------------------------*/EditSpec * UPolySkew::Clone()	{	UPolySkew	*clone;	clone = new(UPolySkew);	clone->cEditSpec();	clone->SetSkew(topSkew,bottomSkew);	clone->SetInherit(inheritFlag);	clone->SetAction(editAction);	clone->SetForm(editForm);	return(clone);	}/*========================================================================= * int UPolyColor::Edit() *-------------------------------------------------------------------------*/int UPolyColor::Edit()	{	RGBColor oldColor;	short oldAlpha,oldSide;		oldColor = undoPolyhedron->GetColor(side);	oldAlpha = undoPolyhedron->GetOpacity();		undoPolyhedron->SetColor(color,alpha,side);		color = oldColor;	alpha = oldAlpha;		return(0);	}/*========================================================================= * EditSpec *UPolyColor::Clone() *-------------------------------------------------------------------------*/EditSpec * UPolyColor::Clone()	{	UPolyColor	*clone;	clone = new(UPolyColor);	clone->cEditSpec();	clone->SetColor(color,alpha,side);	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetForm(editForm);	return(clone);	}	/*========================================================================= * void UPolyColor::SetColor(RGBColor newColor,short newAlpha,short newSide) *-------------------------------------------------------------------------*/void UPolyColor::SetColor(RGBColor newColor,short newAlpha,short newSide)	{	color = newColor;	alpha = newAlpha;	side = newSide;	}// ABD MERGE-TEXTURE 9/13/93 [[[/*========================================================================= * EditSpec *UPolyTexture::Clone() *-------------------------------------------------------------------------*/EditSpec * UPolyTexture::Clone()		// ABD TEXTURE	{	UPolyTexture	*clone;	clone = new(UPolyTexture);	clone->cEditSpec();	clone->SetTexture(texture,side);	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetForm(editForm);	return(clone);	}	/*========================================================================= * void UPolyTexture::SetTexture() *-------------------------------------------------------------------------*/void UPolyTexture::SetTexture(struct TextureItem *newTexture,short newSide)		// ABD TEXTURE	{	texture = newTexture;	side = newSide;	}/*========================================================================= * int UPolyTexture::Edit() *-------------------------------------------------------------------------*/int UPolyTexture::Edit()		// ABD TEXTURE	{	struct TextureItem *oldTexture;	short oldSide;		oldTexture = undoPolyhedron->GetTexture(side);		undoPolyhedron->SetTexture(texture,side);		texture = oldTexture;		return(0);	}// ABD MERGE-TEXTURE 9/13/93 ]]]// ABD MERGE-GOURAUD [[[/*========================================================================= * EditSpec *UPolyGouraud::Clone() *-------------------------------------------------------------------------*/EditSpec * UPolyGouraud::Clone()	{	UPolyGouraud	*clone;	clone = new(UPolyGouraud);	clone->cEditSpec();	clone->SetShadeType(shade_type,side);	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetForm(editForm);	return(clone);	}	/*========================================================================= * void UPolyGouraud::SetShadeType(unsigned char newShadeType,short newSide) *-------------------------------------------------------------------------*/void UPolyGouraud::SetShadeType(unsigned char newShadeType,short newSide)	{	shade_type = newShadeType;	side = newSide;	}/*========================================================================= * int UPolyGouraud::Edit() *-------------------------------------------------------------------------*/int UPolyGouraud::Edit()	{	unsigned char old_shade_type;	short oldSide;		old_shade_type = undoPolyhedron->GetShadeType(side);		undoPolyhedron->SetShadeType(shade_type,side);		undoPolyhedron->Update();		shade_type = old_shade_type;		return(0);	}// ABD MERGE-GOURAUD ]]]/*========================================================================= * int UPolyHide::Edit() *-------------------------------------------------------------------------*/int UPolyHide::Edit()	{	int err = 0;	int state = 0;		state = undoPolyhedron->GetEditState();	switch(editAction)		{		case _EDIT_HIDEWALK: 			undoPolyhedron->SetHidden(TRUE);			break;					case _EDIT_SHOWWALK: 			undoPolyhedron->SetHidden(FALSE);			break;		case _EDIT_HIDE: 			state |= EDIT_HIDDEN;			undoPolyhedron->SetMode(OUT_POLY);			undoPolyhedron->SetEditState(state);			break;					case _EDIT_SHOW: 			state ^= EDIT_HIDDEN;			undoPolyhedron->SetMode(IN_POLY);			undoPolyhedron->SetEditState(state);			break;		case _EDIT_LOCK: 			state |= EDIT_LOCKED;			undoPolyhedron->SetMode(OUT_POLY);			undoPolyhedron->SetEditState(state);			break;					case _EDIT_UNLOCK: 			state ^= EDIT_LOCKED;			undoPolyhedron->SetMode(IN_POLY);			undoPolyhedron->SetEditState(state);			break;		default: err = UPoly::Edit(); break;		}		return(err);	}	/*========================================================================= * int UPolyHide::Switch() *-------------------------------------------------------------------------*/int UPolyHide::Switch()	{	int	err = 0;	UPoly::Switch();	switch(editAction)		{		case _EDIT_HIDEWALK: editAction = _EDIT_SHOWWALK; break;		case _EDIT_SHOWWALK: editAction = _EDIT_HIDEWALK; break;		case _EDIT_HIDE: editAction = _EDIT_SHOW; break;		case _EDIT_SHOW: editAction = _EDIT_HIDE; break;		case _EDIT_LOCK: editAction = _EDIT_UNLOCK; break;		case _EDIT_UNLOCK: editAction = _EDIT_LOCK; break;		default: err = UPoly::Switch(); break;		}	return(err);	}/*========================================================================= * EditSpec *UPolyHide::Clone() *-------------------------------------------------------------------------*/EditSpec * UPolyHide::Clone()	{	UPolyHide	*clone;	clone = new(UPolyHide);	clone->cEditSpec();	clone->SetAction(editAction);	clone->SetForm(editForm);	return(clone);	}/*========================================================================= * void UPolyCreate::dEditSpec() *-------------------------------------------------------------------------*/void UPolyCreate::dEditSpec()	{	if(container&&undoPolyhedron)		undoPolyhedron->dPolyhedron();	undoPolyhedron = NULL;	UPoly::dEditSpec();	}	/*========================================================================= * int UPolyCreate::Edit() *-------------------------------------------------------------------------*/int UPolyCreate::Edit()	{	V_Array	*oldConnections[3];	int	err = 0;	GetConnections(oldConnections);	/*	InheritEdit();*/	if(!inheritFlag)		undoPolyhedron->PromoteContents();		switch(editAction)		{		case _EDIT_DESTROY: 			container = pcp(undoPolyhedron->FindContainer()); 			undoPolyhedron->NewDestroy(); 			undoPolyhedron->SetMode(OUT_POLY);			break;					case _EDIT_CREATE: 			undoPolyhedron->NewCreate(); 			if(container)container->Install(undoPolyhedron);			undoPolyhedron->SetMode(IN_POLY);			container = NULL;			break;		default: err = UPoly::Edit(); break;		}	if(connections[0])		undoPolyhedron->SetConnectionList(connections);	SwapConnections(oldConnections);	return(err);	}	/*========================================================================= * int UPolyCreate::Switch() *-------------------------------------------------------------------------*/int UPolyCreate::Switch()	{	int	err = 0;	UPoly::Switch();	switch(editAction)		{		case _EDIT_DESTROY: editAction = _EDIT_CREATE; break;		case _EDIT_CREATE: editAction = _EDIT_DESTROY; break;		default: err = UPoly::Switch(); break;		}	return(err);	}/*========================================================================= * EditSpec *UPolyCreate::Clone() *-------------------------------------------------------------------------*/EditSpec * UPolyCreate::Clone()	{	UPolyCreate	*clone;	clone = new(UPolyCreate);	clone->cEditSpec();	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetContainer(container);	clone->SetInherit(inheritFlag);	clone->SetForm(editForm);	return(clone);	}/*========================================================================= * int UPolyConnect::SetConnection(CAVPolyhedron *polyhedron,int whichWall) *-------------------------------------------------------------------------*/int UPolyConnect::SetConnection(CAVPolyhedron *polyhedron,int whichWall)	{	toPolyhedron = polyhedron;	toWall = whichWall;		return(0);	}/*========================================================================= * int UPolyConnect::Edit() *-------------------------------------------------------------------------*/int UPolyConnect::Edit()	{	int	err = 0;	switch(editAction)		{		case _EDIT_CONNECT: undoPolyhedron->Connect(editMark,toPolyhedron,toWall); break;			case _EDIT_DISCONNECT:undoPolyhedron->Disconnect(editMark,toPolyhedron,toWall,-1); break;		default: err = UPoly::Edit(); break;		}	return(err);	}	/*========================================================================= * int UPolyConnect::Switch() *-------------------------------------------------------------------------*/int UPolyConnect::Switch()	{	int	err = 0;	UPoly::Switch();	switch(editAction)		{		case _EDIT_CONNECT: editAction = _EDIT_DISCONNECT; break;		case _EDIT_DISCONNECT: editAction = _EDIT_CONNECT; break;		default: err = UPoly::Switch(); break;		}	return(err);	}/*========================================================================= * EditSpec *UPolyConnect::Clone() *-------------------------------------------------------------------------*/EditSpec * UPolyConnect::Clone()	{	UPolyConnect	*clone;	clone = new(UPolyConnect);	clone->cEditSpec();	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetConnection(toPolyhedron,toWall);	clone->SetForm(editForm);	return(clone);	}int UPolyInflate::Edit()	{	int		err = 0;	char	tmpInflate;	short	tmpLevel,tmpDirection;		tmpInflate = undoPolyhedron->inflate;	tmpLevel = undoPolyhedron->levels;		if((-1 == direction) || (-1 == inflate))		{		if((INFL_DUALELLIPSE == tmpInflate)||(INFL_DUALCONVERGE == tmpInflate)) tmpDirection = INFL_BOTH; 		else tmpDirection = INFL_SINGLE;				switch(direction)			{			case INFL_SINGLE:				if(INFL_DUALELLIPSE == tmpInflate)inflate = INFL_ELLIPSE;				else 					{					if(INFL_DUALCONVERGE == tmpInflate)inflate = INFL_CONVERGE;					else inflate = tmpInflate;					}				break;							case INFL_BOTH:				if(INFL_ELLIPSE == tmpInflate)inflate = INFL_DUALELLIPSE;				else					{					if(INFL_CONVERGE == tmpInflate)inflate = INFL_DUALCONVERGE;					else inflate = tmpInflate;					}				break;							default:				tmpDirection = -1;				switch(inflate)					{					case INFL_EXTRUDE:						inflate = INFL_EXTRUDE;						break;					case INFL_ELLIPSE:						if(INFL_DUALELLIPSE == tmpInflate)inflate = INFL_DUALELLIPSE;						if(INFL_DUALCONVERGE == tmpInflate)inflate = INFL_DUALELLIPSE;						break;					case INFL_CONVERGE:						if(INFL_DUALELLIPSE == tmpInflate)inflate = INFL_DUALCONVERGE;						if(INFL_DUALCONVERGE == tmpInflate)inflate = INFL_DUALCONVERGE;						break;					default:						break;					}				break;			}		}	else		{		switch(inflate)			{			case INFL_EXTRUDE:				inflate = INFL_EXTRUDE;				break;			case INFL_ELLIPSE:				if(INFL_BOTH == direction)inflate = INFL_DUALELLIPSE;				break;			case INFL_CONVERGE:				if(INFL_BOTH == direction)inflate = INFL_DUALCONVERGE;				break;			}		}			if(tmpInflate != inflate || tmpLevel != levels)		{		undoPolyhedron->ChangeInflate(inflate,levels);		inflate = tmpInflate;		levels = tmpLevel;		direction = tmpDirection;		}	return(err);	}int UPolyInflate::SetInflate(char newInflate,short newLevels,short dir)	{	int		err = 0;			levels = newLevels;	inflate = newInflate;    direction = dir;	return(err);	}EditSpec * UPolyInflate::Clone()	{	UPolyInflate	*clone;	clone = new(UPolyInflate);	clone->cEditSpec();	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetInflate(inflate,levels,direction);	clone->SetForm(editForm);	return(clone);	}int UPolyDirection::Edit()	{	int		err = 0;	if(-1 == direction)		undoPolyhedron->Invert();	else		if(undoPolyhedron->ForceFlip(direction))			undoPolyhedron->Invert();				return(err);	}int UPolyDirection::SetDirection(short newDirection)	{	int		err = 0;			direction = newDirection;	return(err);	}EditSpec * UPolyDirection::Clone()	{	UPolyDirection	*clone;	clone = new(UPolyDirection);	clone->cEditSpec();	clone->SetAction(editAction);	clone->SetDirection(direction);	clone->SetForm(editForm);	return(clone);	}void UPolyText::cEditSpec()	{	UPoly::cEditSpec();	text = NULL;	}void UPolyText::dEditSpec()	{	if(text)DisposHandle((Handle)text);	UPoly::dEditSpec();	}int UPolyText::Edit()	{	V_Array	*dat;	Handle	hStr;	char	*vnm,*pStr;	long	len;	int		err = 0;			hStr = NULL;	len = 0;	switch(editAction)		{		case _EDIT_NAME: dat = undoPolyhedron->GetNameArray(); break;		case _EDIT_DATA: dat = undoPolyhedron->GetDataArray(); break;		}			if(NULL != dat)		{		len = dat->ALength();		hStr = NewHandle(len);		HLock(hStr);		pStr = (char *)HDeref(hStr);		vnm = (char*)dat->Use();		memmove(pStr, vnm, len);		dat->Unuse();		HUnlock(hStr);		}			if(NULL == text)		pStr = NULL;	else 		{		HLock(text);		pStr = (char *)HDeref(text);		HUnlock(text);		}	switch(editAction)		{		case _EDIT_NAME: undoPolyhedron->SetName(pStr,length); break;		case _EDIT_DATA: undoPolyhedron->SetData(pStr,length); break;		}		if(NULL != text)		DisposHandle(text);		text = hStr;	length = len;		return(err);	}int UPolyText::SetText(char *str,long len)	{	char 	*textPtr;	int		err = 0;			length = len;	if(NULL != text)		DisposHandle((Handle)text);		text = NewHandle(length);	HLock(text);	textPtr = (char *)HDeref(text);	memmove(textPtr, str, length);	HUnlock(text);		return(err);	}EditSpec * UPolyText::Clone()	{	UPolyText	*clone;	char	*textPtr;		clone = new(UPolyText);	clone->cEditSpec();	clone->SetAction(editAction);	HLock(text);	textPtr = (char *)HDeref(text);	clone->SetText(textPtr,length);	HUnlock(text);	clone->SetForm(editForm);	return(clone);	}	int UPolySlice::Edit()	{	CAVPolyhedron	*oldContainer;	V_Array			*oldConnections[3];	Angle3DFFixed	oldAngle;	PointFFixed		oldStart,oldEnd;	FFixed			oA,oB,oC,oD;	int				err = 0;			GetConnections(oldConnections);			switch(editAction)		{		case _EDIT_SLICE: 				oA = theSlice->a; oB = theSlice->b; oC = theSlice->c; oD = theSlice->d;			oldAngle = theSlice->orientation;			oldStart = theSlice->anchor;			oldEnd = theSlice->last;			theSlice->SetOrientation(orientation);					theSlice->SetEndPoints(start,end);			theSlice->SetDefinition(a, b, c, d);			SetEnds(oldStart,oldEnd);			SetOrientation(oldAngle);			SetDefinition(oA,oB,oC,oD);			undoPolyhedron->Update();			break;		case _EDIT_SLICEREV: 			theSlice->SetDefinition(FFNeg(a), FFNeg(b), FFNeg(c), FFNeg(d));			undoPolyhedron->Update();			break;		case _EDIT_SLICECRT: 			theSlice = new(CAVSlice);			theSlice->cSlice(a, b, c, d);			theSlice->SetOrientation(orientation);			theSlice->SetEndPoints(start,end);			undoPolyhedron->AddSlice(theSlice);			break;		case _EDIT_SLICEDES: 			undoPolyhedron->RemoveSlice(theSlice);			orientation = theSlice->GetOrientation();			theSlice->GetEndPoints(&start,&end);			a = theSlice->a; b = theSlice->b; c = theSlice->c; d = theSlice->d;			theSlice->dSlice();			break;		}				if(connections[0])		undoPolyhedron->SetConnectionList(connections);			SwapConnections(oldConnections);		if(container)	 	{	 	oldContainer = pcp(undoPolyhedron->FindContainer());	 	if(oldContainer != container)			{			if(oldContainer)oldContainer->Remove(undoPolyhedron);			container->Install(undoPolyhedron);			container = oldContainer;			}		}				}/*========================================================================= * int UPolySlice::Switch() *-------------------------------------------------------------------------*/int UPolySlice::Switch()	{	switch(editAction)		{		case _EDIT_SLICE: break;					case _EDIT_SLICEREV:			SetDefinition(FFNeg(a),FFNeg(b),FFNeg(c),FFNeg(d));			SetEnds(end,start);			break;					case _EDIT_SLICECRT: editAction = _EDIT_SLICEDES; break;					case _EDIT_SLICEDES:  editAction = _EDIT_SLICECRT; break;		}	}/*========================================================================= * void UPolySlice::SetEnds(PointFFixed newStart,PointFFixed newEnd) * void UPolySlice::SetDefinition(FFixed nA,FFixed nB,FFixed nC,FFixed nD) * void UPolySlice::SetOrientation(Angle3DFFixed newAngle) * void UPolySlice::SetSlice(CAVSlice *slc) *-------------------------------------------------------------------------*/void UPolySlice::SetEnds(PointFFixed newStart,PointFFixed newEnd) { start = newStart; end = newEnd; }void UPolySlice::SetOrientation(Angle3DFFixed newAngle) { orientation = newAngle; }void UPolySlice::SetDefinition(FFixed nA,FFixed nB,FFixed nC,FFixed nD) { a = nA; b = nB; c = nC; d = nD; }void UPolySlice::SetSlice(CAVSlice *slc) { theSlice = slc;	 }CAVSlice *UPolySlice::GetSlice() { return(theSlice);	 }/*========================================================================= * EditSpec *UPolySlice::Clone() *-------------------------------------------------------------------------*/EditSpec * UPolySlice::Clone()	{	UPolySlice	*clone;	clone = new(UPolySlice);	clone->cEditSpec();	clone->SetAction(editAction);	clone->SetEnds(start,end);	clone->SetDefinition(a,b,c,d);	clone->SetSlice(theSlice);	clone->SetOrientation(orientation);	clone->SetForm(editForm);	return(clone);	}int UPolyNumSides::Edit()	{	PointFFixed	outlinePt;	int err,oldNumber;		err = 0;		switch(editAction)		{		case _EDIT_NUMSIDES: 			oldNumber = undoPolyhedron->outline->ALength();			if( oldNumber!= number)				{				undoPolyhedron->outline->Get(0,&outlinePt);				if(oldNumber<number)undoPolyhedron->AddPoints(number-oldNumber);				else undoPolyhedron->RemovePoints(oldNumber-number);				BuildRegular(&undoPolyhedron->outline,PtFFZero,outlinePt,number);				undoPolyhedron->Update();				number = oldNumber;				}			break;					case _EDIT_NUMLEVELS: 			oldNumber = undoPolyhedron->levels;			if( oldNumber!= number)				undoPolyhedron->SetLevels(number);			number = oldNumber;			break;		}			return err ;	}void UPolyNumSides::SetNumber(int n)	{	number = n;	}		EditSpec * UPolyNumSides::Clone()	{	UPolyNumSides	*clone;	clone = new(UPolyNumSides);	clone->cEditSpec();	clone->SetAction(editAction);	clone->SetForm(editForm);	clone->SetNumber(number);	return(clone);	}