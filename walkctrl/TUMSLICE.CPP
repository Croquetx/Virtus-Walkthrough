/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "TumSlice.h"#include "TumCntrl.h"#include "TumSItem.h"#include "Polyhdrn.h"#include "Misc.h"#include "CVSlice.h"#include "CVWCntrl.h"#include "AppText.h"#include "BallHelp.h"#include <stdio.h>#include <string.h>voidTumbleSlice::SetController(Controller *cntl)	{	WalkList::SetController(cntl);	}voidTumbleSlice::SetPolyhedron(Polyhedron *poly)	{	polyhedron = poly;	BuildList();	}voidTumbleSlice::TrackHelp(Point pt,long modifier)// DAS-VWINDOWS 9/30/93	{// { DAS-VR-HELP 9/30/93#if VWT	Rect r;	r = dataRect;	BalloonHotRect(&r,pt);	Bubble(pt,&r,TXTB_SLICELIST);	#endif// } DAS-VR-HELP 9/30/93		}voidTumbleSlice::SetSlice(CAVSlice *theSlice)	{	int			where;		if(!theSlice || (0 > (where = polyhedron->slices->Find(&theSlice))))		where = 0;		if(where != selection)		SetSelection(where);			}	voidTumbleSlice::BuildList()	{	CAVSlice	**slice;	SliceItem 	**oldItem,*theItem;	int			i,length;	char 		str[256];		if(length = theList->ALength())		{		oldItem = (SliceItem**)theList->Use();		for(i = 0; i < length; i++,oldItem++)			(*oldItem)->dListItem();			theList->Unuse();		theList->SetLength(0);		}			if(!polyhedron->slices)return;	length = polyhedron->slices->ALength();	slice = (CAVSlice**)polyhedron->slices->Use();	for(i = 0; i < length; i++,slice++)		{		sprintf(str,"%s %i",TXTD_SLICE,i+1);		theItem = new(SliceItem);		theItem->cListItem(str);		theItem->SetController(controller);		theList->Append(&theItem);		theItem->SetSlice(*slice);		}	polyhedron->slices->Unuse();			SetSelection(-1);	}void TumbleSlice::Display(int type,int x,int y)	{	if( ACT_REBUILD_DRAW == type) BuildList();		WalkList::Display(type,x,y);	}CAVSlice * TumbleSlice::GetSlice()	{	CAVSlice *slice;	SliceItem *item;		slice = NULL;		if(item = (SliceItem *)GetCurrentItem())		slice = item->GetSlice();	return(slice);	}void TumbleSlice::NoSelect()	{	EditItem *item;	item = (EditItem *)GetCurrentItem();		// ABD added coercion 8/12/93	if(item)		{		SetPane();		item->SetHilite(FALSE);		item->Hilite(FALSE);		SetSelection(-1);		UnsetPane();		}	}