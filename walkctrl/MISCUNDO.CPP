/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "MiscUndo.h"#include "UndoBuf.h"#include "RuleItem.h"#include "VMath.h"void UCadHeight::VSetItem(RulerItemDef *item) { rulerItem = item; }RulerItemDef *UCadHeight::VGetItem() { return rulerItem; }void UCadHeight::SetList(V_Array *rulerList) { list = rulerList; }void UCadHeight::SetOffset(FFixed dist) { offset = dist; }int UCadHeight::GetType() { return type;}void UCadHeight::SetType(char s,char a,int t) { state = s; axis = a; type  = t;}int  UCadHeight::Switch() 	{ 	switch(editAction)		{		case _EDIT_HEIGHT: offset = FFNeg(offset); break;		case _EDIT_GUIDE_CREATE: editAction = _EDIT_GUIDE_DELETE; break;		case _EDIT_GUIDE_DELETE: editAction = _EDIT_GUIDE_CREATE; break;		}	return(0); 	}void UCadHeight::dEditSpec()	{	if(_EDIT_GUIDE_DELETE == editAction && rulerItem)		rulerItem->dRulerItemDef();	EditSpec::dEditSpec();	}int UCadHeight::Edit()	{	FFixed	value;	int		where;		switch(editAction)		{		case _EDIT_HEIGHT:			switch(state)				{				case inRulerItem: 					value = rulerItem->GetValue(); 					value = FFAdd(offset,value);					rulerItem->SetValue(value);					break;									case inRulerItem2:					value = rulerItem->GetValue2(); 					value = FFAdd(offset,value);					rulerItem->SetValue2(value);					break;									case inRulerItemRange:					value = rulerItem->GetValue(); 					value = FFAdd(offset,value);					rulerItem->SetValue(value);					value = rulerItem->GetValue2(); 					value = FFAdd(offset,value);					rulerItem->SetValue2(value);					break;				}			break;					case _EDIT_GUIDE_CREATE:			list->Append(&rulerItem);			break;					case _EDIT_GUIDE_DELETE:			where = list->Find(&rulerItem);			list->Remove(where);			break;		}	return(0); 	}EditSpec	* UCadHeight::Clone()	{	UCadHeight	*clone;	clone = new(UCadHeight);	clone->cEditSpec();	clone->SetOffset(offset);	clone->SetType(state,axis,type);	clone->SetForm(editForm);	clone->SetAction(editAction);	clone->SetList(list);	return(clone);	}