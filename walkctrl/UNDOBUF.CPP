/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VError.h"#include "UndoBuf.h"#include "PolyUndo.h"#include "SurfUndo.h"#include "MiscUndo.h"#include "CVPolyh.h"#include "SurfDef.h"#include "SurfFeat.h"#include "RuleItem.h"#include "AppText.h"	//PRO-JAP#include <stdio.h>#include <string.h>V_Array		*gUndoArray;int EditSpecList::cArray(long ln,long sz,long blk)        // ABD MERGE-BUG2	{	int err, err2;	err = err2 = noErr;	err = V_Array::cArray(ln,sz,blk);	specList = new(V_Array);	err2 = specList->cArray(0,sizeof(EditSpec*),4);	SetEditName(TXT_EMPTY);		// PRO-JAP	editType = UNDO_NONE_FLAG;	return(err | err2);	}void EditSpecList::dArray()	{	V_Array		*editList;	EditSpec	**specs;	int			i,tmpLength;			while(length)		{		Get(0,&editList);		tmpLength = editList->ALength();		specs = (EditSpec**)editList->Use();		for(i = 0; i < tmpLength; i++,specs++)			(*specs)->dEditSpec();		editList->Unuse();		Remove(0);		editList->dArray();		}				tmpLength = specList->ALength();	specs = (EditSpec**)specList->Use();	for(i = 0; i < tmpLength; i++,specs++)		(*specs)->dEditSpec();	specList->Unuse();	specList->dArray();	V_Array::dArray();	}/*========================================================================= * int EditSpecList::Edit() *-------------------------------------------------------------------------*/int EditSpecList::Edit()	{	V_Array		**editList;	EditSpec	**specs,*firstSpec;	int			i,j,tmpLength,err;		editList =(V_Array**) Use();	for(i = 0; i < length; i++,editList++)		{		tmpLength = (*editList)->ALength();		if(!tmpLength)err = -1;		else			{			specs = (EditSpec**)(*editList)->Use();			firstSpec = *specs;			for(j = 0; j < tmpLength; j++,specs++)				if(err = (*specs)->Edit()) break;				if(err = firstSpec->CleanUp()) break;				(*editList)->Unuse();			}					if(err)break;		}	Unuse();		return(err);	}	/*========================================================================= * int EditSpecList::Reverse() *-------------------------------------------------------------------------*/void EditSpecList::Reverse()	{	V_Array		**editList;	EditSpec	**specs;	int	i,j,tmpLength,err;		editList = (V_Array**)Use();	for(i = 0; i < length; i++,editList++)		{		tmpLength = (*editList)->ALength();		specs = (EditSpec**)(*editList)->Use();		for(j = 0; j < tmpLength; j++,specs++)			if(err = (*specs)->Switch()) break;		(*editList)->Unuse();		(*editList)->Reverse();		if(err)break;		}	Unuse();		V_Array::Reverse();	}	/*========================================================================= * EditSpec *EditSpecList::cEditSpec(int editAction) *-------------------------------------------------------------------------*/EditSpec * EditSpecList::cEditSpec(int editAction)	{	EditSpec	*newSpec;		switch(editType)		{		case UNDO_CAD_FLAG:			switch(editAction)				{				case _EDIT_HEIGHT:			/* SetEditName("Height"); */ newSpec = new(UCadHeight); break;				case _EDIT_GUIDE_CREATE:	/* SetEditName("Create Guide"); */ newSpec = new(UCadHeight); break;				case _EDIT_GUIDE_DELETE:	/* SetEditName("Delete Guide"); */ newSpec = new(UCadHeight); break;				default: 					return(NULL); break;				}			break;					case UNDO_POLY_FLAG:			switch(editAction)				{				case _EDIT_CONNECT:		newSpec = new(UPolyConnect); break;/* SetEditName("Connection"); */ 				case _EDIT_MOVEORG:		newSpec = new(UPolyMove); break;/* SetEditName("Move Origin"); */ 				case _EDIT_MOVELINE:	newSpec = new(UPolyMove); break;/* SetEditName("Move Wall"); */ 				case _EDIT_MOVEPT:		newSpec = new(UPolyMove); break;/* SetEditName("Move Corner"); */ 				case _EDIT_REMPT:		newSpec = new(UPolyMove); break;/* SetEditName("Remove Point"); */ 					case _EDIT_ADDPT:		newSpec = new(UPolyMove); break;/* SetEditName("Add Point"); */ 				case _EDIT_MOVE_BOTEND: newSpec = new(UPolyMove); break;/* SetEditName("Skew Bottom"); */ 				case _EDIT_MOVE_TOPEND:	newSpec = new(UPolyMove); break;/* SetEditName("Skew Top"); */ 				case _EDIT_MOVE_BOTHEND:newSpec = new(UPolyMove); break;/* SetEditName("ReExtrude"); */ 				case _EDIT_MOVE:		newSpec = new(UPolyMove); break;/* SetEditName("Move Room"); */ 				case _EDIT_ROTATE:		newSpec = new(UPolyRotate); break;/* SetEditName("Rotation"); */ 				case _EDIT_ROTATEABS:	newSpec = new(UPolyRotate); break;/* SetEditName("Rotation"); */ 				case _EDIT_COLOR:		newSpec = new(UPolyColor); break;/* SetEditName("Color"); */ 				case _EDIT_TEXTURE:		newSpec = new(UPolyTexture); break;/* SetEditName("Texture"); */ 	// ABD MERGE-TEXTURE 9/13/93				case _EDIT_GOURAUD:		newSpec = new(UPolyGouraud); break;/* SetEditName("Gouraud"); */ 	// ABD MERGE-GOURAUD				case _EDIT_CREATE:		newSpec = new(UPolyCreate); break;/* SetEditName("Create"); */ 				case _EDIT_DESTROY:		newSpec = new(UPolyCreate); break;/* SetEditName("Delete"); */ 				case _EDIT_INFLATE:		newSpec = new(UPolyInflate); break;/* SetEditName("Inflation"); */ 				case _EDIT_DIRECTION:	newSpec = new(UPolyDirection); break;/* SetEditName("Direction"); */ 				case _EDIT_TYPE:		newSpec = new(UPolyType); break;/* SetEditName("Type"); */ 				case _EDIT_LIGHT:		return(NULL); break;/* SetEditName("Light"); */ /* dude Debugger();*/ 				case _EDIT_HIDE:		newSpec = new(UPolyHide); break;/* SetEditName("Hide"); */ 				case _EDIT_SHOW:		newSpec = new(UPolyHide); break;/* SetEditName("Show"); */ 				case _EDIT_HIDEWALK:	newSpec = new(UPolyHide); break;/* SetEditName("Hide Walk"); */ 				case _EDIT_SHOWWALK:	newSpec = new(UPolyHide); break;/* SetEditName("Show Walk"); */ 				case _EDIT_LOCK:		newSpec = new(UPolyHide); break;/* SetEditName("Lock"); */ 				case _EDIT_UNLOCK:		newSpec = new(UPolyHide); break;/* SetEditName("Unlock"); */ 				case _EDIT_GROUP:		return(NULL); break;/* SetEditName("Group"); */ /* dude Debugger();*/ 				case _EDIT_UNGROUP:		return(NULL); break;/* SetEditName("UnGroup"); */ /* dude Debugger();*/ 				case _EDIT_INSTALL:		newSpec = new(UPolyInstall); break;/* SetEditName("Install"); */ 				case _EDIT_UNSKEW:		newSpec = new(UPolySkew); break;/* SetEditName("Unskew"); */ 				case _EDIT_SCALE:		newSpec = new(UPolyScale); break;/* SetEditName("Scale"); */ 				case _EDIT_SCALEABS:	newSpec = new(UPolyScale); break;/* SetEditName("Scale"); */ 				case _EDIT_NAME:		newSpec = new(UPolyText); break;/* SetEditName("Name"); */ 				case _EDIT_DATA:		newSpec = new(UPolyText); break;/* SetEditName("Data"); */ 				case _EDIT_SLICE:		newSpec = new(UPolySlice); break;/* SetEditName("Slice"); */ 				case _EDIT_SLICEREV:	newSpec = new(UPolySlice); break;/* SetEditName("Slice"); */ 				case _EDIT_SLICECRT:	newSpec = new(UPolySlice); break;/* SetEditName("Slice"); */ 				case _EDIT_SLICEDES:	newSpec = new(UPolySlice); break;/* SetEditName("Slice"); */ 				case _EDIT_NUMSIDES:	newSpec = new(UPolyNumSides); break;/* SetEditName("Sides"); */ 				case _EDIT_NUMLEVELS:	newSpec = new(UPolyNumSides); break;/* SetEditName("Levels"); */ 				default: 				return(NULL); break; /* dude Debugger();*/ 				}			break;				case UNDO_SURF_FLAG:			switch(editAction)				{				case _EDIT_MOVEORG:		newSpec = new(USurfMove); break;/* SetEditName("Move Origin"); */ 				case _EDIT_MOVELINE:	newSpec = new(USurfMove); break;/* SetEditName("Move Wall"); */ 				case _EDIT_MOVEPT:		newSpec = new(USurfMove); break;/* SetEditName("Move Corner"); */ 				case _EDIT_REMPT:	 	newSpec = new(USurfMove); break;/* SetEditName("Remove Point"); */ 					case _EDIT_ADDPT:		newSpec = new(USurfMove); break;/* SetEditName("Add Point"); */ 				case _EDIT_MOVE:		newSpec = new(USurfMove); break;/* SetEditName("Move Room"); */ 				case _EDIT_ROTATE:		newSpec = new(USurfRotate); break;/* SetEditName("Rotation"); */ 				case _EDIT_ROTATEABS:	newSpec = new(USurfRotate); break;/* SetEditName("Rotation"); */ 				case _EDIT_COLOR:		newSpec = new(USurfColor); break;/* SetEditName("Color"); */ 				case _EDIT_TEXTURE:		newSpec = new(USurfTexture); break;/* SetEditName("Texture"); */ 	// ABD MERGE-TEXTURE 9/13/93				case _EDIT_GOURAUD:		newSpec = new(USurfGouraud); break;/* SetEditName("Gouraud"); */ 	// ABD MERGE-GOURAUD				case _EDIT_OPACITY:		newSpec = new(USurfOpacity); break;/* SetEditName("Opacity"); */ 				case _EDIT_CREATE:		newSpec = new(USurfCreate); break;/* SetEditName("Create"); */ 				case _EDIT_DESTROY:		newSpec = new(USurfCreate); break;/* SetEditName("Delete"); */ 				case _EDIT_TYPE:		newSpec = new(USurfType); break;/* SetEditName("Type"); */ 				case _EDIT_HIDE:		newSpec = new(USurfHide); break;/* SetEditName("Hide"); */ 				case _EDIT_SHOW:		newSpec = new(USurfHide); break;/* SetEditName("Show"); */ 				case _EDIT_HIDEWALK:	newSpec = new(USurfHide); break;/* SetEditName("Hide Walk"); */ 				case _EDIT_SHOWWALK:	newSpec = new(USurfHide); break;/* SetEditName("Show Walk"); */ 				case _EDIT_LOCK:		newSpec = new(USurfHide); break;/* SetEditName("Lock"); */ 				case _EDIT_UNLOCK:		newSpec = new(USurfHide); break;/* SetEditName("Unlock"); */ 				case _EDIT_SCALE:		newSpec = new(USurfScale); break;/* SetEditName("Scale"); */ 				case _EDIT_SCALEABS:	newSpec = new(USurfScale); break;/* SetEditName("Scale"); */ 				case _EDIT_ORDER:		newSpec = new(USurfOrder); break;/* SetEditName("Order"); */ 				case _EDIT_SIDE:		newSpec = new(USurfSide); break;/* SetEditName("Side"); */ 				case _EDIT_NAME:		newSpec = new(USurfText); break;/* SetEditName("Name"); */ 				case _EDIT_DATA:		newSpec = new(USurfText); break;/* SetEditName("Data"); */ 				case _EDIT_NUMSIDES:	newSpec = new(USurfNumSides); break;/* SetEditName("Sides"); */ 				default: 				return(NULL); break; /* dude Debugger();*/ 				}			break;			}				Get(0,&specList);	newSpec->cEditSpec();	newSpec->SetAction(editAction);	newSpec->SetForm(editType);	specList->Append(&newSpec);		return(newSpec);	}/*========================================================================= * V_Array *EditSpecList::NewEdit() *-------------------------------------------------------------------------*/V_Array *	EditSpecList::NewEdit()	{	V_Array			*newSpecList;	EditSpec		**origSpec,*copySpec;	int				i,tmpLength;			newSpecList = new(V_Array);	newSpecList->cArray(0,sizeof(EditSpec*),4);	tmpLength = specList->ALength();	origSpec = (EditSpec**)specList->Use();	for(i = 0; i < tmpLength; i++,origSpec++)		{		copySpec = (*origSpec)->Clone();		newSpecList->Append(&copySpec);		}	specList->Unuse();	Append(&newSpecList);	return(newSpecList);	}V_Array *	EditSpecList::SetEditObject(void *item1,void *item2,int type)	{	V_Array		*editList;	EditSpec	**spec;	int			i,tmpLength;		editList = NewEdit();	tmpLength = editList->ALength();	spec = (EditSpec**)editList->Use();	for(i = 0; i < tmpLength; i++,spec++)		{		switch(type)			{			case UNDO_POLY_FLAG: ((UPoly*)(*spec))->SetPolyhedron((CAVPolyhedron*)item1); break;			case UNDO_SURF_FLAG: ((USurf*)(*spec))->SetSurface((SurfDef*)item1,(SurfFeature*)item2); break;			case UNDO_CAD_FLAG: ((UCadHeight*)(*spec))->VSetItem((RulerItemDef*)item1); break;			}		}	editList->Unuse();		return(editList);	}void	EditSpecList::EditSurface(SurfDef *sDef,SurfFeature *sFeat)	{	V_Array			*editList;	USurf			**spec;	int				i,tmpLength;		editList = NewEdit();	tmpLength = editList->ALength();	spec = (USurf**)editList->Use();	for(i = 0; i < tmpLength; i++,spec++)		(*spec)->SetSurface(sDef,sFeat);	editList->Unuse();	}/*========================================================================= * void	EditSpecList::SetEditName(char *str) * void	EditSpecList::GetEditName(char *str) * void	EditSpecList::SetType(int newType) * int 	EditSpecList::GetType() *-------------------------------------------------------------------------*/void EditSpecList::SetEditName(char *str) { strcpy(name,str); }void EditSpecList::GetEditName(char *str) { strcpy(str,name); }void EditSpecList::SetType(int newType) { editType = newType; }int  EditSpecList::GetType() { return(editType); }EditSpec  *EditSpecList::IsAction(int checkAction) 	{ 	V_Array		*tmpList;	EditSpec	**spec,*isAction;	int			i,tmpLength;			if(!length) return(NULL);	isAction = NULL;		Get(0,&tmpList);	tmpLength = tmpList->ALength();	spec = (EditSpec**)tmpList->Use();	for(i = 0; i < tmpLength; i++,spec++)		if(checkAction == (*spec)->GetAction())			{			isAction = *spec;			break;			}	tmpList->Unuse();		return(isAction); 	}	int	EditSpecList::GetItems(int searchForm,V_Array *itemList)	{	V_Array			**tmpList;	EditSpec		*spec;	CAVPolyhedron 	*polyhedron;	SurfDef 		*surfDef;	SurfFeature 	*surfFeature;	RulerItemDef	*rulerItem;	int				i,theForm;		if(0 == length) return UNDO_NONE_FLAG;	theForm = UNDO_NONE_FLAG;		theForm = GetType();	tmpList = (V_Array**)Use();	(*tmpList)->Get(0,&spec);			if((UNDO_POLY_FLAG == theForm) && UNDO_POLY_FLAG&searchForm)		{		for(i = 0; i < length; i++,tmpList++)			{			(*tmpList)->Get(0,&spec);			polyhedron = ((UPoly*)spec)->GetPolyhedron();			itemList->Append(&polyhedron);			}		}	if((UNDO_SURF_FLAG == theForm) && UNDO_SURF_FLAG&searchForm)		{		for(i = 0; i < length; i++,tmpList++)			{			(*tmpList)->Get(0,&spec);			((USurf*)spec)->GetSurface(&surfDef,&surfFeature);			itemList->Append(&surfFeature);			}		}	if((UNDO_CAD_FLAG == theForm) && UNDO_CAD_FLAG&searchForm)		{		for(i = 0; i < length; i++,tmpList++)			{			(*tmpList)->Get(0,&spec);			rulerItem = ((UCadHeight*)spec)->VGetItem();			itemList->Append(&rulerItem);			}		}	Unuse();		return theForm;	}/**************************************************/EditSpecList	*NewUndoItem(int undoType)	{	EditSpecList	*undoItem;	if(!gUndoArray->ALength())gUndoArray->SetLength(1);	else		{		gUndoArray->Get(0,&undoItem);		undoItem->dArray();		}			undoItem = new(EditSpecList);	undoItem->cArray(0,sizeof(EditSpec	*),4);	undoItem->SetType(undoType);	gUndoArray->Put(0,&undoItem);	return(undoItem);	}EditSpecList	*GetUndoItem(int undoType)	{	EditSpecList	*undoItem = NULL;	if(gUndoArray->ALength())gUndoArray->Get(0,&undoItem);	if(undoType != undoItem->GetType())undoItem = NULL;	return(undoItem);	}EditSpecList	*UndoItem()	{	EditSpecList	*undoItem = NULL;	if(gUndoArray->ALength())		gUndoArray->Get(0,&undoItem);	return(undoItem);	}