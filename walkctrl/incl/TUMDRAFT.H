#ifndef TUMBLE_DRAFT#define TUMBLE_DRAFT#include "CadDraft.h"#define OFF_SLICE			0x00#define ON_SLICE_BEGIN		0x01#define ON_SLICE_END		0x02#define ON_SLICE			(ON_SLICE_END|ON_SLICE_BEGIN)#define MY_SELECT_RANGE	4#define MOMENTUM_FLAG	0x01#define FRICTION_FLAG	0x02struct TumbleDraft:CadDraft	{	struct 	Space 		*space;	struct  MenuTumble	*menu;	struct 	CAVTumbleObject	*tumble;	struct 	CAVPolyhedron	*polyhedron;	int		dx,dy,x,y,sphereRadius;	int 	tumbleOptions;	Point	startPt,endPt;	int 	lineState;		/* --- */		void cPane(int);	void dPane(void);	void SetController(struct Controller *);	void GetVirtual(Rect *r);	void CalcSize(Rect *,Point *,int,int);	void Display(int,int,int);	void DrawContent(int);	void MouseDown(Point,long);	void Update(void);	void TrackHelp(Point,long modifier);// DAS-VWINDOWS 9/30/93		void SetSlice(struct CAVSlice *);	void Handles(int);	void DrawHandles(int);	void OrientNormal(Point3DFFixed);	int	IO_OBJECT(struct V_Buffer *buf);	int  EditBuffer(long,long);				void SetPolyhedron(struct CAVPolyhedron *);	void SetColor(RGBColor);	void SetShadeType(unsigned char);	// MERGE-GOURAUD    #if VPRO	void SetTexture(struct TextureItem *texture);	// MERGE-VPRO-2	#endif // VPRO	void SetOpacity(int);	int  InSelectedList(Point,long);	void TumbSelect(int,int);	int  DoTranslate(long);	void LaunchEditor(void);	void CreateObject(Point,long);	void BuildSlice(short,PointFFixed*,PointFFixed*,FFixed*,FFixed*,FFixed*,FFixed*);	void UpdateObject(long);	Angle3DFFixed GetOrient(void);	void SetOrient(Angle3DFFixed);	struct SurfDef	*GetSurface(int);	void	FrontSurface(int);	void DoMomentum(Point,int,int);	void Normalize(void);	void Roll(int);	void Pitch(int);	void Yaw(int);	void SetPin(int newpin);	void SetMatrix(int m[3][3]);	void GetMatrix(int m[3][3]);		void Hand(Point,long,int);		PointFFixed Constrain(Point *,long);	void WorldSpace(int,PointFFixed*,PointFFixed*);	void 	SetOptions(int);	int 	GetOptions(void);	void	ReverseSlice(void );	void	SelectAll(int);	};	#define ptd(ptr) ((TumbleDraft*)ptr)enum menuTumble{	menuReverseSlice = menuMinify+2,	menuMomentum	};#define menuReverseSliceKey ','#if SPANISH	#define menuTumbleKeyPos     1#endif // SPANISH#define menuTumbleEuroKey		'T'#define menuReverseSliceEuroKey	'R'struct MenuTumble:MenuCad	{	void ctheMenu(void);	void Preempt(void);	void Action(int, long);	};#endif //TUMBLE_DRAFT