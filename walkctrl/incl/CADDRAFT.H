#ifndef CAD_DRAFT#define CAD_DRAFT#include "VTypes.h"#include "WTypes.h"#include "Draft.h"#include "VMenu.h"enum drawHiliteTypes{	drawMove,	drawStay,	drawStep,	drawPush,	drawCancel	};enum editModeTypes{	modeNone,	modeWait,	modeSelect,	modeTranslate	};enum constrainModeTypes{	constrainNone,	constrainHorz,	constrainVert,	constrainUpLeft,	constrainUpRight,	constrainDownLeft,	constrainDownRight,	constrainAngle	};	#define	ROTATE_ANCHOR	0x57#define SELECT_CROSS	0x88	#define	ROTATE_RANGE	20#define CONSTRAIN_RANGE	10#define MIN_CONSTRAIN_RANGE	10#define	CONSTRAIN_DEGREE_INCREMENT	15#define	DRAW_GRID	0x01#define	DRAW_GUIDE	0x02#define	DRAW_ORIGIN	0x04#if VRML_ANCHOR		// ABD PRO25 AUG95#define	DRAW_URL	0x08#endif #define	EDIT_ANCHOR			0x01#define	EDIT_CURSOR_MOVE	0x02#define	EDIT_DUMMY			0x04struct CadDraft:Draft	{	struct  CAVEnvironment	*environment;	struct 	V_Array *selectedList;	struct 	V_Array *editList;	struct  V_Array *peerList;	struct 	V_Array	*tempPoints;	struct 	V_Array	*tempFFPoints;	struct 	V_Array *horzGrid,*vertGrid,*horzGuide,*vertGuide;	struct  RulerItem	*hLocalOrigin,*vLocalOrigin;	struct 	Controller 	*controller;	Point3DFFixed	worldAnchor,worldLast,worldScaleMult;	PointFFixed		lastScale,currentScale;	FFixed			angle,lastAngle,anchorAngle;			int				editTool;	int				draftAction;	short			editMode,editAction;	long			currentModifier,lastModifier,downTime;	char			constrainMode;	RGBColor		gridColor,guideColor;	char			displayFlags,editFlags;	char			trackMethod;	int 			type; // DAS-VWINDOWS 10/9/93	virtual void    cPane(int);	virtual void	dPane(void);	virtual void	SetController(struct Controller *);		virtual void	Display(int,int,int);		virtual void	DrawContent(int);		void	DrawGrid(void);		void  	DrawTempPoints(void);	void  	ResetTools(void);	virtual void 	CalcSize(Rect *,Point *,int,int);		virtual void 	MouseDown(Point,long);	virtual void	TrackHelp(Point,long modifiers);// DAS-VWINDOW 9/30/93	void    Track(Point,long,int);			void  	MouseUp(Point,long);	int	 	KeyAction(char,long);		virtual int 	GetAction(long,long);	virtual PointFFixed	Constrain(Point*,long);		virtual void 	SearchPeers(Point,long,int);	int 	CheckIntersect(long);	int 	BuildPoly(long);	virtual void SetShadeType(unsigned char);			// ABD MERGE-GOURAUD	virtual void ChangeTexture(struct TextureItem*);	// ABD WILLIAMS MERGE-TEXTURE 9/13/93	virtual void SetTexture(struct TextureItem*);		// ABD WILLIAMS MERGE-TEXTURE 9/13/93	void 	SetZoom(double);	void	SetGrid(struct V_Array *,struct V_Array *);	void	SetGuide(struct V_Array *,struct RulerItem *,struct V_Array *,struct RulerItem *);	void	SetTrackMethod(char);	void	GridOn(int);	void	GridColor(RGBColor);	void	GuideColor(RGBColor);	void	DrawGuide(int,int,int);			void 	BuildRect(void);		void	BuildRegular(void);			void 	SetBuildPoint(PointFFixed,Point,int);		void 	ConstructObject(Point,long,short);	void 	TranslateObject(Point,long,short);		void 	RotateObject(Point,long,short);	void	SelectObject(Point,long,short);	void 	DisplayObject(short);	void 	DrawRegPoly(void);	void 	DrawMarker(void);	void	KeyInput(void);	void 	SetPosition(int,double);	void	MakeWorldRect(Rect *,int,int,int,int);	void 	SetLastPoint(int);	void 	SetTrackSet(int);	void 	SetTrackMode(int);	int 	IO(struct V_Buffer *);	int  	TakeSnapShot(struct V_Buffer *,int);	int		IsAnythingSelected(void);		// jca 23MAR94 anything in the selectedList?	ULong	SelectedConditions(void);		// jca 24MAR94 is anything in the selected opaque, transparent, rotated, skewed, etc.	virtual int  InSelectedList(Point,long);	int  ReSelect(Point,long);		virtual int	 DoTranslate(long);		void EditPoint(Point,long);		virtual void UpdateObject(long);	void ChangeColor(RGBColor*);	virtual int  EditBuffer(long,long);	virtual int  Select(void*,struct V_Array *,long);	virtual void CreateObject(Point,long);	virtual void Grouping(int);	virtual void SelectAll(int);	virtual void SelectRect(Rect *,long);	virtual void SetColor(RGBColor);	virtual void SetOpacity(int);	virtual void SetSides(int,int);	virtual void Hand(Point,long,int);		virtual void LaunchEditor(void);		virtual int IO_OBJECT(struct V_Buffer *);	virtual void Nudge(char,long);		// MERGE-GOURAUD-PRO-3	virtual void UnPosition(int);	virtual void SetEditState(int,long,int);	virtual int EditLayer(struct LayerItem *,int);	virtual PointFFixed ObjectCenter(FFixed*);		#if VRML_ANCHOR	virtual void DrawURL(Point, int);		// ABD PRO25 AUG95	#endif	};enum menuCad{	menuSnapToGrid = 1,	menuMagnify,	menuMinify	};#define menuMagnifyKey 	'='#define menuMinifyKey 	'-'#if GERMAN  #define menuMinifyKeyPos		2  #define menuUngroupKeyPos     4#elif SPANISH  #define menuMagnifyKeyPos		1  #define menuMinifyKeyPos		0  #define menuGroupKeyPos		3#else  // English default  #define menuMagnifyKeyPos	5  #define menuMinifyKeyPos	5#endif // GERMAN#define menuSnapToGridEuroKey 'S'#define menuMagnifyEuroKey 'Z'#define menuMinifyEuroKey 'O'	struct MenuCad:V_Menu	{	struct Controller *controller;	void ctheMenu(void);	void SetController(struct Controller *);	void Preempt();	void Action(int, long);	};struct EmptyPane:V_Pane	{	struct Controller *controller;	void	SetController(struct Controller *);		void 	CalcSize(Rect *,Point *,int,int);		void	Display(int,int,int);		};	#if VPROstruct BlankPane:V_Pane				// ABD	{	struct Controller *controller;	void	SetController(struct Controller *);		void 	CalcSize(Rect *,Point *,int,int);		void	Display(int,int,int);		};struct GrowPane:V_Pane{	struct Controller *controller;	void SetController(struct Controller *); 	void 		CalcSize(Rect *,Point*,int,int);    void 		Display(int,int,int);		void 		MouseDown(Point,long);	   	void 		Track(Point,long,int);			};	#endif // VPRO// jca 24MAR94 codes for whether the selected item is opaque, ....	#define SELECTED_STRAIGHT		0x00000001#define SELECTED_POINTED		0x00000002#define SELECTED_ROUNDED		0x00000004#define SELECTED_OPAQUE			0x00000010#define SELECTED_TRANSLUCENT	0x00000020#define SELECTED_TRANSPARENT	0x00000040#define SELECTED_ROTATED		0x00000100#define SELECTED_SCALED			0x00000200#define SELECTED_SKEWED			0x00000400#define SELECTED_SINGLE			0x00001000#define SELECTED_DOUBLE			0x00002000#define SELECTED_LEVELS			0x00004000#define SELECTED_SIDES			0x00008000#define SELECTED_GROUP			0x00010000#define SELECTED_CAN_GROUP		0x00020000#define SELECTED_FLAT_SHADED	0x00040000	// MERGE-GOURAUD#define SELECTED_GOURAUD_SHADED	0x00080000	// MERGE-GOURAUD#endif //CAD_DRAFT