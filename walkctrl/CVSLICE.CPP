/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "CVSlice.h"#include "Misc.h"#include "VMath.h"#include "WalkBuff.h"#include "VMemUtil.h"void CAVSlice::cSlice(FFixed aa,FFixed bb,FFixed cc,FFixed dd)	{	orientation = FFAngleZero;	Slice::cSlice(aa,bb,cc,dd);	}void CAVSlice::SetOrientation(Angle3DFFixed newOrientation) { orientation = newOrientation; }Angle3DFFixed  CAVSlice::GetOrientation() { return(orientation); }void  CAVSlice::SetDefinition(FFixed aa,FFixed bb,FFixed cc,FFixed dd){ a = aa; b = bb; c = cc; d = dd; }void  CAVSlice::SetEndPoints(PointFFixed st,PointFFixed end) 	{ 	anchor = st; 	last = end;	}void  CAVSlice::GetEndPoints(PointFFixed *st,PointFFixed *end) 	{ 	*st = anchor; 	*end = last; 	}void CAVSlice::ChangeDirection()	{		SetEndPoints(last,anchor);		a = FFNeg(a);	b = FFNeg(b);	c = FFNeg(c);	d = FFNeg(d);	}voidCAVSlice::ChangeUnit(FFixed factor)	{	anchor.h = FFMult(anchor.h, factor);	anchor.v = FFMult(anchor.v, factor);	last.h = FFMult(last.h, factor);	last.v = FFMult(last.v, factor);		Slice::ChangeUnit(factor);	}/* DWE */intCAVSlice::IO_ESLC(V_Buffer *buf)	{	Point3DFFixed origin;	int err;	err = 0;	/* Initialize origin to default values since it's not actually used */	origin.x = FFZero;	origin.y = FFZero;	origin.z = FFZero;	ObjLock((ObjectHandle)this);	IOType(buf, &origin, IO_POINT3D_FFIXED);	IOType(buf, &orientation, IO_ANGLE3D_FFIXED);	IOType(buf, &anchor, IO_POINT_FFIXED);	IOType(buf, &last, IO_POINT_FFIXED);	ObjUnlock((ObjectHandle)this);	return err;	}