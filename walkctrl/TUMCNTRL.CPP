/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "TumCntrl.h"#include "CVWCntrl.h"#include "TumBtn.h"#include "Button.h"#include "TumSItem.h"#include "TumSlice.h"#include "ClrPane.h"#include "TumDraft.h"#include "TumAxis.h"#include "SpacPane.h"#include "CVPolyh.h"#include "SurfDef.h"#include "CVDefs.h"#include "CVSlice.h"#include "CVEnvirn.h"#include "SrfEBtn.h"#include "CadPosn.h"#include "AppText.h"#include "AppDeflt.h"#include "Ruler.h"#include "RuleItem.h"#include "VMath.h"#include "VWindow.h"#include "DesEBtn.h"		// MERGE-GOURAUD#include <math.h>#include <stdio.h>#include <string.h>#include "ToolDef.h"void TumbleControl::cController(V_Document *doc)	{				CadControl::cController(doc);	toggleSpot = HAND_SPOT;	tools = (ToolButton*)controller->cTool(this,toolBTumbTools);				modifiers = (ModButton*)controller->cTool(this,toolBTumbModifiers);	gouraud_modifiers = (GouraudModButton*)controller->cTool(this,toolBTumbGouraudModifiers);		// MERGE-GOURAUD	tumbleAxis = (TumbleAxis*)controller->cTool(this,toolPAxis);			walkList = (WalkList*)controller->cTool(this,toolLSlice);			pinConsole  = (V_Console*)controller->cTool(this,toolCPin);	pin =  (PinButton*)controller->cTool(this,toolBPin);		ptd(cadDraft)->SetPolyhedron(polyhedron);	((TumbleSlice*)walkList)->SetController(this);	((TumbleSlice*)walkList)->SetPolyhedron(polyhedron);	color->SetColor(polyhedron->GetColor(SURF_OUTSIDE));		environment->SetSide(SURF_OUTSIDE);	}	voidTumbleControl::Activate(int install)	{	V_Window *window = NULL;	char	str[256];		if((msgDeactivate != install) && (msgDummy2 != install))		{		// MERGE-GOURAUD-PRO-4 all of this BS is needed to avoid the "blank tool"		tools->SetController(this);		toolConsole->SetButton(tools);		tumbleAxis->SetController(this);		pinConsole->SetButton(pin);		pin->SetController(this);		CadControl::Activate(install);		modifiers->SetController(this);		modifierConsole->SetButton(modifiers);		// MERGE-GOURAUD [[[		gouraud_modifiers->SetController(this);		gouraud_modifierConsole->SetButton(gouraud_modifiers);		gouraud_modifiers->SetButtonWidth(38);		// MERGE-GOURAUD ]]]		ptd(cadDraft)->SetPin(pin->GetPin());		}			switch(install)		{		case msgCreate:			strcpy(str,title);			SetTitle(str);			break;				case msgReset:		case msgInit:			editTool = FALSE;			ControlMessage(tools->GetTool(0),0L,ONSTATE);			break;		}	}void TumbleControl::InstallTools()	{	V_Window *window;		controller->cTool(this,toolFlush);				window = GetWindow(objTools); 		modifierConsole->SetPosition(color,topConsole);	window->Install(toolConsole);	window->Install(color);	window->Install(modifierConsole);	window->Install(gouraud_modifierConsole);	// MERGE-GOURAUD	// MERGE-GOURAUD-PRO window->Install(environmentConsole);	// MERGE-GOURAUD-PRO window->Install(position);	window->Install(pinConsole);	window->Install(tumbleAxis);	window->Install(walkList);	}	void *TumbleControl::cTool(Controller *ctrl,int toolType)	{	V_Pane	*pos;	void *tool = NULL;		switch(toolType)		{		case toolBPin:			pin = new(PinButton);			pin->cButtonSet();			tool = pin;			break;		case toolCPin:			pinConsole = new(V_Console);			pinConsole->cPane(FALSE);			//MERGE-GOURAUD-PRO pos = (V_Pane*)controller->cTool(ctrl,toolPPosition);			pinConsole->SetPosition(NULL,bottomLeftConsole);//MERGE-GOURAUD-PRO pos 			tool = pinConsole;			break;		case toolBTumbTools:			tools = new(TumbleToolButton);			tools->cButtonSet();			tool = tools;			break;		case toolBTumbModifiers:			modifiers = new(SurfModButton);			modifiers->cButtonSet();			tool = modifiers;			break;		// MERGE-GOURAUD [[[		case toolBTumbGouraudModifiers:			gouraud_modifiers = new(GouraudModButton);			gouraud_modifiers->cButtonSet();			tool = gouraud_modifiers;			break;		// MERGE-GOURAUD ]]]		case toolLSlice:/* create slice list */			walkList = new(TumbleSlice);			walkList->cPane(FALSE);			walkList->Draggable(FALSE);			tool = walkList;			break;		case toolPAxis:/* create tumble axis */			tumbleAxis = new(TumbleAxis);			tumbleAxis->cPane(FALSE);			tool = tumbleAxis;			break;		case toolPColor:/* create pop color tool */			color = new(ColorSelect);			color->cPane(FALSE);			tool = color;			break; 		default:			tool = CadControl::cTool(ctrl,toolType);			break;		}		return(tool);	}void TumbleControl::GetPlace(Rect *r,int warning,int who)	{	Rect	tr;		switch(who)		{		case toolPAxis:			pinConsole->GetRect(&tr);	// MERGE-GOURAUD-PRO			r->right = tr.right;			r->left = tr.left;			r->bottom = tr.top;			r->top=r->bottom-(tr.right-tr.left);			break;		//MERGE-GOURAUD-PRO 				case toolLList:			gouraud_modifierConsole->GetRect(&tr);		// MERGE-GOURAUD			r->top = tr.bottom;			tumbleAxis->GetRect(&tr);		// MERGE-GOURAUD moved this line			r->right = tr.right;			r->left = tr.left;			r->bottom = tr.top;			break;		default:			CadControl::GetPlace(r,warning,who);			break;		}	}int TumbleControl::GetEditSide()	{	int	side;		switch(modifiers->GetTool(3))		{		case  bFRONT_SIDE: 	side = SURF_OUTSIDE; break;		case  bSHARED_SIDE: side = SURF_SHARED; break;		case  bBACK_SIDE: 	side = SURF_INSIDE; break;			}	return(side);	}	voidTumbleControl::Init(FFixed scale, Point3DFFixed normal)	{	SetScale(FixedToDbl(scale),TRUE);	Request(NULL,msgUpdate,objTools,0);	}		void TumbleControl::ControlMessage(int message,long mod,int state)	{		int	oldTool = editTool;	switch(message)		{		case bCUT_ROOM: editTool = message; break;			default: CadControl::ControlMessage(message,mod,state); break;		}	if(bZOOM_USER != message && TRUE == zoomState)		ZoomUser(FALSE);	}voidTumbleControl::Request(void *val,int action,int who,int scope)	{	int	length,selection,newLength,m[3][3];		switch(action)		{		case objTools:			CadControl::Request(val,action,who,scope); 			break;					case msgEdit:			switch(who)				{				case objOrigin:					SetPositionOrigin();					cadDraft->VDisplay(DRAW);					break;								case objVertRuler:				case objHorzRuler:					SetGuideLines();					hRuler->VDisplay(-DRAW);					vRuler->VDisplay(-DRAW);					cadDraft->VDisplay(DRAW);					break;								case objAxis:					tumbleAxis->GetMatrix(m);					ptd(cadDraft)->SetMatrix(m);					if(ptd(cadDraft)->lineState)						ptd(cadDraft)->DrawHandles(FALSE);					cadDraft->VDisplay(-DRAW);					break;									case objTumble:					ptd(cadDraft)->GetMatrix(m);					tumbleAxis->SetMatrix(m);					tumbleAxis->VDisplay(-DRAW);					break;							case objSlice:					length = walkList->theList->ALength();					selection = walkList->selection;					walkList->VDisplay(ACT_REBUILD_DRAW);					newLength = walkList->theList->ALength();					if(length>newLength)						{						((TumbleSlice*)walkList)->NoSelect(); 						ptd(cadDraft)->lineState = FALSE;						}					else						{						if(newLength>length) selection = newLength -1; 						ptd(cadDraft)->lineState = TRUE;						((TumbleSlice*)walkList)->Hilite(selection);/* dude */						}								cadDraft->VDisplay(ACT_REBUILD_DRAW);					controller->Request(NULL,msgEdit,objPolyhedron,0);					break;									case objPolyhedron:					cadDraft->VDisplay(DRAW);					controller->Request(NULL,msgEdit,objPolyhedron,0);					break;									case objColor: cadDraft->SetColor(color->GetColor()); break;				// MERGE-VPRO-2 [[[				#if VPRO				case objTexture:    /* ABD TEXTURE */					cadDraft->SetTexture(GetTexture());					break;				#endif // VPRO				// MERGE-VPRO-2 ]]]				case objPin: ptd(cadDraft)->SetPin(pin->GetPin()); break;				default: controller->Request(NULL,action,who,0); break;				}			break;					case msgUpdate:			if(objTools == who)				{				cadDraft->VDisplay(DRAW); 				// MERGE-GOURAUD-PRO ZoomUser(FALSE);				}			break;				case msgReset:			if(objSlice == who)				((TumbleSlice*)walkList)->NoSelect();						break;		}	}/*========================================================================= * void	TumbleControl::Response(void *val,int action,int who,int scope) *-------------------------------------------------------------------------*/voidTumbleControl::Response(void *val,int action,int who,int scope)	{	switch(action)		{		case msgInit:			switch(who)				{				case objSlice:					if(polyhedron)						{						((TumbleSlice*)walkList)->SetPolyhedron(polyhedron); 						walkList->Reset();						}					break;				case objDefaults:					SetScale(GetScale(),TRUE);					Request(NULL,msgUpdate,objTools,0);					break;				}			break;					case msgEdit:			switch(who)				{				case objCad: cadDraft->VDisplay(ACT_REBUILD_DRAW); break;				case objPreference: SetPreference(controller->GetPreference(),FALSE); break;				}			break;		case msgReset:			switch(who)				{				case objSlice: cadDraft->VDisplay(-ACT_REBUILD_DRAW); break;				case objColor:  cadDraft->VDisplay(DRAW); break;						case objPolygon: cadDraft->VDisplay(-ACT_REBUILD_DRAW); break;								case objTools:					editTool = bHAND; 					SetTool(0L,_NO_TOGGLE);					Request(NULL,msgEdit,objTumble,0);					break;							case objCad:					cadDraft->VDisplay(-ACT_REBUILD_DRAW); 					break;				}			ptd(cadDraft)->SetPin(pin->GetPin());			break;				case msgUpdate: 			if(objCad == who)				cadDraft->VDisplay(ACT_REBUILD_DRAW);  			break;					}	}	voidTumbleControl::SetPin(int pin)	{ ptd(cadDraft)->SetPin(pin); }intTumbleControl::CheckPolyhedron(void *obj)	{ return(obj == polyhedron); }voidTumbleControl::SetSlice(CAVSlice *slice)	{	((TumbleSlice*)walkList)->SetSlice(slice);	ptd(cadDraft)->SetSlice(slice);	cadDraft->VDisplay(ACT_REBUILD_DRAW);	Request(NULL,msgEdit,objTumble,0);	}	CAVSlice *TumbleControl::GetSlice()	{ return(((TumbleSlice*)walkList)->GetSlice()); }voidTumbleControl::SetOrient( Angle3DFFixed angle)	{ ptd(cadDraft)->SetOrient(angle); }	Angle3DFFixedTumbleControl::GetOrient()	{ return(ptd(cadDraft)->GetOrient()); }	CadDraft *TumbleControl::NewDraft() {  return(new(TumbleDraft));  }void TumbleControl::SetTitle(char *newTitle)	{	char	str[256];	strcpy(str,newTitle);	#if JAPANESE	sprintf(str,"%s",TXTT_TUMEDITOR); // we've been requsted to drop "editor" from the title jca pro 2.0.1#elif SPANISH	sprintf(str,"%s",TXTT_TUMEDITORSPAN);#else	sprintf(str,"%s %s",TXTT_TUMEDITOR,TXTM_PREF);#endif // JAPANESE	CadControl::SetTitle(str);	}int TumbleControl::GetOptions()	{	int options;	options = ptd(cadDraft)->GetOptions();	return options;	}void TumbleControl::SetOptions(int options)	{	ptd(cadDraft)->SetOptions(options);	}void TumbleControl::ReverseSlice()	{	CAVSlice *slice;	slice = GetSlice();	if(slice)		{		slice->ChangeDirection();		polyhedron->Update();		ptd(cadDraft)->ReverseSlice();		Request(NULL,msgEdit,objPolyhedron,0);		}	}// jca 23MAR94 return the state of the selected list.  Is anything in it?// And can we cut, copy, paste?intTumbleControl::IsAnythingSelected(void){	if (GetSlice())		return(TRUE);	else		return(FALSE);}// to tell the edit menu if we can paste the buffer stuffintTumbleControl::CanBufferPaste(struct V_Buffer *cBuf){    ULong	bufPosition;	int direction, ok = 0;	bufPosition = cBuf->IOGetPosition();	if (bufPosition > 0)		{		direction = cBuf->IODirection();		cBuf->IOSetPosition(0);		cBuf->IOSetDirection(DATA_IN);		ok = IO_ID(cBuf,IFF_SLIC);		cBuf->IOSetPosition(bufPosition);		cBuf->IOSetDirection(direction);		}    return(ok);}// and if anything is selected, is it (or are they) opaque, translucent,// transparent, straight, rounded, pointed, scaled, rotated, skewed, etc.ULongTumbleControl::SelectedConditions(void){	return(0x0L);}