/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by  	David A. Smith *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "LitSItem.h"#include "LitCntrl.h"#include "Light.h"#include "Misc.h"#include "VGraphic.h"#include "VButton.h"#include <stdio.h>#include <string.h>char lightPointChar = 0x4D;char lightAmbientChar = 0x4E;char lightActiveChar = 0x4C;void SourceItem::cListItem(Light *newLight)	{	controller = NULL;	light = newLight;	}	void SourceItem::SetController(Controller *cntrl)	{	controller = cntrl;	}		void SourceItem::Display()	{	Rect r,txtR;	char ch;			VForeColor(&vWhite);	r.left=0;	r.right=62;	r.top=location-13;	r.bottom=location+1;	VPaintRect(&r); /*get rid of anything that might already be there*/	r.left = 1;	r.right = 13;	r.bottom = location;	r.top = location - 12; 	VForeColor(&vBlack);	VFrameRect(&r);		TextSetUp(vButtonFont,vButtonFontSize,vNormal);	VTextMode(vSrcXor);	r.left+=2;//	r.bottom=r.top+2;	r.bottom=r.top+1;//  	r.top =r.bottom-vButtonFontSize;	r.top=r.bottom;	if(light->active)		VDrawChar(lightActiveChar,&r);	r.left = 14;	r.right = 26;	r.bottom = location;	r.top = location - 12; 	VForeColor(&vBlack);	VFrameRect(&r);	txtR.left=r.left+2;  	txtR.bottom=r.top+2;//  	txtR.top =txtR.bottom-vButtonFontSize;	txtR.top=txtR.bottom;	if(light->source.x || light->source.y || light->source.z)		VDrawChar(lightPointChar,&txtR);	else VDrawChar(lightAmbientChar,&txtR);	VTextMode(vSrcOr);	VForeColor(&light->color);	r.left=r.right+1;	r.right=61;	VPaintRect(&r);	VForeColor(&vBlack);	VMoveTo(r.right-7,r.top+3);	VLineTo(r.right-7,r.top+9);	VMoveTo(r.right-6,r.top+4);	VLineTo(r.right-6,r.top+8);	VMoveTo(r.right-5,r.top+5);	VLineTo(r.right-5,r.top+7);	VMoveTo(r.right-4,r.top+6);	VLineTo(r.right-4,r.top+6);	VFrameRect(&r);	}		void SourceItem::GetRect(Rect *r)	{	r->top = location - 13;	r->bottom = location+1;	r->left = 0;	r->right=62;	}	void SourceItem::Action(Point p,long modifiers)	{	if(p.h<14)		light->active=!light->active;			else if(p.h<27)		{		if(light->source.x || light->source.y || light->source.z)			{			light->source.x=light->source.y=light->source.z=0;			}		else			{			light->source.x=light->source.y=0;			light->source.z=255;			}		}	SetHilite(TRUE);	controller->Request(NULL,msgDraw,-2,0);	}intSourceItem::GetHeight(void)	{	return(25);	}voidSourceItem::Hilite(int hiliteState)	{	Rect r;	hilited = hiliteState;	if(hilited)    	{		GetRect(&r);		VPenMode(vPatCopy);		VFrameRect(&r);		}	}