/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "SurfUndo.h"#include "UndoBuf.h"#include "CVSrfDef.h"#include "CVSrfFet.h"#include "Position.h"#include "CVPolyh.h"#include "PolyDefs.h"#include "Misc.h"#include "VMath.h"#include "TextItem.h"				// ABD MERGE-TEXTURE 9/13/93#include <string.h>void USurf::cEditSpec()	{	EditSpec::cEditSpec();	surfDef = NULL;	surfFeature = NULL;	}int USurf::SetSurface(SurfDef *sDef, SurfFeature *sFeat)	{	surfDef = (CAVSurfDef*)sDef;	surfFeature = (CAVSurfFeature*)sFeat;	return(0);	}void USurf::GetSurface(SurfDef **sDef, SurfFeature **sFeat)	{	*sDef = surfDef;	*sFeat = surfFeature;	}EditSpec * USurf::Clone()	{	USurf	*clone;	clone = new(USurf);	clone->cEditSpec();	return(clone);	}void USurfInstall::SetSide(int where)	{	side = where;	}int USurfInstall::Edit()	{	int		err = 0;	surfDef->InstallFeature(surfFeature,side);		return(err);	}EditSpec * USurfInstall::Clone()	{	USurfInstall	*clone = new(USurfInstall);	clone->cEditSpec();	clone->SetSurface(surfDef,surfFeature);/* dude ??? */	clone->SetSide(side);		clone->SetForm(editForm);	return(clone);	}void USurfOrder::SetOrder(int where)	{	order = where;	}int USurfOrder::Edit()	{	surfDef->SetOrder(surfFeature,order);		order = -order;	return(0);	}EditSpec * USurfOrder::Clone()	{	USurfOrder	*clone = new(USurfOrder);	clone->cEditSpec();	clone->SetSurface(surfDef,surfFeature);/* dude ??? */	clone->SetOrder(order);		clone->SetForm(editForm);	return(clone);	}void USurfSide::SetSide(int where)	{	side = where;	}int USurfSide::Edit()	{	int		oldSide;	oldSide = surfDef->GetSide(surfFeature);	surfDef->SetSide(surfFeature,side);		side = oldSide;	return(0);	}EditSpec * USurfSide::Clone()	{	USurfSide	*clone = new(USurfSide);	clone->cEditSpec();	clone->SetSurface(surfDef,surfFeature);/* dude ??? */	clone->SetSide(side);		clone->SetForm(editForm);	return(clone);	}int	USurfType::SetEditType(short newEditType)	{	editType = newEditType;		return(0);	}int USurfType::Edit()	{	int		err = 0;	short	swapEditType;		if(!surfFeature) return(-1);	swapEditType = surfFeature->GetEditType();	surfFeature->SetEditType(editType);	editType = swapEditType;			return(err);	}EditSpec * USurfType::Clone()	{	USurfType	*clone = new(USurfType);	clone->cEditSpec();	clone->SetEditType(editType);	clone->SetForm(editForm);		return(clone);	}int USurfMove::Edit()	{	PointFFixed	offset;	int				err = 0;		if(!surfFeature) return(-1);		offset.h = FFSub(pointVector.h,baseVector.h);	offset.v = FFSub(pointVector.v,baseVector.v);		switch(editAction)		{		case _EDIT_MOVE: surfFeature->NewMove(offset); break;		case _EDIT_MOVEPT: editMark = surfFeature->NewMoveCorner(offset,editMark); break;		case _EDIT_MOVELINE: editMark = surfFeature->NewMoveSide(offset,editMark); break;		case _EDIT_ADDPT: surfFeature->NewAddPoint(pointVector,editMark); break;		case _EDIT_REMPT: surfFeature->NewRemovePoint(&pointVector,editMark); break;		default: err = -1; break;		}				return(err);	}void USurfMove::SetVector(PointFFixed bVector,PointFFixed pVector)	{	baseVector = bVector;	pointVector = pVector;	}int USurfMove::Switch()	{	PointFFixed swapVector;		USurf::Switch();		switch(editAction)		{		case _EDIT_ADDPT:	editAction = _EDIT_REMPT; editMark++; break;		case _EDIT_REMPT:	editAction = _EDIT_ADDPT; editMark--; break;		default:			swapVector = baseVector; 			baseVector = pointVector; 			pointVector = swapVector; 			break;		}			return(0);	}EditSpec * USurfMove::Clone()	{	USurfMove	*clone = new(USurfMove);	clone->cEditSpec();	clone->SetVector(baseVector,pointVector);	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetForm(editForm);	return(clone);	}		int USurfRotate::Edit()	{	Position	*pPosn;	Position	*tPosn;	Position	*sdPosn;	int	err;		if(!surfFeature) return(-1);	err = 0;		switch(editAction)		{		case _EDIT_ROTATE: 			if(!surfDef)				surfFeature->Rotate(pointAngle,baseVector); 			else				{				tPosn = new(Position);				tPosn->cPosition();				pPosn = new(Position);				pPosn->cPosition();				sdPosn = new(Position);				sdPosn->cPosition();								pPosn->SetScale(surfDef->polyhedron->posn->GetScale());				pPosn->SetShear(surfDef->polyhedron->posn->GetShear());				/*Round 1				surfDef->position->Copy(tPosn);				tPosn->SetOrigin3D(Pt3DFFZero);								tPosn->Rotate2D(pointAngle,baseVector);				tPosn->UnPosition(pPosn);				tPosn->Copy(surfFeature->posn);*/								surfDef->position->Copy(sdPosn);				sdPosn->SetOrigin(Pt3DFFZero);				sdPosn->Copy(tPosn);				tPosn->PositionX(pPosn);				tPosn->UnPosition(sdPosn);				tPosn->Copy(pPosn);				pPosn->Rotate2D(pointAngle,PtFFZero);				pPosn->UnPosition(tPosn);								surfFeature->posn->UnMove2D(baseVector);				surfFeature->posn->PositionX(pPosn);				surfFeature->posn->Move2D(baseVector);								surfFeature->Update();								tPosn->dPosition();				pPosn->dPosition();				sdPosn->dPosition();				}			break;					case _EDIT_ROTATEABS: 			baseAngle = surfFeature->posn->GetOrientation2D();			surfFeature->RotateTo(pointAngle); 			break;					default: 			err = USurfMove::Edit(); 			break;		}	return(err);	}void USurfRotate::SetAngle(FFixed bAngle,FFixed pAngle)	{	baseAngle = bAngle;	pointAngle = pAngle;	}int USurfRotate::Switch()	{	FFixed swapAngle;	EditSpec::Switch();	switch(editAction)		{		case _EDIT_ROTATE:  			baseAngle = FFNeg(baseAngle);			pointAngle = FFNeg(pointAngle);			break;					case _EDIT_ROTATEABS: 			swapAngle = baseAngle;			baseAngle = pointAngle;			pointAngle = swapAngle;			break;		default: 			break;		}	return(0);	}EditSpec * USurfRotate::Clone()	{	USurfRotate	*clone;	clone = new(USurfRotate);	clone->cEditSpec();	clone->SetVector(baseVector,pointVector);	clone->SetAngle(baseAngle,pointAngle);	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetForm(editForm);	return(clone);	}int USurfScale::Edit()	{	PointFFixed	newScale;	PointFFixed	newOrigin;	FFixed	newShear;	int		err = 0;		if(!surfFeature) return(-1);		switch(editAction)		{		case _EDIT_SCALE: 			surfFeature->Scale(multScale,originScale); 			multScale.h = FFDiv(FFOne,multScale.h);			multScale.v = FFDiv(FFOne,multScale.v);			break;		case _EDIT_SCALEABS: 			newScale = multScale;			newShear = surfShear;			multScale = surfFeature->posn->GetScale2D();			surfShear = surfFeature->posn->GetShear2D();			surfFeature->posn->SetShear2D(newShear); /* REVISIT WHEN CALL AVAILABLE DUDE */			surfFeature->ScaleTo(newScale); 			break;					default: 			err = USurfMove::Edit(); 			break;		}	return(err);	}void USurfScale::SetScale(PointFFixed bScale,PointFFixed pScale)	{	multScale = bScale;	originScale = pScale;	surfShear = FFZero;	}EditSpec * USurfScale::Clone()	{	USurfScale	*clone;	clone = new(USurfScale);	clone->cEditSpec();	clone->SetScale(multScale,originScale);	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetForm(editForm);	return(clone);	}int USurfColor::Edit()	{	RGBColor oldColor;	short oldSide;		if(surfFeature)		{		oldColor = surfFeature->GetColor();		oldSide = SURF_SHARED;		surfFeature->SetColor(color,surfFeature->GetOpacity());				}	else		{		if(!surfDef) return(-1);		oldColor = surfDef->GetColor(side);		oldSide = side;			surfDef->SetColor(color,surfDef->GetOpacity(),side);						}			color = oldColor;	side = oldSide;		return(0);	}	void USurfColor::SetColor(RGBColor newColor,short newSide)	{	color = newColor;	side = newSide;	}EditSpec * USurfColor::Clone()	{	USurfColor	*clone;	clone = new(USurfColor);	clone->cEditSpec();	clone->SetColor(color,side);	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetForm(editForm);	return(clone);	}// ABD MERGE-TEXTURE 9/13/93 [[[int USurfTexture::Edit()		// ABD TEXTURE	{	struct TextureItem *oldTexture;	short oldSide;		if(surfFeature)		{		oldTexture = surfFeature->GetTexture();		oldSide = SURF_SHARED;		surfFeature->SetTexture(texture);				}	else		{		if(!surfDef) return(-1);		oldTexture = surfDef->GetTexture(side); 		oldSide = side;			surfDef->SetTexture(texture,side);		}			texture = oldTexture;	side = oldSide;		return(0);	}	void USurfTexture::SetTexture(struct TextureItem *t, short newSide)		// ABD TEXTURE	{	texture = t;	side = newSide;	}EditSpec * USurfTexture::Clone()		// ABD TEXTURE	{	USurfTexture	*clone;	clone = new(USurfTexture);	clone->cEditSpec();	clone->SetTexture(texture,side);	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetForm(editForm);	return(clone);	}// ABD MERGE-TEXTURE 9/13/93 ]]]// ABD MERGE-GOURAUD [[[int USurfGouraud::Edit()	{	unsigned char old_shade_type;	short oldSide;		if(surfFeature)		{		DEBUGGER();#if MACINTOSH		DEBUGSTR((UChar*)"\pSurface feature cannot be gouraud shaded.");	// MERGE-GOURAUD-PRO-8#endif		}	else		{		if(!surfDef) return(-1);		old_shade_type = surfDef->GetShadeType(side); 		oldSide = side;			surfDef->SetShadeType(shade_type,side);		surfDef->polyhedron->Update();		}			shade_type = old_shade_type;	side = oldSide;		return(0);	}	void USurfGouraud::SetShadeType(unsigned char newShadeType, short newSide)	{	shade_type = newShadeType;	side = newSide;	}EditSpec * USurfGouraud::Clone()	{	USurfGouraud	*clone;	clone = new(USurfGouraud);	clone->cEditSpec();	clone->SetShadeType(shade_type,side);	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetForm(editForm);	return(clone);	}// ABD MERGE-GOURAUD ]]]int USurfOpacity::Edit()	{	int oldOpacity;		if(surfFeature)		{		oldOpacity = surfFeature->GetOpacity();			surfFeature->SetColor(surfFeature->GetColor(),opacity);				}	else		{		if(!surfDef) return(-1);		oldOpacity = surfDef->GetOpacity();		surfDef->SetColor(surfDef->GetColor(SURF_SHARED),opacity,SURF_SHARED);						}			opacity = oldOpacity;		return(0);	}	void USurfOpacity::SetOpacity(int opc)	{	opacity = opc;	}EditSpec * USurfOpacity::Clone()	{	USurfOpacity	*clone;	clone = new(USurfOpacity);	clone->cEditSpec();	clone->SetOpacity(opacity);	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetForm(editForm);	return(clone);	}	int USurfHide::Edit()	{	int err = 0;	int state = 0;		if(!surfFeature) return(-1);	state = surfFeature->GetEditState();	switch(editAction)		{		case _EDIT_HIDEWALK: 			surfFeature->SetHidden(TRUE);			break;					case _EDIT_SHOWWALK: 			surfFeature->SetHidden(FALSE);			break;		case _EDIT_HIDE: 			state |= EDIT_HIDDEN;			surfFeature->SetEditState(state);			surfFeature->SetMode(OUT_POLY);			break;					case _EDIT_SHOW: 			state ^= EDIT_HIDDEN;			surfFeature->SetEditState(state);			surfFeature->SetMode(IN_POLY);			break;		case _EDIT_LOCK: 			state |= EDIT_LOCKED;			surfFeature->SetEditState(state);			surfFeature->SetMode(OUT_POLY);			break;		case _EDIT_UNLOCK: 			state ^= EDIT_LOCKED;			surfFeature->SetEditState(state);			surfFeature->SetMode(IN_POLY);			break;		default: err = USurf::Edit(); break;		}	return(err);	}	int USurfHide::Switch()	{	int	err = 0;	USurf::Switch();	switch(editAction)		{		case _EDIT_HIDEWALK: editAction = _EDIT_SHOWWALK; break;		case _EDIT_SHOWWALK: editAction = _EDIT_HIDEWALK; break;		case _EDIT_HIDE: editAction = _EDIT_SHOW; break;		case _EDIT_SHOW: editAction = _EDIT_HIDE; break;		case _EDIT_LOCK: editAction = _EDIT_UNLOCK; break;		case _EDIT_UNLOCK: editAction = _EDIT_LOCK; break;		default: err = USurf::Switch(); break;		}	return(err);	}EditSpec * USurfHide::Clone()	{	USurfHide	*clone;	clone = new(USurfHide);	clone->cEditSpec();	clone->SetAction(editAction);	clone->SetForm(editForm);	return(clone);	}void USurfCreate::dEditSpec()	{	if(surfFeature && !surfFeature->surfDef)		surfFeature->dSurfFeature();	USurf::dEditSpec();	}int USurfCreate::Edit()	{	int	err = 0;		if(!surfFeature) return(-1);		switch(editAction)		{		case _EDIT_DESTROY: 			side = surfDef->GetSide(surfFeature);			surfDef->RemoveFeature(surfFeature,side); 			surfFeature->SetMode(OUT_POLY);			break;					case _EDIT_CREATE: 			surfDef->InstallFeature(surfFeature,side); 			surfFeature->SetDirty(TRUE);			surfFeature->SetMode(IN_POLY);			break;		default: err = USurf::Edit(); break;		}	return(err);	}	int USurfCreate::Switch()	{	int	err = 0;	USurf::Switch();	switch(editAction)		{		case _EDIT_DESTROY: editAction = _EDIT_CREATE; break;		case _EDIT_CREATE: editAction = _EDIT_DESTROY; break;		default: err = USurf::Switch(); break;		}	return(err);	}EditSpec * USurfCreate::Clone()	{	USurfCreate	*clone;	clone = new(USurfCreate);	clone->cEditSpec();	clone->SetAction(editAction);	clone->SetMark(editMark);	clone->SetSide(side);	clone->SetForm(editForm);	return(clone);	}void USurfText::cEditSpec()	{	USurf::cEditSpec();	text = NULL;	}void USurfText::dEditSpec()	{	if(text)DisposHandle((Handle)text);	EditSpec::dEditSpec();	}	int USurfText::Edit()	{	V_Array	*dat;	Handle	hStr;	char	*vnm,*pStr;	long	len;	int		err = 0;		if(!surfFeature) return(-1);	hStr = NULL;	len = 0;	switch(editAction)		{		case _EDIT_NAME: dat = surfFeature->GetNameArray(); break;		case _EDIT_DATA: dat = surfFeature->GetDataArray(); break;		}			if(dat)		{		len = dat->ALength();		hStr = NewHandle(len);		HLock(hStr);		pStr = (char *)HDeref(hStr);		vnm = (char*)dat->Use();		memmove(pStr, vnm, len);		dat->Unuse();		HUnlock(hStr);		}	if(NULL == text)		pStr = NULL;	else 		{		HLock(text);		pStr = (char *)HDeref(text);		HUnlock(text);		}	switch(editAction)		{		case _EDIT_NAME: surfFeature->SetName(pStr,length); break;		case _EDIT_DATA: surfFeature->SetData(pStr,length); break;		}		if(NULL != text)		DisposHandle(text);		text = hStr;	length = len;	return(err);	}int USurfText::SetText(char *str,long len)	{	char 	*textPtr;	int		err = 0;			length = len;	if(text)DisposHandle((Handle)text);		text = NewHandle(length);	HLock(text);	textPtr = (char *)HDeref(text);	memmove(textPtr, str, length);	HUnlock(text);	return(err);	}EditSpec * USurfText::Clone()	{	USurfText	*clone;	clone = new(USurfText);	clone->cEditSpec();	clone->SetAction(editAction);	clone->SetText((char *)HDeref(text),length);	clone->SetForm(editForm);	return(clone);	}int USurfNumSides::Edit()	{	PointFFixed outlinePt;	int oldNumber;	int err = 0;		switch(editAction)		{		case _EDIT_NUMSIDES: 			oldNumber = surfFeature->outline->ALength();			if( oldNumber!= number)				{				surfFeature->outline->Get(0,&outlinePt);				BuildRegular(&surfFeature->outline,PtFFZero,outlinePt,number);				surfFeature->Update();				number = oldNumber;				}			break;		}	return(err);	}void USurfNumSides::SetNumber(int n)	{	number = n;	}		EditSpec * USurfNumSides::Clone()	{	USurfNumSides	*clone;	clone = new(USurfNumSides);	clone->cEditSpec();	clone->SetAction(editAction);	clone->SetForm(editForm);	clone->SetNumber(number);	return(clone);	}