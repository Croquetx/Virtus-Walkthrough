#ifndef POLY_CONVEX#define POLY_CONVEX#include "WTypes.h"#include "viewcoll.h"/* 'which' argument for CalcBound() and ExpandBound() */#define BOUND_DEF		1#define BOUND_POSN		2struct PolyConvex:indirect	{	struct Polyhedron *polyhedron; /* polyhedron of which this is a convex piece */	struct V_Array *contents;	/* (PolyConvex *) convex pieces contained by this one */	/* 3D data derived from definition */	struct V_Array *surfaces;	/* (Surface *) surfaces of the poly */	Point3D boundMin, boundMax;	/* bounding box of convex piece */	Point3D posnBoundMin, posnBoundMax; /* bounding box of positioned convex piece */	Point3D boundCenter;		/* center of bounding sphere */	Point3D posnBoundCenter;	/* center after positioning */	/* short boundR;				/* radius of bounding sphere */	short posnBoundR;			/* radius after positioning */	char inverted;				/* set iff coord system is inverted due to negative scaling */	/* data for 3D rendering */	short calculated;			/* set when this poly has been calculated in this frame */	short sorted;				/* set when contained polys have been calc'ed & sorted */	short entered;				/* set when renderer enters poly from outside */	Point3DLong rendBoundMin;	/* inner- and outermost points of bounding box */	Point3DLong rendBoundMax;	/*    of points in 'rendPoints' */	short rendCenterY;			/* boundCenter.y after translate and rotate */	char clipPlanes;			/* planes of view pyramid this poly's clipped to */	char visible;				/* set when poly not outside of clip planes */	struct V_Array *closePolys;	/* (ClosePoly *) nearby polys for CleanUp() sort */	short index, lastIndex;		/* temp. values for CleanUp() sort */	short lastCount;	struct DispArray *dispPolys; /* (PolyConvex *) contained polys to display */	int dispPolyNum;			/* number of poly being drawn (for recursion limit) */	int CurrentlyDrawingInside;	//JAM MAR395 when drawing inside, don't draw outside.		/* --- */		void cPolyConvex(struct Polyhedron *);	void dPolyConvex(void);	void Install(struct Polyhedron *);	void Remove(struct Polyhedron *);		void TestClose(struct PolyConvex *);	void KillClose(void);	void AddClose(struct PolyConvex *, Point3D center, Point3D normal);/*DAS 12/12/90*/	void RemoveClose(struct PolyConvex *);	int FindSepSurface(struct PolyConvex *,Point3D* normal, Point3D* center);	void AddSurface(struct V_Array *, int, struct SurfDef *);	void SliceX(void);	void KillNullSurfs(void);	void PositionX(void);	void CalcBound(int);	void MakeSliceDist(struct Slice *, struct V_Array *);	struct Surface *FindSurface(int);	void UpdateSurfs(void);	// ABD MERGE-TEXTURE 9/13/93		void ExpandBound(Point3D *, Point3D *, int);	void CalcShade(void);#if COLLISION_DETECTION	int RayIntersectSurfaces(Point3Ddouble*, Point3Ddouble*, double , double*);	// MERGE26 ABD COLLISION DETECTION		// ABD#endif // COLLISION_DETECTION	int Inside(Point3D);	void DrawWalk(struct View *, struct Clip *, struct PolyConvex *, struct Surface *, RGBAColor);	int Calc3D(struct View *);	void Draw3D(struct View *, struct Clip *, int, RGBAColor);	};typedef struct ClosePolys/*DAS 12/12/90*/	{	struct PolyConvex *poly;	Point3D center;	Point3D normal;	} ClosePolys;#endif //POLY_CONVEX