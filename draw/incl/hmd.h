#ifndef _HMD_H_#define _HMD_H_#include "VTypes.h"#include "VMath.h"#include "VDialog.h"// EYE Codes -- left, right, none#define EYE_NONE		0		// neither eye (i.e. not currently doing a stereo eye)#define EYE_LEFT		1		// left eye#define EYE_RIGHT		2		// right eye// HMD Error Codes#define HMD_NO_ERR		0		// no HMD error#define HMD_ERROR		-1		// general HMD error// HMD Types -- when a new type is added, Observer::CreateHMD must be modified to// actually create it. #define HMD_STEREO_PAIR		0		// Stereo Pair HMD#define HMD_CYBERSCOPE		1		// Simsalabim CyberScope HMD #define HMD_VREX			2		// VRex polarized glasses HMD#define HMD_CRYSTALEYES		3		// CrystalEyes active glasses HMD/*=============================================================================*//* HMD BASE CLASS AND DERIVED CLASSES *//*=============================================================================*//*-----------------------------------------------------------------------------*//*	Base class for HMD*/struct HMD:indirect{	// ABD HMD MAR95 moved several variables to AppDeflt.h HMDPreference	short hmd_type;					// type of this HMD	struct Position *pos;			// temporary position variable	struct Observer *observer;		// the current observer	FFixed half_iod;				// half of the current inter-observer distance (in inches) 	char eye;						// the current eye: EYE_LEFT/EYE_RIGHT/EYE_NONE	int oldFilmWidth;	/*----*/		int GetType(void);		// return type of hmd		virtual int cHMD(int, struct Observer *);	virtual void dHMD(void);		virtual void SetIOD(FFixed);		virtual void ComputeIODandFOV(void);	virtual short FixUpFilmWidth(short);	virtual int Draw(int, int);	virtual int DrawLeft(int, int);	virtual int DrawRight(int, int);	virtual void ComputeLeftEye(struct Point3DFFixed *, struct Angle3DFFixed *, struct Angle3DFFixed *);	virtual void ComputeRightEye(struct Point3DFFixed *, struct Angle3DFFixed *, struct Angle3DFFixed *);	virtual int BeginDrawLeftEye(void);	virtual int BeginDrawRightEye(void);	virtual int EndDrawLeftEye(void);	virtual int EndDrawRightEye(void);	virtual void ResetFlashRoutines(struct V_Offscreen *);		virtual int IsStretchedVertically(void);	void RestoreOldFilmWidth(void);};extern int gUseHMDs;extern struct HMD *gHMD;extern long gHMDOffsetRight;extern long gHMDOffsetLeft;/*-----------------------------------------------------------------------------*//*	Derived HMD class -- the stereo pair*/struct HMDStereoPair:HMD{	int oldCenterX, oldCenterY;	Rect oldDataRect;		/*----*/	int cHMD(int, struct Observer *);	void ComputeLeftEye(struct Point3DFFixed *, struct Angle3DFFixed *, struct Angle3DFFixed *);	void ComputeRightEye(struct Point3DFFixed *, struct Angle3DFFixed *, struct Angle3DFFixed *);	int BeginDrawLeftEye(void);	int EndDrawLeftEye(void);	int BeginDrawRightEye(void);	int EndDrawRightEye(void);	short FixUpFilmWidth(short);};/*-----------------------------------------------------------------------------*//*	Derived HMD class -- the cyberscope*/struct HMDCyberScope:HMDStereoPair{	int oldLibWindowVisible;	int cHMD(int, struct Observer *);	void dHMD(void);	void ComputeLeftEye(struct Point3DFFixed *, struct Angle3DFFixed *, struct Angle3DFFixed *);	void ComputeRightEye(struct Point3DFFixed *, struct Angle3DFFixed *, struct Angle3DFFixed *);	int BeginDrawLeftEye(void);	int BeginDrawRightEye(void);};/*-----------------------------------------------------------------------------*//*	Derived HMD class -- VRex*/struct HMDVRex:HMD{	int oldCenterX, oldCenterY;	Rect oldDataRect;	// function pointers for saving/restoring flash routines	int (*oldFlashFill)(struct V_Offscreen *to,struct V_Array *points,		RGBColor *rgb,RGBColor *lineColor,int mode,int pattern);	int (*oldFlashClip)(struct V_Offscreen *to,struct V_Array *points,		RGBColor *rgb,RGBColor *lineColor,struct Clip *clip,int mode,int pattern);			/*----*/	int cHMD(int, struct Observer *);		int Draw(int, int);	void ComputeLeftEye(struct Point3DFFixed *, struct Angle3DFFixed *, struct Angle3DFFixed *);	void ComputeRightEye(struct Point3DFFixed *, struct Angle3DFFixed *, struct Angle3DFFixed *);	int BeginDrawLeftEye(void);	int BeginDrawRightEye(void);	int EndDrawLeftEye(void);	int EndDrawRightEye(void);	void ResetFlashRoutines(struct V_Offscreen *);		int IsStretchedVertically(void);};/*-----------------------------------------------------------------------------*//*	Derived HMD class -- CrystalEyes active glasses*/struct HMDCrystalEyes:HMD{	int oldCenterX, oldCenterY;	Rect oldDataRect;	int oldLibWindowVisible;	// ABD HMD MAR95		/*----*/	int cHMD(int, struct Observer *);	void dHMD(void);		int Draw(int, int);	int BeginDrawLeftEye(void);	int EndDrawLeftEye(void);	int BeginDrawRightEye(void);	int EndDrawRightEye(void);	int IsStretchedVertically(void);};/*=============================================================================*//* HMD SETTINGS DIALOG CLASS *//*=============================================================================*/struct HMDDialog:V_Dialog {		int cHMDDialog(FFixed *ipd, FFixed *wp, FFixed *dp, FFixed *dv, short *yblank);};		#endif // _HMD_H_