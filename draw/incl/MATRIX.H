#ifndef MATRIX#define MATRIX#include "WTypes.h"typedef enum { matrixX = 1, matrixY, matrixZ } matrixAxis;struct Matrix:indirect	{	FFixed matrix[3][3];	Point3DFFixed scale;	Shear3DFFixed shear;	Angle3DFFixed angle;	char calcScale;	char calcRotate;	/* --- */	void cMatrix(void);	void dMatrix(void);	void Scale(Point3DFFixed);	void Shear(Shear3DFFixed);	void Rotate(FFixed, matrixAxis);	void RotateSC(FFixed, FFixed, matrixAxis);	Point3DFFixed GetScale(void);	Shear3DFFixed GetShear(void);	Angle3DFFixed GetAngle(void);	void SetIdentity(void);	void SetMatrix(struct Matrix *);	void Multiply(struct Matrix *);	void CalcComponents(void);	FFixed Determinant(void);		// ABD MERGE2 8/16/93 moved vector methods out of this class	};	// ABD MERGE2 8/16/93 v// ABD moved the vector methods outside matrix object FFixed VectLengthPointFF(Point3DFFixed *v);				// ABD MERGE2 8/16/93double VectLengthPoint(Point3D *v);						// ABD MERGE2 8/16/93double VectLengthPointDouble(Point3Ddouble *v);			// ABD MERGE2 8/16/93FFixed VectLength(FFixed v[3]);void VectDivide(FFixed v[3], FFixed);FFixed VectDot(FFixed v1[3], FFixed v2[3]);void VectAdd(FFixed v1[3], FFixed v2[3], FFixed);// ABD MERGE2 8/16/93 ^#endif //MATRIX