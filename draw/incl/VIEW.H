/* This file has been changed to effect the new * HI-RES rendering algorithm. See View.C for * more details. DAS 8/8/93 */#ifndef VIEW#define VIEW#include "VIO.h"#include "WTypes.h"#include "VIEWCOLL.H"	// ABD COLLISION DETECTION 8/13/93/* Maximum ratio of screen area used/available in optimized clip test */#define CLIP_RATIO		2/* Clip plane mask values for clipPlanes */#define PLANE_0_M		0x0001#define PLANE_1_M		0x0002#define PLANE_2_M		0x0004#define PLANE_3_M		0x0008/* Options */#define DRAW_SEE_IN				0x0001		/* see into holes in surfaces */#define DRAW_SEE_OUT			0x0002		/* see out of holes in surfaces */#define DRAW_SEE_THROUGH		0x0004		/* see through holes in connections */#define DRAW_FRAME				0x0008		/* frame polygons */#define DRAW_FILL				0x0010		/* fill polygons */#define DRAW_SHADE				0x0020		/* normal shading */#define DRAW_NO_SHADE			0x0040		/* no shading */#define DRAW_WHITE_SHADE		0x0080		/* no shading, all white */#define DRAW_BLACK_FRAME		0x0100		/* frame in black */#define DRAW_INTERP_TRANSP		0x0200		/* use interpolated transparencies */#define DRAW_DITHER				0x0400		/* draw using dithered colors */#define DRAW_BBOX				0x0800		/* calc the bounding box */	// ABD MERGE2 8/17/93#define DRAW_TEXTURES			0x1000		/* draw textures */ // BG - turn textures on/off#define DRAW_GOURAUD			0x2000		/* MERGE-GOURAUD use gouraud shading */ /* *	Compute the line equation a*x + b*y where a and b are powers of 2 *	and are represented by their logs.  This value is proportional to the *	distance from the point (x, y) to the line. */#define DIST(x,y,a,b)	(((long)(x) << (a)) + ((long)(y) << (b)))/* *	Definitions for the perspective table. * *	0 - 8k			perspTable1[x] = persp(x)		8k * 4 bytes =		32k *	8k - 16k		perspTable2[x] = persp(x/4)		8k/4 * 2 bytes =	4k *	16k - 32k		perspTable3[x] = persp(x/16)	16k/16 * 2 bytes =	2k *	32k - 64k		perspTable4[x] = persp(x/256)	32k/256 * 2 bytes =	.25k */#define PERSP_LEN1		(8 * 1024L)#define PERSP_LEN2		(8 * 1024L)#define PERSP_LEN3		(16 * 1024L)#define PERSP_LEN4		(32 * 1024L)#define PERSP_LEN12		(PERSP_LEN1 + PERSP_LEN2)#define PERSP_LEN123	(PERSP_LEN1 + PERSP_LEN2 + PERSP_LEN3)#define PERSP_LEN1234	(PERSP_LEN1 + PERSP_LEN2 + PERSP_LEN3 + PERSP_LEN4)/* #define PERSP_ILV1_S	0 -- assumed to be 0 */#define PERSP_ILV2_S	2#define PERSP_ILV3_S	4#define PERSP_ILV4_S	8/* #define PERSP_ILV1	(1 << PERSP_ILV1_S) -- assumed to be 1 */#define PERSP_ILV2		(1 << PERSP_ILV2_S)#define PERSP_ILV3		(1 << PERSP_ILV3_S)#define PERSP_ILV4		(1 << PERSP_ILV4_S)struct View:V_IO	{	struct WalkDrawing *drawing;	char seeIn;						/* see into holes in surfaces */	char seeOut;					/* see out of holes in surfaces */	char seeThrough;				/* see through holes in connections */	char frame;						/* frame polygons */	char fill;						/* fill polygons */	char shade;						/* normal shading */	char noShade;					/* no shading */	char whiteShade;				/* no shading, all white */	char blackFrame;				/* frame in black */	char interpTransp;				/* use interpolated transparencies */	char dither;					/* draw using dithered colors */	char bbox;						/* calc the bounding box ABD MERGE2 8/17/93 */	char textures;					/* on to render textures BG */	char gouraud;					/* ABD use gouraud shading MERGE-GOURAUD */	short drawMode;					/* mode for Clip drawing; derived from fill/frame */	Point3D point;					/* where the viewer stands */	Angle3D angle;					/* view angle */	Angle3D sinAngle;				/* sines of the transformation angles */	Angle3D cosAngle;				/* cosines of the transformation angles */	struct PolyConvex *viewPoly;	/* convex polyhedron the viewer is in */	struct V_Array *viewPolys;		/* (PolyConvex *) if viewer on edge of several polys */	short focalLength;	short filmWidth;	short screenDist;		short abortCount;	short testAbort;		ULong **perspTable1;	unsigned short **perspTable2, **perspTable3, **perspTable4;	int width, height;				/* pane size from center to edge */	struct V_Array *screenPoly;		/* (Point3DFast) -- screen outline */	struct Clip *clip;	short xClipA, xClipB, zClipA, zClipB;	short xDistConst, zDistConst;	short clipWidth, clipHeight;// { DAS-LIZARD KING 10/2/93short outsideClipA;short outsideClipB;short outsideDistConst;// } DAS-LIZARD KING 10/2/93		long startTime;	short abort;	short abortTest;		// ABD MERGE2 8/17/93 v	Point3D boundMin, boundMax;	// ABD MERGE2 8/17/93 ^	struct V_Array *tempPoints;		/* array of short -- temp. for surface clipping */	struct V_Array *tempFeatPoints;	/* array of Point3DFast -- for feat clipping */	/* --- */	virtual void cView(struct WalkDrawing *);	virtual void dView(void);	#if USE_HMD	// ABD HMD JUL95 virtual int UseHMDs(void);						// MERGE-HMD ABD HMD MAR95	// ABD HMD JUL95 virtual struct HMD *GetHMD(void);				// MERGE-HMD	#endif // USE_HMD	void SetOptions(int);	int GetOptions(int);	virtual void SetPoint(Point3D);	virtual void SetFFPoint(Point3DFFixed pnt);		// ABD MERGE2 WILLIAMS 8/16/93	virtual void SetAngle(Angle3D);	void SetFFAngleHiRes(Angle3DFFixed);	virtual void ResetTilt(void);	virtual void Move(int, int, int, int, int, int);	#if COLLISION_DETECTION			// ABD COLLISION DETECTION 8/13/93 v	virtual void MoveCollision(int, int, int, int, int, int);	// ABD	void FindViewPolyCollision(Point3D);				// ABD#endif // COLLISION_DETECTION	// ABD COLLISION DETECTION 8/13/93 ^		void CalcSines(void);	void ResetViewPoly(void);	void FindViewPoly(void);		void AllocPerspTable(void);	void FreePerspTable(void);	void CalcPerspTable(void);	void UpdatePane(int, int);	void UpdateScreenPoly(int, int);	// MERGE-HMD	void SetFocalValue(int, int);	void CalcClipData(void);		void SetGoodObserverPosition(int, int);		// ABD MERGE9 9/8/93		void Draw(int, int);	int Cull(Point3D, short, short *);	void TransRot(struct V_Array *, struct V_Array *);	void Project(struct V_Array *, struct V_Array *, Point3DLong *, Point3DLong *);		// ABD JAM MERGE-TEXTURE 9/13/93 // DAS-HIRES	int ClipSurf(struct V_Array *, struct V_Array *, struct V_Array *, int);	int ClipFeat(struct SurfFeature *, int);	Point3DLong CalcClip(Point3DLong, Point3DLong, long, long); // DAS - HIRES	PointFFixed CalcClip2D(PointFFixed pt1, PointFFixed pt2, register long dist1, register long dist2);	// ABD MERGE-TEXTURE 9/13/93	FFixed CalcClip2DGouraud(FFixed pt1, FFixed pt2, register long dist1, register long dist2);	// ABD MERGE-GOURAUD	};	void MakeTextureArray(struct V_Array *in, struct V_Array **out,Rect *r,Rect *r2,	// ABD MERGE-TEXTURE 9/13/93	int, int, int, int, FFixed, FFixed, FFixed, FFixed, double);	// ABD MERGE-TEXTURE 9/13/93//JAM FASTERSPACIALCLIP [[[void InitSpacialClip(void); //creates and destroys temp arrays for spatial clippingvoid EndSpacialClip(void);//JAM FASTERSPACIALCLIP ]]]#endif //VIEW