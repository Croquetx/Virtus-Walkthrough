#ifndef SURFDEF#define SURFDEF#include "WTypes.h"#include "VIO.h"/* Masks for 'flags' */#define SDEF_COLOR			0x0007#define SDEF_FEATURE		0x0038#define SDEF_TEXTURE		0x0E00	// ABD MERGE-TEXTURE 9/13/93 fourth 3 bits (0b 0000 1110 0000 0000)#define SDEF_GOURAUD		0x7000	// ABD MERGE-GOURAUD 9/13/93 fifth 3 bits  (0b 0111 0000 0000 0000)/* Flags that indicate there's something to save to file *//* 	VRML-ABD 23JUN95	ABD NOTE: This flag just indicates if we should save something to a file.  If none of 	these flags are set, we *still* might want to save something to a file.  Use the 	routine ShouldWriteSurfDef() do determine the absolute should save/should not save.	DON'T just test flags with this!!! The result will be wrong!! */#define SDEF_IO				(SDEF_COLOR | SDEF_FEATURE | SDEF_TEXTURE | SDEF_GOURAUD)		// ABD MERGE-GOURAUD 9/13/93/* Convert 'where' to a color or feature mask for 'flags'. *//* Assumes 'where' is in range [0, 2]. */#define SDEF_COLR(f)		(0x0001 << (f))#define SDEF_FEAT(f)		(0x0008 << (f))#define SDEF_TEXT(f)		(0x0200 << (f))	// ABD MERGE-TEXTURE 9/13/93 fourth 3 bits of 'flags' (0b 0000 0010 0000 0000)#define SDEF_GOUR(f)		(0x1000 << (f))	// ABD MERGE-GOURAUD 9/13/93 fifth 3 bits of 'flags'  (0b 0001 0000 0000 0000)/* Convert 'type' to connection mask for 'flags'. *//* Assumes 'type' is in range [0, 2]. */#define SDEF_CONN(c)		(0x0040 << (c))/* Connection types; index into 'connections' */#define SDEF_PEER			0#define SDEF_CONTAINER		1#define SDEF_CONTENT		2/* Index into 'flatConnections' */#define SIDE_INSIDE			0#define SIDE_OUTSIDE		1struct SurfDef:V_IO	{	struct Polyhedron *polyhedron;	struct V_Array *connections[3];	struct Position *position;	short flags;	RGBColor insideColor;	RGBColor outsideColor;	unsigned short opacity;	struct V_Array *outline;		/* (PointFFixed) */		#if VRML_ANCHOR			// VRML-ABD 23JUN95	struct V_Array *vrml_anchor;	#endif // VRML_ANCHOR// ABD MERGE-TEXTURE 9/13/93 [[[	struct TextureItem *insideTexture;			/* ABD TEXTURE inside texture */	struct TextureItem *outsideTexture;			/* ABD TEXTURE outside texture */	struct V_Array *rawInsideTexturePoints;	// ABD TEXTURE raw inside texture points if poly is textured	struct V_Array *rawOutsideTexturePoints;	// ABD TEXTURE raw outside texture points if poly is textured	struct V_Array *rendInsideTexturePoints;	// ABD TEXTURE clipped inside texture points if poly is textured	struct V_Array *rendOutsideTexturePoints;	// ABD TEXTURE clipped outside texture points if poly is textured// ABD MERGE-TEXTURE 9/13/93 ]]]	unsigned char insideShadeType;		/* ABD MERGE-GOURAUD flat or gouraud shaded */	unsigned char outsideShadeType;		/* ABD MERGE-GOURAUD flat or gouraud shaded */	struct V_Array *features[3];	/* (SurfFeature *) */	struct V_Array *surfaces;		/* (Surface *) */	struct Surface *surface;	struct V_Array *flatConnections[2];	short firstContainer;	struct Polyhedron *outsidePoly;	struct Polyhedron *stopPoly;	short interesting[3][2];	int	renderPoly[2];					// BILBIL - multiple surface connections	/* --- */	void cSurfDef(struct Polyhedron *);	void dSurfDef(void);	void AddSurface(struct Surface *);	void KillSurfaces(void);// ABD MERGE-TEXTURE 9/13/93 [[[	void SetTexture(struct TextureItem *, int);	// ABD TEXTURE	void SetTextureIO(struct TextureItem *, int);	// ABD TEXTURE	struct TextureItem *GetTexture(int);	// ABD TEXTURE	void GetTextureName(int where, char *name);		// PRO25	void RemoveTexture(int);	// ABD TEXTURE	void CalcTextureMapping(void);	// ABD TEXTURE// ABD MERGE-TEXTURE 9/13/93 ]]]// ABD MERGE-GOURAUD [[[	unsigned char GetShadeType(short);	void SetShadeType(unsigned char,short);// ABD MERGE-GOURAUD ]]]		#if VRML_ANCHOR				// VRML-ABD 23JUN95	void SetVRMLAnchor(char *new_anchor);	struct V_Array * GetVRMLAnchor(void);	int HasVRMLAnchor(void);	int IO_VRAN(struct V_Buffer *buf);	#endif // VRML_ANCHOR		int ShouldWriteSurfDef(void);			// VRML-ABD 23JUN95	void Connect(struct Polyhedron *, struct SurfDef *);	void Disconnect(struct Polyhedron *, struct SurfDef *, int);	void DisconnectNot(struct V_Array *, int);	int Connected(struct Polyhedron *, struct SurfDef *, int);	int ConnectionType(struct Polyhedron *);	void ConnectionArray(int);	void ConnectionArrayX(int);	void InsertFlatConnection(int, struct Connection *, struct Connection *, int);	void RemoveFlatConnection(int, struct Connection *, int);	void FindOutsidePoly(void);	void FixConnections(void);	void FlatConnectionArray(int);	void FlatConnectionArrayX(int);	virtual void InstallFeature(struct SurfFeature *, int);	void RemoveFeature(struct SurfFeature *, int);	void MoveFeature(struct SurfFeature *, int, int);	void ChangeUnit(FFixed);	void SetColor(RGBColor, unsigned short, int);	RGBColor GetColor(int);	unsigned short GetOpacity(void);	void RemoveColor(int);	void ResolveOpacity(void);	int Interesting(int, int);	int LocalInterest(int);	void PropagateInterest(int, int);	void CalcTransform(Point3DFFixed, Point3D);	void CalcOutline(struct V_Array *, struct V_Array *);	void Update(Point3D, struct V_Array *, struct V_Array *);	void CalcShade(void);	int FeatCount(void);	virtual struct SurfFeature *NewSurfFeature(void);	int IO(struct V_Buffer *);	int IO_COLR(struct V_Buffer *);	int IO_SUTX(struct V_Buffer *);		// ABD MERGE-TEXTURE 9/13/93	int IO_SUGR(struct V_Buffer *);		// ABD MERGE-GOURAUD	int IO_CONN(struct V_Buffer *, short, short, struct V_Array *, short *);	SurfFeature *getSurfFeats(int location, int position); // jcowen	int getSurfFeats(int location); //jcowen	};typedef struct Connection	{	struct Polyhedron *poly;	struct SurfDef *surf;	} Connection;#endif //SURFDEF