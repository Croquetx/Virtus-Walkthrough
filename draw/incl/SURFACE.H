#ifndef SURFACE#define SURFACE#include "WTypes.h"#include "VIO.h"#include "VIEWCOLL.H"	// ABD COLLISION DETECTION 8/13/93/* values for 'visible' */#define SURF_VIS_INSIDE		1		/* surface is visible from inside */#define SURF_VIS_OUTSIDE	2		/* surface is visible from outside */#define SURF_VIS_NEITHER	3		/* viewpoint is coincident with surface *//* values for DrawSurface() 'side' parameter */#define SURF_NEARSIDE		SURF_INSIDE#define SURF_SHARESIDE		SURF_SHARED#define SURF_FARSIDE		SURF_OUTSIDE// MERGE-GOURAUD [[[/* values for surface->shadeType -- ABD MERGE-GOURAUD */#define SHADE_FLAT		0#define SHADE_GOURAUD	1// MERGE-GOURAUD ]]]struct Surface:V_IO	{	struct PolyConvex *polyConvex;	/* convex poly of which this is a surface */	struct SurfDef *surfDef;		/* surface definition information */	short surfNum;					/* polyhedron surface number */	/* 3D data derived from definition */	struct V_Array *points;			/* (short) indices into poly point list */	RGBColor insideColor;			/* unshaded inside color */	RGBColor outsideColor;			/* unshaded outside color */	unsigned char insideColorIndex;	/* ABD MERGE-GOURAUD unshaded inside color index */	unsigned char outsideColorIndex;/* ABD MERGE-GOURAUD unshaded outside color index */	Point3D normal;					/* normal vector */	Point3D posnNormal;				/* normal after object positioning */	RGBColor insideShade;			/* shaded color inside polyhedron */	RGBColor outsideShade;			/* shaded color outside polyhedron */	unsigned short opacity;	// ABD MERGE-TEXTURE 9/13/93 [[[	struct V_Array *outline;				// ABD TEXTURE outline used for texture points if poly is textured	struct V_Array *rawInsideTexturePoints;	// ABD TEXTURE raw inside texture points if poly is textured	struct V_Array *rawOutsideTexturePoints;	// ABD TEXTURE raw outside texture points if poly is textured	struct V_Array *rendInsideTexturePoints;	// ABD TEXTURE clipped inside texture points if poly is textured	struct V_Array *rendOutsideTexturePoints;	// ABD TEXTURE clipped outside texture points if poly is textured	struct ShadeEntry *insideTextureShade;		// ABD TEXTURE texture shading array	struct ShadeEntry *outsideTextureShade;		// ABD TEXTURE texture shading array	struct V_Array *NoPerspPoints;		/* JAM TEXTURE pointer to points or rendPointArray */	struct V_Array *NoPerspPointArray;	/* JAM TEXTURE array of short -- indices into 'rendPoints' */// ABD MERGE-TEXTURE 9/13/93 ]]]	// ABD MERGE-GOURAUD [[[	struct V_Array *rawInsideIntensities;	// (unsigned char) raw inside gouraud intensities	struct V_Array *rawOutsideIntensities;	// (unsigned char) raw outside gouraud intensities	struct V_Array *rendInsideIntensities;	// (FFixed) clipped inside gouraud intensities	struct V_Array *rendOutsideIntensities;	// (FFixed) clipped outside gouraud intensities	// ABD MERGE-GOURAUD ]]]	/* data for 3D rendering */	struct V_Array *rendPoints;		/* pointer to points or rendPointArray */	struct V_Array *rendPointArray;	/* array of short -- indices into 'rendPoints' */	char visible;					/* visibility of surface -- outside, inside, neither */	char clipped;					/* set iff surface is clipped away */	/* --- */			int  cSurface(struct PolyConvex *, struct SurfDef *, int, struct V_Array *);  // jca 20 Nov 93.  Too many things can go wrong here; we should give errors	void dSurface(void);		int SliceX(struct Slice *, struct V_Array *, struct V_Array *);	void PositionX(struct Position *, struct Position *, struct Position *, int);	void PositionXG(struct Position *, struct Position *, struct Position *, int);		// ABD MERGE-GOURAUD	int  CalcNorm(void);      // jca 20 Nov 93 should return errors	void PosnNorm(struct Position *, struct Position *, struct Position *);	void CalcShade(void);	Point3D Normalize(long, long, long);		void ExpandBound(Point3D *, Point3D *, int);	void CalcClip(Point3Ddouble *, Point3Ddouble *, double, double, Point3DFFixed *);	int FindPoint(Point3DFFixed *);// ABD MERGE-TEXTURE 9/13/93 [[[	struct V_Array *GetRawTexturePoints(int);		// ABD TEXTURE	struct V_Array *GetRendTexturePoints(int);		// ABD TEXTURE	struct TextureItem *GetTexture(int);		// ABD TEXTURE	struct V_Array * GetOutline(void);		// ABD TEXTURE	void CalcOutline(void);		// ABD TEXTURE// ABD MERGE-TEXTURE 9/13/93 ]]]// ABD MERGE-GOURAUD [[[	struct V_Array *GetRawIntensities(short);	struct V_Array *GetRendIntensities(short);	void SetShadeType(unsigned char,short);	unsigned char GetShadeType(short);// ABD MERGE-GOURAUD ]]]#if COLLISION_DETECTION			// ABD COLLISION DETECTION 8/13/93 v	int RayIntersect(Point3Ddouble*, Point3Ddouble*, double , double*);	// MERGE26		// ABD	int RayIntersectLowLevel(Point3Ddouble*, Point3Ddouble*, double , double*);	// MERGE26 			// ABD	void RayIntersectFeats(Point3D *, int *);		// ABD MERGE23#endif // COLLISION_DETECTION	// ABD COLLISION DETECTION 8/13/93 ^		int DrawSurface(struct View *, struct Clip *, int, int, RGBAColor);	int Draw3D(struct View *, struct Clip *, int, struct PolyConvex *, int renderPoly,		struct V_Array *, struct PolyConvex *, int, struct Surface *, int, RGBAColor); // BILBIL - multiple surface connections	};#endif //SURFACE