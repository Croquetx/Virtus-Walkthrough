#ifndef CAVPOLYHEDRON#define CAVPOLYHEDRON#include "Polyhdrn.h"/* find states for editing */#define EDIT_LOCKED		0x01#define EDIT_HIDDEN		0x02#define EDIT_NOTALLOWED	(EDIT_HIDDEN|EDIT_LOCKED)#define FIND_HIDDEN		EDIT_HIDDEN		#define FIND_LOCKED		EDIT_LOCKED		#define FIND_NORMAL		0x04		#define FIND_ALL		(FIND_HIDDEN|FIND_LOCKED|FIND_NORMAL)/* side states for editing */#define TOP_SIDE		0x01		#define BOTTOM_SIDE		0x02		#define UNKNOWN_SIDE	0x03		#define INFL_UP		0x01#define INFL_DOWN	0x02#define INFL_BOTH	0x03#define INFL_SINGLE	0x04#define POLY_CLEAN		0x00#define POLY_MUSSED		0x01#define POLY_DIRTY		0x02/* containment states */#define POLY_OUTSIDE	0x0001		/* poly is completely outside */#define POLY_SHARED		0x0002		/* poly is partially inside */#define POLY_INSIDE		0x0003		/* poly is completely inside *//* Extrude/converge types */#define P_POLY			0x0001		/* arbitrary (non-complex) polyhedron */#define P_REG			0x0002		/* regular polyhedron */#define P_RECT			0x0003		/* rectangle */#define POLY_IPOLY		(P_INFLATE | P_POLY)#define POLY_IREG		(P_INFLATE | P_REG)#define POLY_IRECT		(P_INFLATE | P_RECT)/* HACKS FOR TRACE LAYER *//* Values for 'editType' */#define EDIT_TLINE		10#define EDIT_TPOLYLINE	11#define EDIT_TPOLYGON	12#define EDIT_TELLIPSE	13#define EDIT_TSPLINE	14#define EDIT_PICTURE	15struct CAVPolyhedron:Polyhedron	{	struct V_Array *CAVlist;	/* the list of active CAV objects associated 	*/	struct LayerItem	*layer;	/* what CAV layer this belongs too				*/	char   	editState;	short	mode;	short	mark;	short	cavsurf;			/* related surface								*/			void 	cPolyhedron(struct WalkDrawing *);	void 	dPolyhedron(void);	void 	Update(void);	void 	UpdateMove(void);	void 	CAVUpdate(int);		void	Display(struct CAVEnvironment *);	void 	Select(struct CAVEnvironment *);	void 	Hilite(struct CAVEnvironment *,int);		void	SetDirty(int);	void	SetMode(int);	int  	GetEditMode(struct CAVEnvironment *);	int		GetMode(void);	void	SetLayer(struct LayerItem *,int);	struct  LayerItem 	*GetLayer(void);	Point   GetAnchor(struct CAVEnvironment *,int);	int	    OutlineMark(struct CAVEnvironment *);	int	    SurfMark(struct CAVEnvironment *);		#if VRML_ANCHOR		// ABD PRO25 AUG95 	struct  CAVPolyhedron	*FindWithNoSideEffects(PointLong*,struct CAVEnvironment *,struct  CAVPolyhedron	*,int);	#endif	 	struct  CAVPolyhedron	*Find(PointLong*,struct CAVEnvironment *,struct  CAVPolyhedron	*,int); 	int		FindDetail(PointLong*,PointFFixed *,struct CAVEnvironment *); 	int		FindEdge(PointLong*,struct CAVEnvironment *);	int		FindSurfaceNum(PointLong *,struct CAVEnvironment *);	struct  CAVPolyhedron 	*PointContained(struct CAVPolyhedron *,struct CAVEnvironment *,PointLong,struct V_Array *);	int		PolyContained(struct CAVPolyhedron	*);	int		DepthContained(struct CAVPolyhedron *,int);	int		InSphere(struct Polyhedron *toPoly);	struct  V_Array	*GetPeers(void);	struct  CAVPolyhedron *FindNewContainer(void);	void	FindNewContents(void);	void	ContainCleanUp(void);	void	ConnectionCleanUp(void);	int 	ValidConnection(struct Polyhedron *,int,int);	void	AutoConnect(void);		void	SetEditState(int);	int		GetEditState(void);	void	ResetEditState(int,int);		void 	RotatePolyhedron(Point,FFixed,struct CAVEnvironment *);	int		BreakLine(Point,FFixed,long,struct CAVEnvironment *);	int		ScalePoly(Point,PointFFixed,long,struct CAVEnvironment *);	int		SkewPoly(Point,Point,FFixed,long,struct CAVEnvironment *);	int		MovePoly(Point,Point,FFixed,long,struct CAVEnvironment *);	void 	OriginMove(Point3DFFixed);	void	Promote(struct Polyhedron *);		void 	AddCAVCtrl(struct CAVEnvironment *);	void 	RemoveCAVCtrl(struct CAVEnvironment *);	void	Cut(void);	void	DeleteLayer(struct LayerItem *);	void	HideLayer(struct LayerItem *);	int		ModelSize(Point3DFFixed *,Point3DFFixed *);	void	SelectRect(struct V_Array **,Rect *,struct Polyhedron **,struct CAVEnvironment *,int);		int 	IO_ReadExtra(struct V_Buffer *, long);/* DWE */	int  	IO_WriteFirst(struct V_Buffer *);		int  	IO_WriteLast(struct V_Buffer *);	int		IO_ESLC(struct V_Buffer *);		int		Export(struct ModelExport *);	int		ExportSurface(struct ModelExport *, struct Surface *);	struct  Slice *NewSlice(void);/* MJU */	struct 	SurfDef *NewSurfDef(void);/* MJU */	struct  Polyhedron	*NewPolyhedron(void);	int	 ForceFlip(int);	int	 OutOfDefinition(void);	int  ShutDown(void);		int  GetSide(struct CAVEnvironment *);		int	 NewMoveEnds(Point3DFFixed,Point3DFFixed);	int	 NewMoveEndsAbs(Point3DFFixed*,Point3DFFixed*);	int	 NewMoveWall(Point3DFFixed,int);	int	 NewMoveCorner(Point3DFFixed,int);	int	 NewAddPoint(Point3DFFixed,int);	int	 NewRemovePoint(Point3DFFixed*,int);	int	 NewMove(Point3DFFixed);	int	 GetConnectionList(struct V_Array *a[3]);	int	 SetConnectionList(struct V_Array *a[3]);	int	 NewCreate(void);	int	 NewDestroy(void);	int	 NewOutline(PointFFixed,int);	PointFFixed 	OutlinePoint(Point3DFFixed,FFixed*);	Point3DFFixed	PointOnSurface(Point3DFFixed,int);	Point3DFFixed 	GetSurfNormal(int);	void MakeInflate(int,int);	int  GroupMembers(struct V_Array *);	void Extrema( Point3DFFixed *, Point3DFFixed * );	void CalcTraceOutline(void);	void PromoteContents( void );	void AddTraceElement(struct V_Array *,Point3DFFixed,RGBColor,int);#if MACINTOSH	void AddPictElement(struct V_Picture *,Point3DFFixed,int);#elif WINDOWS	void AddPictElement(struct V_Offscreen *,Point3DFFixed,int);#endif	int FlipOutline(struct V_Array *);	};#define pcp(ptr) ((CAVPolyhedron*)ptr)#endif //CAVPOLYHEDRON