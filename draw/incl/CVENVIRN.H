#ifndef CAV_ENVIRONMENT#define CAV_ENVIRONMENT#define TO_CAD		0#define TO_WORLD	1#define SELECTED_PATTERN	130#define SURF_ORIENTATION	0x000E#define	FACE_DOWN			0x0000#define	FACE_UP				0x0001#define	PERPINDICULAR		0x0002#define	PARALLEL			0x0004#define	ASKEW				0x0008#define PtInBounds(p,n,x) (n.h < p.h && n.v < p.v && x.h > p.h && x.v > p.v?1:0)#define RectInRect(i,o) (i.top<o.top&&i.bottom>o.bottom&&i.left>o.left&&i.right<o.right?1:0)#include "VTypes.h"#include "WTypes.h"struct CAVEnvironment:indirect{		int			uniqueID;		Rect		dataRect;		Rect		worldRect;		Point3DFFixed	defNear,defFar;		PointLong	origin;		PointLong	wmin,wmax;		PointLong	drawOrigin;		FFixed 		scale;		short 		depth;			short		rulerState;		short		view;		short		id;		short		primPenSize,secPenSize; 		void 			cCAVEnvironment(void); 		void 			dCAVEnvironment(void);		int 			GetCAVDepth(void);		int 			GetView(void);		void 			SetSide(int);		int 			GetSide(void);		int 			GetAxis(void); 		void 			SetPenSizes(int,int); 		void 			SetView(int); 		void 			SetID(int); 		int 			GetID(void);		FFixed			GetScale(void); 		PointLong 		GetOrigin(void); 		PointLong 		GetDrawOrigin(void); 		void 			SetEnvironment(Rect*,Rect*,PointLong,FFixed,int);		int 			PointInWorld(PointLong);		int 			RectInWorld(Rect*);		int				NormalizeView(int);		Point3DLong 	WorldToView(Point3DFFixed);		PointLong 		WorldToView2D(Point3DFFixed);		int				AngleToView(Angle3DFFixed);		PointLong  		ScalePoint(PointFFixed);		Angle3DFFixed	Translate3DFFAngle(int,Angle3DFFixed);		Angle3DFFixed	TranslateFFAngle(FFixed);		Point3D 		Translate3D(int,Point3D);		Point3DFFixed 	Translate3DFFixed(int,Point3DFFixed);		PointFFixed 	Translate2DFFixed(int,PointFFixed);		FFixed 			Translate2DAngle(int,FFixed);		Point3D 		TransFix(int,Point,Point3D);		int 			SurfaceVisible(Point3D);				Point3DFFixed 	OrientPolyhedron(struct V_Array *,Point3DFFixed,int);				Point3DLong 	WorldToScale(Point3DFFixed);		FFixed			GetAngle(Angle3DFFixed,int);		Point3DFFixed 	MakeVector(int,PointFFixed);		PointFFixed 	MakeOutline(int,Point3DFFixed);		Point3DFFixed 	FFBounds(Point3DFFixed,Point3DFFixed,int);		Point3D   		Bounds(Point3D,Point3D,int);		FFixed 			FFExtreme(Point3DFFixed,Point3DFFixed,int);		int		   		Extreme(Point3D,Point3D,int);		void SetPatternOrigin(void); 		};Point3DFFixed	Point3D2FFixed(Point3D);Point3D			FFixed2Point3D(Point3DFFixed);PointFFixed		Point2FFixed(Point);Point			FFixed2Point(PointFFixed);	#endif //CAV_ENVIRONMENT