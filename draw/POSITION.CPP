/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by  	 *				David W. Easter *				 * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "Position.h"#include "Matrix.h"#include "WalkBuff.h"#include "VMath.h"#include <math.h>voidPosition::cPosition()	{	Reset();	}voidPosition::dPosition()	{	delete(this);	}voidPosition::Reset()	{	SetOrigin(Pt3DFFZero);	SetOrientation(Ang3DFFZero);	SetShear(Shr3DFFZero);	SetScale(Pt3DFFOne);	}voidPosition::Copy(Position *to)	{	to->SetOrigin(GetOrigin());	to->SetOrientation(GetOrientation());	to->SetShear(GetShear());	to->SetScale(GetScale());	}voidPosition::PositionX(Position *p)	{	Point3DFFixed orgn = p->GetOrigin();	Angle3DFFixed orient = p->GetOrientation();	Shear3DFFixed shr = p->GetShear();	Point3DFFixed scal = p->GetScale();	Scale3D(scal, Pt3DFFZero);	Shear3D(shr, Pt3DFFZero);	Rotate3D(orient, Pt3DFFZero);	Move3D(orgn);	}voidPosition::UnPosition(Position *p)	{		Point3DFFixed orgn = p->GetOrigin();	Angle3DFFixed orient = p->GetOrientation();	Shear3DFFixed shr = p->GetShear();	Point3DFFixed scal = p->GetScale();	UnMove3D(orgn);	UnRotate3D(orient, Pt3DFFZero);	UnShear3D(shr, Pt3DFFZero);	UnScale3D(scal, Pt3DFFZero);	}voidPosition::SetOrigin(Point3DFFixed orgn)	{	origin = orgn;	}voidPosition::SetOrientation(Angle3DFFixed orient)	{	orientation = orient;	if (!FFZero(orient.roll))		{		sinAngle.roll = DblToFixed(sin(FixedToDbl(orient.roll)));		cosAngle.roll = DblToFixed(cos(FixedToDbl(orient.roll)));		}	else { sinAngle.roll = FFZero; cosAngle.roll = FFOne; }	if (!FFZero(orient.pitch))		{		sinAngle.pitch = DblToFixed(sin(FixedToDbl(orient.pitch)));		cosAngle.pitch = DblToFixed(cos(FixedToDbl(orient.pitch)));		}	else { sinAngle.pitch = FFZero; cosAngle.pitch = FFOne; }	if (!FFZero(orient.yaw))		{		sinAngle.yaw = DblToFixed(sin(FixedToDbl(orient.yaw)));		cosAngle.yaw = DblToFixed(cos(FixedToDbl(orient.yaw)));		}	else { sinAngle.yaw = FFZero; cosAngle.yaw = FFOne; }	}voidPosition::SetShear(Shear3DFFixed shr)	{	shear = shr;	}voidPosition::SetScale(Point3DFFixed scal)	{	scale = scal;	invScale.x = FFDiv(FFOne, scal.x);	invScale.y = FFDiv(FFOne, scal.y);	invScale.z = FFDiv(FFOne, scal.z);	}Point3DFFixedPosition::GetOrigin()	{	return(origin);	}Angle3DFFixedPosition::GetOrientation()	{	return(orientation);	}Shear3DFFixedPosition::GetShear()	{	return(shear);	}Point3DFFixedPosition::GetScale()	{	return(scale);	}voidPosition::Move3D(Point3DFFixed offset)	{	Point3DFFixed orgn = GetOrigin3D();	orgn.x = FFAdd(orgn.x, offset.x);	orgn.y = FFAdd(orgn.y, offset.y);	orgn.z = FFAdd(orgn.z, offset.z);	SetOrigin3D(orgn);	}voidPosition::UnMove3D(Point3DFFixed offset)	{	Point3DFFixed orgn = GetOrigin3D();	orgn.x = FFSub(orgn.x, offset.x);	orgn.y = FFSub(orgn.y, offset.y);	orgn.z = FFSub(orgn.z, offset.z);	SetOrigin3D(orgn);	}voidPosition::Rotate3D(Angle3DFFixed rotate, Point3DFFixed pnt)	{	Point3DFFixed orgn = GetOrigin3D(), rOrigin;	Position *p;	Matrix *matrix;	if (Ang3DFFZero(rotate)) return;	p = new(Position);	p->cPosition();	p->SetOrigin3D(pnt);	p->SetOrientation3D(rotate);	rOrigin.x = FFSub(orgn.x, pnt.x);	rOrigin.y = FFSub(orgn.y, pnt.y);	rOrigin.z = FFSub(orgn.z, pnt.z);	SetOrigin3D(p->Transform3D(rOrigin));	p->dPosition();	matrix = new(Matrix);	matrix->cMatrix();	matrix->RotateSC(sinAngle.yaw, cosAngle.yaw, matrixZ);	matrix->RotateSC(sinAngle.pitch, cosAngle.pitch, matrixX);	matrix->RotateSC(sinAngle.roll, cosAngle.roll, matrixY);	matrix->Rotate(rotate.yaw, matrixZ);	matrix->Rotate(rotate.pitch, matrixX);	matrix->Rotate(rotate.roll, matrixY);	matrix->CalcComponents();	SetOrientation3D(matrix->GetAngle());	matrix->dMatrix();	}voidPosition::UnRotate3D(Angle3DFFixed rotate, Point3DFFixed pnt)	{	Point3DFFixed orgn = GetOrigin3D(), rOrigin;	Position *p;	Matrix *matrix;	if (Ang3DFFZero(rotate)) return;	p = new(Position);	p->cPosition();	p->SetOrigin3D(pnt);	p->SetOrientation3D(rotate);	rOrigin.x = FFAdd(orgn.x, pnt.x);	rOrigin.y = FFAdd(orgn.y, pnt.y);	rOrigin.z = FFAdd(orgn.z, pnt.z);		SetOrigin3D(p->UnTransform3D(rOrigin));	p->dPosition();	matrix = new(Matrix);	matrix->cMatrix();	matrix->RotateSC(sinAngle.yaw, cosAngle.yaw, matrixZ);	matrix->RotateSC(sinAngle.pitch, cosAngle.pitch, matrixX);	matrix->RotateSC(sinAngle.roll, cosAngle.roll, matrixY);	matrix->Rotate(FFNeg(rotate.roll), matrixY);	matrix->Rotate(FFNeg(rotate.pitch), matrixX);	matrix->Rotate(FFNeg(rotate.yaw), matrixZ);	matrix->CalcComponents();	SetOrientation3D(matrix->GetAngle());	matrix->dMatrix();	}voidPosition::Shear3D(Shear3DFFixed skew, Point3DFFixed pnt)	{	Point3DFFixed orgn = GetOrigin3D(), rOrigin;	Shear3DFFixed shr = GetShear3D();Point3DFFixed scal = GetScale3D();	Position *p;	Matrix *matrix;	if (Shr3DFFZero(skew)) return;	p = new(Position);	p->cPosition();	p->SetOrigin3D(pnt);	p->SetShear3D(skew);	rOrigin.x = FFSub(orgn.x, pnt.x);	rOrigin.y = FFSub(orgn.y, pnt.y);	rOrigin.z = FFSub(orgn.z, pnt.z);	SetOrigin3D(p->Transform3D(rOrigin));	p->dPosition();	matrix = new(Matrix);	matrix->cMatrix();matrix->Scale(scal);	matrix->Shear(shr);	matrix->RotateSC(sinAngle.yaw, cosAngle.yaw, matrixZ);	matrix->RotateSC(sinAngle.pitch, cosAngle.pitch, matrixX);	matrix->RotateSC(sinAngle.roll, cosAngle.roll, matrixY);	matrix->Shear(skew);	matrix->CalcComponents();	SetOrientation3D(matrix->GetAngle());	SetShear3D(matrix->GetShear());SetScale3D(matrix->GetScale());	matrix->dMatrix();	}voidPosition::UnShear3D(Shear3DFFixed skew, Point3DFFixed pnt)	{	Point3DFFixed orgn = GetOrigin3D(), rOrigin;	Shear3DFFixed shr = GetShear3D(), invSkew;Point3DFFixed scal = GetScale3D();	Position *p;	Matrix *matrix;	if (Shr3DFFZero(skew)) return;	p = new(Position);	p->cPosition();	p->SetOrigin3D(pnt);	p->SetShear3D(skew);	rOrigin.x = FFAdd(orgn.x, pnt.x);	rOrigin.y = FFAdd(orgn.y, pnt.y);	rOrigin.z = FFAdd(orgn.z, pnt.z);	SetOrigin3D(p->UnTransform3D(rOrigin));	p->dPosition();	matrix = new(Matrix);	matrix->cMatrix();matrix->Scale(scal);	matrix->Shear(shr);	matrix->RotateSC(sinAngle.yaw, cosAngle.yaw, matrixZ);	matrix->RotateSC(sinAngle.pitch, cosAngle.pitch, matrixX);	matrix->RotateSC(sinAngle.roll, cosAngle.roll, matrixY);	invSkew.xy = FFNeg(skew.xy);	invSkew.xz = FFSub(FFMult(skew.xy, skew.yz), skew.xz);	invSkew.yz = FFNeg(skew.yz);	matrix->Shear(invSkew);	matrix->CalcComponents();	SetOrientation3D(matrix->GetAngle());	SetShear3D(matrix->GetShear());SetScale3D(matrix->GetScale());	matrix->dMatrix();	}voidPosition::Scale3D(Point3DFFixed mult, Point3DFFixed pnt)	{	Point3DFFixed orgn = GetOrigin3D(), rOrigin;	Shear3DFFixed shr = GetShear3D();	Point3DFFixed scal = GetScale3D();	Position *p;	Matrix *matrix;	if (Pt3DFFOne(mult)) return;	p = new(Position);	p->cPosition();	p->SetOrigin3D(pnt);	p->SetScale3D(mult);	rOrigin.x = FFSub(orgn.x, pnt.x);	rOrigin.y = FFSub(orgn.y, pnt.y);	rOrigin.z = FFSub(orgn.z, pnt.z);	SetOrigin3D(p->Transform3D(rOrigin));	p->dPosition();	matrix = new(Matrix);	matrix->cMatrix();	matrix->Scale(scal);	matrix->Shear(shr);	matrix->RotateSC(sinAngle.yaw, cosAngle.yaw, matrixZ);	matrix->RotateSC(sinAngle.pitch, cosAngle.pitch, matrixX);	matrix->RotateSC(sinAngle.roll, cosAngle.roll, matrixY);	matrix->Scale(mult);	matrix->CalcComponents();	SetOrientation3D(matrix->GetAngle());	SetShear3D(matrix->GetShear());	SetScale3D(matrix->GetScale());	matrix->dMatrix();	}voidPosition::UnScale3D(Point3DFFixed mult, Point3DFFixed pnt)	{	Point3DFFixed orgn = GetOrigin3D(), rOrigin;	Shear3DFFixed shr = GetShear3D();	Point3DFFixed scal = GetScale3D(), invMult;	Position *p;	Matrix *matrix;	if (Pt3DFFOne(mult)) return;	p = new(Position);	p->cPosition();	p->SetOrigin3D(pnt);	p->SetScale3D(mult);	rOrigin.x = FFAdd(orgn.x, pnt.x);	rOrigin.y = FFAdd(orgn.y, pnt.y);	rOrigin.z = FFAdd(orgn.z, pnt.z);	SetOrigin3D(p->UnTransform3D(rOrigin));	p->dPosition();	matrix = new(Matrix);	matrix->cMatrix();	matrix->Scale(scal);	matrix->Shear(shr);	matrix->RotateSC(sinAngle.yaw, cosAngle.yaw, matrixZ);	matrix->RotateSC(sinAngle.pitch, cosAngle.pitch, matrixX);	matrix->RotateSC(sinAngle.roll, cosAngle.roll, matrixY);	invMult.x = FFDiv(FFOne, mult.x);	invMult.y = FFDiv(FFOne, mult.y);	invMult.z = FFDiv(FFOne, mult.z);	matrix->Scale(invMult);	matrix->CalcComponents();	SetOrientation3D(matrix->GetAngle());	SetShear3D(matrix->GetShear());	SetScale3D(matrix->GetScale());	matrix->dMatrix();	}Point3DFFixedPosition::Transform3D(Point3DFFixed in)	{	Point3DFFixed orgn = GetOrigin3D();	Angle3DFFixed orient = GetOrientation3D();	Shear3DFFixed shr = GetShear3D();	Point3DFFixed scal = GetScale3D();	Point3DFFixed out1, out2, *src, *dest;	src = &in;	dest = &out1;	if (!Pt3DFFOne(scal))		{		dest->x = FFMult(src->x, scal.x);		dest->y = FFMult(src->y, scal.y);		dest->z = FFMult(src->z, scal.z);			src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}	if (!Shr3DFFZero(shr))		{		dest->x = FFAdd(src->x, FFAdd(FFMult(src->y, shr.xy), FFMult(src->z, shr.xz)));		dest->y = FFAdd(src->y, FFMult(src->z, shr.yz));		dest->z = src->z;			src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}	if (!FFZero(orient.yaw))		{		/* Yaw -- rotate from X to Y about Z */		dest->x = FFSub(FFMult(src->x, cosAngle.yaw), FFMult(src->y, sinAngle.yaw));		dest->y = FFAdd(FFMult(src->x, sinAngle.yaw), FFMult(src->y, cosAngle.yaw));		dest->z = src->z;		src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}		if (!FFZero(orient.pitch))		{		/* Pitch -- rotate from Y to Z about X */		dest->y = FFSub(FFMult(src->y, cosAngle.pitch), FFMult(src->z, sinAngle.pitch));		dest->z = FFAdd(FFMult(src->y, sinAngle.pitch), FFMult(src->z, cosAngle.pitch));		dest->x = src->x;		src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}		if (!FFZero(orient.roll))		{		/* Roll -- rotate from Z to X about Y */		dest->z = FFSub(FFMult(src->z, cosAngle.roll), FFMult(src->x, sinAngle.roll));		dest->x = FFAdd(FFMult(src->z, sinAngle.roll), FFMult(src->x, cosAngle.roll));		dest->y = src->y;				src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}		dest->x = FFAdd(src->x, orgn.x);	dest->y = FFAdd(src->y, orgn.y);	dest->z = FFAdd(src->z, orgn.z);	src = dest;// jca 23 Oct 93  unnecessary?  	dest = (dest == &out1 ? &out2 : &out1);	return(*src);	}Point3DFFixedPosition::UnTransform3D(Point3DFFixed in)	{	Point3DFFixed orgn = GetOrigin3D();	Angle3DFFixed orient = GetOrientation3D();	Shear3DFFixed shr = GetShear3D();	Point3DFFixed scal = GetScale3D();	Point3DFFixed out1, out2, *src, *dest;	src = &in;	dest = &out1;	dest->x = FFSub(src->x, orgn.x);	dest->y = FFSub(src->y, orgn.y);	dest->z = FFSub(src->z, orgn.z);	src = dest;	dest = (dest == &out1 ? &out2 : &out1);	if (!FFZero(orient.roll))		{		/* Roll -- rotate from Z to X about Y */		dest->z = FFSub(FFMult(src->z, cosAngle.roll), FFMult(src->x, FFNeg(sinAngle.roll)));		dest->x = FFAdd(FFMult(src->z, FFNeg(sinAngle.roll)), FFMult(src->x, cosAngle.roll));		dest->y = src->y;				src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}		if (!FFZero(orient.pitch))		{		/* Pitch -- rotate from Y to Z about X */		dest->y = FFSub(FFMult(src->y, cosAngle.pitch), FFMult(src->z, FFNeg(sinAngle.pitch)));		dest->z = FFAdd(FFMult(src->y, FFNeg(sinAngle.pitch)), FFMult(src->z, cosAngle.pitch));		dest->x = src->x;				src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}		if (!FFZero(orient.yaw))		{		/* Yaw -- rotate from X to Y about Z */		dest->x = FFSub(FFMult(src->x, cosAngle.yaw), FFMult(src->y, FFNeg(sinAngle.yaw)));		dest->y = FFAdd(FFMult(src->x, FFNeg(sinAngle.yaw)), FFMult(src->y, cosAngle.yaw));		dest->z = src->z;				src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}	if (!Shr3DFFZero(shr))		{		dest->z = src->z;		dest->y = FFSub(src->y, FFMult(dest->z, shr.yz));		dest->x = FFSub(src->x, FFAdd(FFMult(dest->y, shr.xy), FFMult(dest->z, shr.xz)));		src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}	if (!Pt3DFFOne(scal))		{		dest->x = FFMult(src->x, invScale.x);		dest->y = FFMult(src->y, invScale.y);		dest->z = FFMult(src->z, invScale.z);			src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}	return(*src);	}voidPosition::SetOrigin3D(Point3DFFixed orgn)	{	SetOrigin(orgn);	}voidPosition::SetOrientation3D(Angle3DFFixed orient)	{	SetOrientation(orient);	}voidPosition::SetShear3D(Shear3DFFixed shr)	{	SetShear(shr);	}voidPosition::SetScale3D(Point3DFFixed scal)	{	SetScale(scal);	}Point3DFFixedPosition::GetOrigin3D()	{	return(GetOrigin());	}Angle3DFFixedPosition::GetOrientation3D()	{	return(GetOrientation());	}Shear3DFFixedPosition::GetShear3D()	{	return(GetShear());	}Point3DFFixedPosition::GetScale3D()	{	return(GetScale());	}voidPosition::Move2D(PointFFixed offset)	{	PointFFixed orgn = GetOrigin2D();	orgn.h = FFAdd(orgn.h, offset.h);	orgn.v = FFAdd(orgn.v, offset.v);	SetOrigin2D(orgn);	}voidPosition::UnMove2D(PointFFixed offset)	{	PointFFixed orgn = GetOrigin2D();	orgn.h = FFSub(orgn.h, offset.h);	orgn.v = FFSub(orgn.v, offset.v);	SetOrigin2D(orgn);	}voidPosition::Rotate2D(FFixed rotate, PointFFixed pnt)	{	PointFFixed orgn = GetOrigin2D(), rOrigin;	FFixed orient = GetOrientation2D();	Position *p;	if (FFZero(rotate)) return;	p = new(Position);	p->cPosition();	p->SetOrigin2D(pnt);	p->SetOrientation2D(rotate);	rOrigin.h = FFSub(orgn.h, pnt.h);	rOrigin.v = FFSub(orgn.v, pnt.v);	SetOrigin2D(p->Transform2D(rOrigin));	SetOrientation2D(FFAdd(orient, rotate));	p->dPosition();	}voidPosition::UnRotate2D(FFixed rotate, PointFFixed pnt)	{	PointFFixed orgn = GetOrigin2D(), rOrigin;	FFixed orient = GetOrientation2D();	Position *p;	if (FFZero(rotate)) return;	p = new(Position);	p->cPosition();	p->SetOrigin2D(pnt);	p->SetOrientation2D(rotate);	rOrigin.h = FFAdd(orgn.h, pnt.h);	rOrigin.v = FFAdd(orgn.v, pnt.v);	SetOrigin2D(p->UnTransform2D(rOrigin));	SetOrientation2D(FFSub(orient, rotate));	p->dPosition();	}voidPosition::Shear2D(FFixed skew, PointFFixed pnt)	{	PointFFixed orgn = GetOrigin2D(), rOrigin;	FFixed shr = GetShear2D();PointFFixed scal = GetScale2D();	Position *p;	Matrix *matrix;	if (FFZero(shr)) return;	p = new(Position);	p->cPosition();	p->SetOrigin2D(pnt);	p->SetShear2D(skew);	rOrigin.h = FFSub(orgn.h, pnt.h);	rOrigin.v = FFSub(orgn.v, pnt.v);	SetOrigin2D(p->Transform2D(rOrigin));	p->dPosition();	matrix = new(Matrix);	matrix->cMatrix();{ /* should be more 2D-like */Shear3DFFixed shr3, skew3;Point3DFFixed scal3;shr3.xy = shr; shr3.xz = FFZero; shr3.yz = FFZero;skew3.xy = skew; skew3.xz = FFZero; skew3.yz = FFZero;scal3.x = scal.h; scal3.y = scal.v; scal3.z = FFOne;matrix->Scale(scal3);	matrix->Shear(shr3);	matrix->RotateSC(sinAngle.yaw, cosAngle.yaw, matrixZ);	matrix->Shear(skew3);}	matrix->CalcComponents();	SetOrientation3D(matrix->GetAngle());	SetShear3D(matrix->GetShear());SetScale3D(matrix->GetScale());	matrix->dMatrix();	}voidPosition::UnShear2D(FFixed skew, PointFFixed pnt)	{	PointFFixed orgn = GetOrigin2D(), rOrigin;	FFixed shr = GetShear2D();PointFFixed scal = GetScale2D();	Position *p;	Matrix *matrix;	if (FFZero(shr)) return;	p = new(Position);	p->cPosition();	p->SetOrigin2D(pnt);	p->SetShear2D(skew);	rOrigin.h = FFAdd(orgn.h, pnt.h);	rOrigin.v = FFAdd(orgn.v, pnt.v);	SetOrigin2D(p->UnTransform2D(rOrigin));	p->dPosition();	matrix = new(Matrix);	matrix->cMatrix();{ /* should be more 2D-like */Shear3DFFixed shr3, skew3, invSkew3;Point3DFFixed scal3;shr3.xy = shr; shr3.xz = FFZero; shr3.yz = FFZero;skew3.xy = skew; skew3.xz = FFZero; skew3.yz = FFZero;scal3.x = scal.h; scal3.y = scal.v; scal3.z = FFOne;matrix->Scale(scal3);	matrix->Shear(shr3);	matrix->RotateSC(sinAngle.yaw, cosAngle.yaw, matrixZ);	invSkew3.xy = FFNeg(skew3.xy);	invSkew3.xz = FFZero;	invSkew3.yz = FFZero;	matrix->Shear(invSkew3);}	matrix->CalcComponents();	SetOrientation3D(matrix->GetAngle());	SetShear3D(matrix->GetShear());SetScale3D(matrix->GetScale());	matrix->dMatrix();	}voidPosition::Scale2D(PointFFixed mult, PointFFixed pnt)	{	PointFFixed orgn = GetOrigin2D(), rOrigin;	FFixed shr = GetShear2D();	PointFFixed scal = GetScale2D();	Position *p;	Matrix *matrix;	if (PtFFOne(mult)) return;	p = new(Position);	p->cPosition();	p->SetOrigin2D(pnt);	p->SetScale2D(mult);	rOrigin.h = FFSub(orgn.h, pnt.h);	rOrigin.v = FFSub(orgn.v, pnt.v);	SetOrigin2D(p->Transform2D(rOrigin));	p->dPosition();	matrix = new(Matrix);	matrix->cMatrix();{ /* should be more 2D-like */Point3DFFixed scal3, mult3;Shear3DFFixed shr3;scal3.x = scal.h; scal3.y = scal.v; scal3.z = FFOne;shr3.xy = shr; shr3.xz = FFZero; shr3.yz = FFZero;mult3.x = mult.h; mult3.y = mult.v; mult3.z = FFOne;	matrix->Scale(scal3);	matrix->Shear(shr3);	matrix->RotateSC(sinAngle.yaw, cosAngle.yaw, matrixZ);	matrix->Scale(mult3);}	matrix->CalcComponents();	SetOrientation3D(matrix->GetAngle());	SetShear3D(matrix->GetShear());	SetScale3D(matrix->GetScale());	matrix->dMatrix();	}voidPosition::UnScale2D(PointFFixed mult, PointFFixed pnt)	{	PointFFixed orgn = GetOrigin2D(), rOrigin;	FFixed shr = GetShear2D();	PointFFixed scal = GetScale2D();	Position *p;	Matrix *matrix;	if (PtFFOne(mult)) return;	p = new(Position);	p->cPosition();	p->SetOrigin2D(pnt);	p->SetScale2D(mult);	rOrigin.h = FFAdd(orgn.h, pnt.h);	rOrigin.v = FFAdd(orgn.v, pnt.v);	SetOrigin2D(p->UnTransform2D(rOrigin));	p->dPosition();	matrix = new(Matrix);	matrix->cMatrix();{ /* should be more 2D-like */Point3DFFixed scal3, mult3, invMult3;Shear3DFFixed shr3;scal3.x = scal.h; scal3.y = scal.v; scal3.z = FFOne;shr3.xy = shr; shr3.xz = FFZero; shr3.yz = FFZero;mult3.x = mult.h; mult3.y = mult.v; mult3.z = FFOne;	matrix->Scale(scal3);	matrix->Shear(shr3);	matrix->RotateSC(sinAngle.yaw, cosAngle.yaw, matrixZ);	invMult3.x = FFDiv(FFOne, mult3.x);	invMult3.y = FFDiv(FFOne, mult3.y);	invMult3.z = FFOne;	matrix->Scale(invMult3);}	matrix->CalcComponents();	SetOrientation3D(matrix->GetAngle());	SetShear3D(matrix->GetShear());	SetScale3D(matrix->GetScale());	matrix->dMatrix();	}PointFFixedPosition::Transform2D(PointFFixed in)	{	PointFFixed orgn = GetOrigin2D();	FFixed orient = GetOrientation2D();	FFixed shr = GetShear2D();	PointFFixed scal = GetScale2D();	PointFFixed out1, out2, *src, *dest;	src = &in;	dest = &out1;	if (!PtFFOne(scal))		{		dest->h = FFMult(src->h, scal.h);		dest->v = FFMult(src->v, scal.v);			src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}	if (!FFZero(shr))		{		dest->h = FFAdd(src->h, FFMult(src->v, shr));		dest->v = src->v;		src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}	if (!FFZero(orient))		{		dest->h = FFSub(FFMult(src->h, cosAngle.yaw), FFMult(src->v, sinAngle.yaw));		dest->v = FFAdd(FFMult(src->h, sinAngle.yaw), FFMult(src->v, cosAngle.yaw));		src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}		dest->h = FFAdd(src->h, orgn.h);	dest->v = FFAdd(src->v, orgn.v);	src = dest;// jca 23 Oct 93 unnecessary?	dest = (dest == &out1 ? &out2 : &out1);	return(*src);	}PointFFixedPosition::UnTransform2D(PointFFixed in)	{	PointFFixed orgn = GetOrigin2D();	FFixed orient = GetOrientation2D();	FFixed shr = GetShear2D();	PointFFixed scal = GetScale2D();	PointFFixed out1, out2, *src, *dest;	src = &in;	dest = &out1;	dest->h = FFSub(src->h, orgn.h);	dest->v = FFSub(src->v, orgn.v);	src = dest;	dest = (dest == &out1 ? &out2 : &out1);	if (!FFZero(orient))		{		dest->h = FFSub(FFMult(src->h, cosAngle.yaw), FFMult(src->v, FFNeg(sinAngle.yaw)));		dest->v = FFAdd(FFMult(src->h, FFNeg(sinAngle.yaw)), FFMult(src->v, cosAngle.yaw));				src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}		if (!FFZero(shr))		{		dest->v = src->v;		dest->h = FFSub(src->h, FFMult(dest->v, shr));		src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}	if (!PtFFOne(scal))		{		dest->h = FFMult(src->h, invScale.x);		dest->v = FFMult(src->v, invScale.y);			src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}	return(*src);	}voidPosition::SetOrigin2D(PointFFixed orgn)	{	Point3DFFixed orgn3D;	orgn3D.x = orgn.h;	orgn3D.y = orgn.v;	orgn3D.z = FFZero;	SetOrigin(orgn3D);	}voidPosition::SetOrientation2D(FFixed orient)	{	Angle3DFFixed orient3D;		orient3D.roll = FFZero;	orient3D.pitch = FFZero;	orient3D.yaw = orient;	SetOrientation(orient3D);	}voidPosition::SetShear2D(FFixed shr)	{	Shear3DFFixed shr3D;	shr3D.xy = shr;	shr3D.xz = FFZero;	shr3D.yz = FFZero;	SetShear(shr3D);	}voidPosition::SetScale2D(PointFFixed scal)	{	Point3DFFixed scal3D;	scal3D.x = scal.h;	scal3D.y = scal.v;	scal3D.z = FFOne;	SetScale(scal3D);	}PointFFixedPosition::GetOrigin2D()	{	Point3DFFixed orgn3D;	PointFFixed orgn;	orgn3D = GetOrigin();	orgn.h = orgn3D.x;	orgn.v = orgn3D.y;	return(orgn);	}FFixedPosition::GetOrientation2D()	{	Angle3DFFixed orient3D;	FFixed orient;	orient3D = GetOrientation();	orient = orient3D.yaw;	return(orient);	}FFixedPosition::GetShear2D()	{	Shear3DFFixed shr3D;	FFixed shr;	shr3D = GetShear();	shr = shr3D.xy;	return(shr);	}PointFFixedPosition::GetScale2D()	{	Point3DFFixed scal3D;	PointFFixed scal;	scal3D = GetScale();	scal.h = scal3D.x;	scal.v = scal3D.y;	return(scal);	}voidPosition::Move1D(FFixed offset)	{	FFixed orgn = GetOrigin1D();	orgn = FFAdd(orgn, offset);	SetOrigin1D(orgn);	}voidPosition::UnMove1D(FFixed offset)	{	FFixed orgn = GetOrigin1D();	orgn = FFSub(orgn, offset);	SetOrigin1D(orgn);	}voidPosition::Scale1D(FFixed mult, FFixed pnt)	{	FFixed orgn = GetOrigin1D(), rOrigin;	FFixed scal = GetScale1D();	Position *p;	if (FFOne(mult)) return;	p = new(Position);	p->cPosition();	p->SetOrigin1D(pnt);	p->SetScale1D(mult);	rOrigin = FFSub(orgn, pnt);	SetOrigin1D(p->Transform1D(rOrigin));	SetScale1D(FFMult(scal, mult));	p->dPosition();	}voidPosition::UnScale1D(FFixed mult, FFixed pnt)	{	FFixed orgn = GetOrigin1D(), rOrigin;	FFixed scal = GetScale1D();	Position *p;	if (FFOne(mult)) return;	p = new(Position);	p->cPosition();	p->SetOrigin1D(pnt);	p->SetScale1D(mult);	rOrigin = FFAdd(orgn, pnt);	SetOrigin1D(p->UnTransform1D(rOrigin));	SetScale1D(FFDiv(scal, mult));	p->dPosition();	}FFixedPosition::Transform1D(FFixed in)	{	FFixed orgn = GetOrigin1D();	FFixed scal = GetScale1D();	FFixed out1, out2, *src, *dest;	src = &in;	dest = &out1;	if (!FFOne(scal))		{		*dest = FFMult(*src, scal);			src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}	*dest = FFAdd(*src, orgn);	src = dest;	dest = (dest == &out1 ? &out2 : &out1);	return(*src);	}FFixedPosition::UnTransform1D(FFixed in)	{	FFixed orgn = GetOrigin1D();	FFixed scal = GetScale1D();	FFixed out1, out2, *src, *dest;	src = &in;	dest = &out1;	*dest = FFSub(*src, orgn);	src = dest;	dest = (dest == &out1 ? &out2 : &out1);	if (!FFOne(scal))		{		*dest = FFMult(*src, invScale.x);			src = dest;		dest = (dest == &out1 ? &out2 : &out1);		}	return(*src);	}voidPosition::SetOrigin1D(FFixed orgn)	{	Point3DFFixed orgn3D;	orgn3D.x = orgn;	orgn3D.y = FFZero;	orgn3D.z = FFZero;	SetOrigin(orgn3D);	}voidPosition::SetScale1D(FFixed scal)	{	Point3DFFixed scal3D;	scal3D.x = scal;	scal3D.y = FFOne;	scal3D.z = FFOne;	SetScale(scal3D);	}FFixedPosition::GetOrigin1D()	{	Point3DFFixed orgn3D;	FFixed orgn;	orgn3D = GetOrigin();	orgn = orgn3D.x;	return(orgn);	}FFixedPosition::GetScale1D()	{	Point3DFFixed scal3D;	FFixed scal;	scal3D = GetScale();	scal = scal3D.x;	return(scal);	}intPosition::IO_3D(V_Buffer *buf)	{	Point3DFFixed orgn, scal;	Angle3DFFixed orient;	Shear3DFFixed shr;	int err = 0;	if (buf->IODirection() == DATA_OUT)		{		orgn = GetOrigin3D();		orient = GetOrientation3D();		shr = GetShear3D();		scal = GetScale3D();		}	else { shr = Shr3DFFZero; scal = Pt3DFFOne; } /* default for reading v1.03 models */	IOType(buf, &orgn, IO_POINT3D_FFIXED);	IOType(buf, &orient, IO_ANGLE3D_FFIXED);	IOType(buf, &shr, IO_SHEAR3D_FFIXED);	IOType(buf, &scal, IO_POINT3D_FFIXED);	if (buf->IODirection() == DATA_IN)		{		SetOrigin3D(orgn);		SetOrientation3D(orient);		SetShear3D(shr);		SetScale3D(scal);		}	return(err);	}intPosition::IO_2D(V_Buffer *buf)	{	PointFFixed orgn, scal;	FFixed orient, shr;	int err = 0;	if (buf->IODirection() == DATA_OUT)		{		orgn = GetOrigin2D();		orient = GetOrientation2D();		shr = GetShear2D();		scal = GetScale2D();		}	else { shr = FFZero; scal = PtFFOne; } /* default for reading v1.03 models */	IOType(buf, &orgn, IO_POINT_FFIXED);	IOType(buf, &orient, IO_FFIXED);	IOType(buf, &shr, IO_FFIXED);	IOType(buf, &scal, IO_POINT_FFIXED);	if (buf->IODirection() == DATA_IN)		{		SetOrigin2D(orgn);		SetOrientation2D(orient);		SetShear2D(shr);		SetScale2D(scal);		}	return(err);	}intPosition::IO_1D(V_Buffer *buf)	{	FFixed orgn, scal;	int err = 0;	if (buf->IODirection() == DATA_OUT)		{		orgn = GetOrigin1D();		scal = GetScale1D();		}	IOType(buf, &orgn, IO_FFIXED);	IOType(buf, &scal, IO_FFIXED);	if (buf->IODirection() == DATA_IN)		{		SetOrigin1D(orgn);		SetScale1D(scal);		}	return(err);	}