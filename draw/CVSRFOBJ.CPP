/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VArray.h"#include "CVSrfObj.h"#include "CVEnvirn.h"#include "CVSrfFet.h"#include "CVPolyh.h"#include "Clip.h"#include "Geometry.h"#include "LDrawPic.h"#include "VDisplay.h"#include "VGraphic.h"void VSetPenStyle(int);voidCAVSurfObject::DisplayFeature(DisplayInfo *info)	{#if MACINTOSH	V_Picture *picture;#elif WINDOWS	V_Offscreen	*picture;#endif	RectLong		rLong;	Rect			r;	Point3DFFixed	org;	PointLong		drawOrigin;	int				depth,offset,pnsz;		PointLong		*sp;	Point			p;	int				i,length;	V_Array			*clipPts;		if(2 < (depth = environment->GetCAVDepth())) VForeColor(&(info->color));	drawOrigin = environment->GetDrawOrigin();		if(dirty)Scale(info);	switch(info->editType)		{		case EDIT_PICTURE:			if(info->direction) break;						VSetPattern(vPatBlack);			sp = (PointLong	*)points->Use();			rLong.left = sp[0].h - drawOrigin.h;			rLong.top = sp[0].v - drawOrigin.v;			rLong.right = sp[2].h - drawOrigin.h;			rLong.bottom = sp[2].v - drawOrigin.v;			points->Unuse();				picture = info->picture;			if (picture)				LongDrawPicture(picture,&rLong);			break;					case EDIT_TLINE:		case EDIT_TPOLYLINE:			if(info->direction) break;						VSetPattern(vPatBlack);			length = points->ALength();			sp = (PointLong	*)points->Use();			VMoveTo(sp[0].h - drawOrigin.h,sp[0].v - drawOrigin.v);			for(i = 1,sp++; i < length; i++,sp++)				VLineTo(sp->h - drawOrigin.h,sp->v - drawOrigin.v);			points->Unuse();			break;					case EDIT_TELLIPSE:			break;				case EDIT_TSPLINE:			break;					case EDIT_TPOLYGON:			if(info->direction) break;			VSetPattern(vPatBlack);			length = points->ALength();			sp = (PointLong	*)points->Use();			VMoveTo(sp[length-1].h - drawOrigin.h,sp[length-1].v - drawOrigin.v);			for(i = 0; i < length; i++,sp++)				VLineTo(sp->h - drawOrigin.h,sp->v - drawOrigin.v);			points->Unuse();				break;					default:			if(info->direction)pnsz = environment->secPenSize<<1 + 1;			else pnsz = environment->secPenSize;			#if MACINTOSH			VSetPattern(vPatGray);			VSetPenSize(pnsz,pnsz);			offset = pnsz>>1;#elif WINDOWS			VSetPenSize(pnsz-1,pnsz-1);			offset=0;#endif			drawOrigin.v += offset;			drawOrigin.h += offset;			clipPts = LongClipPoly(points,&(environment->dataRect),drawOrigin);virtusClipper->NewDrawPoly(clipPts,CLIP_FRAME,NULL,0,vPatGray,vPatGray,&vWhite,&info->color,TRUE,NULL);	// MERGE-GOURAUD-PRO-3//virtusClipper->NewDrawPoly(clipPts,CLIP_FRAME,NULL,0,0,vPatBlack,&vWhite,&info->color,TRUE,NULL);	// MERGE-GOURAUD//virtusClipper->NewDrawPoly(clipPts,CLIP_FRAME,0,vPatGray,vPatGray,&vWhite,&info->color,TRUE,NULL);			VSetPenSize(environment->primPenSize,environment->primPenSize);			break;		}		}		