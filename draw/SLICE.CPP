/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by  	 *				David W. Easter *				 * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "Slice.h"#include "VMath.h"#include "WalkBuff.h"#include "VMemUtil.h"voidSlice::cSlice(FFixed aa, FFixed bb, FFixed cc, FFixed dd)	{	a = aa;	b = bb;	c = cc;	d = dd;	}voidSlice::dSlice()	{	delete(this);	}voidSlice::ChangeUnit(FFixed factor)	{	long tmpD, tmpF;	int shift;	tmpD = d.l;	tmpF = factor.l;	if (tmpD < 0) tmpD = -tmpD;	if (tmpF < 0) tmpF = -tmpF;	shift = (BitWidth(tmpD)-16) + (BitWidth(tmpF)-16) - 15;	if (shift > 0)		{		a = FFShift(a, -shift);		b = FFShift(b, -shift);		c = FFShift(c, -shift);		d = FFShift(d, -shift);		}	d = FFMult(d, factor);	}Point3DFFixedSlice::Normal()	{	Point3DFFixed n;		n.x = FFNeg(a);	n.y = FFNeg(b);	n.z = FFNeg(c);		return(n);	}intSlice::IO(V_Buffer *buf)	{	int err = 0;	ObjLock((ObjectHandle)this);	IOType(buf, &a, IO_FFIXED);	IOType(buf, &b, IO_FFIXED);	IOType(buf, &c, IO_FFIXED);	IOType(buf, &d, IO_FFIXED);	ObjUnlock((ObjectHandle)this);	return(err);	}