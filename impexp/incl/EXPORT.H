#ifndef EXPORT#define EXPORT#include "WTypes.h"typedef enum	{	top = 1,	bottom,	front,	back,	left,	right	} ExportView;typedef enum	{	exportCustom = 0,	exportInch = 1,	exportFoot,	exportYard,	exportMile,	exportMillimeter,	exportCentimeter,	exportMeter,	exportKilometer,	exportPica,	exportPoint,	exportAngstrom,	exportParsec	} ExportUnit;struct ModelExport:indirect	{	struct V_Buffer *buffer;	ExportView view;	struct Polyhedron *polyhedron;      // ABD-VRML	struct Surface *surface;             // ABD-VRML    struct SurfFeature *feature;		// ABD-VRML	virtual void cExport(void);	virtual int Open(struct V_Buffer *, ExportUnit, double);	virtual int Close(void);	virtual int Layers(struct V_Array *);	virtual void SetPolyhedron(struct Polyhedron *);	virtual int OpenPolyhedron(struct V_Array *, RGBAColor, int);	virtual int ClosePolyhedron(void);	virtual void SetSurface(struct Surface *);	virtual int OpenSurface(struct V_Array *, RGBAColor, Point3DFFixed);	virtual int CloseSurface(void);	virtual int OpenFeature(struct V_Array *, RGBAColor, int, int);	virtual int CloseFeature(void);	void TransformPoints(struct V_Array *, struct V_Array *);	void DerefPoints(struct V_Array *, struct V_Array *, struct V_Array *);	void SetView(Point3DFFixed);	Point3DFFixed Translate(Point3DFFixed);	int Visible(Point3DFFixed);	void dExport(void);	void Feature(struct SurfFeature *);	virtual void Transform(void *, void *);	int SortPolyhedra(void);	int ComparePoly(struct Polyhedron *, struct Polyhedron *);	int SortSurfaces(void);	int CompareSurf(struct Surface *, struct Surface *);	int SortFeatures(void);	int CompareFeat(struct SurfFeature *, struct SurfFeature *);	};typedef struct	{	char *name;	RGBColor color;	short state;	} Layer;typedef enum { active = 0x01, visible = 0x02 } LayerState;#endif //EXPORT