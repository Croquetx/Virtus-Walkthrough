#ifndef BMP_HANDLER_#define BMP_HANDLER_#include "VTypes.h"#include "ImgHandl.h"#ifndef BFT_BITMAP       /* for the bitmap code */#define BFT_ICON	0x4349#define BFT_BITMAP	0x4d42#define BFT_CURSOR	0x5450#endif// PRO-JAP moved strings to AppText.h#define BMP_INBUFFER_SIZE	512#define BMP_SMALLEST_TRUECOLOR_DEPTH	16#define RLE_PACKET_MAX 	255#define REPLICATE_STATE		0x1#define COPY_STATE			0x2#define DELTA_STATE			0x4#define FILLER_STATE		0x8/* for handling the 4-bit pixel rle */#define STUFF_PIXEL(buf,cnt,pixCnt,pix)	(((++pixCnt)&0x1)?(buf[cnt] = (pix<<4)):(buf[cnt++] |= pix))#define EXTRACT(i,pixCnt,buf)	((pixCnt&0x1)?(buf[i]&0x0F):((buf[i]>>4)&0x0F))#define GET_NEXT_PIXEL(i, pixCnt, buf)	(((++pixCnt)&0x1)?((buf[i]>>4) & 0x0F):(buf[i++] & 0x0F))struct BMPWriter:ImageWriter{	int	 	compression;	int 	depth, grayScale;	long	theWidth, theHeight;	void	cBMPWriter(struct V_Buffer *, struct V_Offscreen *);	void	dBMPWriter(void);		int		WriteImage(struct TranslatorPreference *);#if WINDOWS	/* plus, some routines to handle making the header, the color	palette, and all that good goulash */	int     CreateBMPHeader(struct V_Array *);	int		WriteBMPHeader(LPBITMAPINFO, ULong);	int		UpdateColorTable(LPBITMAPINFO, int, ULong);	int		WriteFileHeader(LPBITMAPINFO, ULong);	int		UpdateHeaders(LPBITMAPINFO, ULong);	int		WriteBitmapBits(LPBITMAPINFO, ULong);	int		CompressRLE8(char *, long, long);	int		CompressRLE4(char *, long, long);	/* some more secret routines for passing stuff about */	void	SetScreen(struct V_Offscreen *);	struct V_Offscreen	*GetScreen(void);	void	SetCompression(int);	int		GetCompression(void);	void	SetDepth(int);	int		GetDepth(void);	void	ReportBMPError(char *);#endif};struct BMPReader:ImageReader{	/* vars to hold leftover pieces from the decompression	routines */	unsigned char	leftOvers, leftOversCount, leftOversState;	unsigned char 	leftOversXSkip, leftOversYSkip, leftOversFiller;	int				compression, inSide, outSide;	int				useFiller;	int		cBMPReader(struct V_Buffer *);	void	dBMPReader(void);		int		ReadImage(int);#if WINDOWS	/* private routines to do the dirty work */	int		ReadBITMAPINFOHeader(ULong, BITMAPINFO *);	int		ReadBITMAPCOREHeader(ULong, BITMAPINFO *);	int		ReadBits(BITMAPINFO *);	int 	DecompressRLE(char *, int *, int, char *, int *, int, int);	int		CheckDepthCompression(int);	void	ReportBMPError(char *);	virtual int 	CreateScreen(Rect *, int);	virtual int 	DestroyScreen(void);	/* inline functions */	virtual int 	InitBitmap(VCGrafPort *, VPictHandle *, BITMAPINFO *);	virtual int 	CleanUpBitmap(VCGrafPort *, VPictHandle *, BITMAPINFO *);	virtual int 	WriteToBitmap(VCGrafPort *, VPictHandle *, long, long, char *, BITMAPINFO *);	int	   	inline DoCopyBytes(char *, int, int *, char *, int, int *, int,int,int);	int		inline DoEscapeCodes(char *, int, int *, char *, int, int *, int);	int		inline DoReplicateBytes(char *, int, int *, char *, int, int *, int, int);	void 	SetLeftOversState(int state, int count)		{leftOvers = 1; leftOversState = state; leftOversCount = count;};	void	ClearLeftOversState(void)		{leftOvers = leftOversState = leftOversCount = leftOversXSkip = leftOversYSkip = leftOversFiller = 0;};	virtual int		ScreenWidth() {return(screen->wBmWidth);}	virtual int		ScreenHeight() {return(screen->wBmHeight);}#endif};#if WINDOWSstruct BMPReaderPixel8:BMPReader {	V_Pixel8	*screen8;	V_Array		*tranTable;    char 		*translation;	V_Pixel8	*GetScreen(void);	int 	CreateScreen(Rect *, int);    int 	DestroyScreen(void);	/* inline functions */	int 	InitBitmap(VCGrafPort *, VPictHandle *, BITMAPINFO *);	int 	CleanUpBitmap(VCGrafPort *, VPictHandle *, BITMAPINFO *);	int 	WriteToBitmap(VCGrafPort *, VPictHandle *, long, long, char *, BITMAPINFO *);	int		ScreenWidth();	int		ScreenHeight();};#endif //WINDOWS#endif               