/* *	ExpShard.h * *	Copyright 1995 Virtus Corporation *	All rights reserved. *  David A. Smith *  Created 95.09.28 */ #ifndef _EXPORT_SHARD_#define _EXPORT_SHARD_#define EXPORT_SHARD#define SHOWSURFACE 0#include "Export.h"#include "VArray.h"#include "VIO.h"#include "WalkBuff.h"#include "Surface.h"#include "SurfDef.h"#include "SurfFeat.h"#include "math.h"#include "POLYHDRN.H"#include "COPLANAR.H" //jcowen, coplanar fixtypedef struct {	double x;	double y;	double z;	}P3D;	typedef struct {	V_Array *surface;  // array of point indices	V_Array *surfaces; // array of SurfInfo if surface needs to be sharded	RGBAColor sColor;	P3D sNormal; 	struct Surface *surf;	struct SurfDef *surfDef;	struct SurfFeature *surfFeat;	int surfType; 	int surfWhere;	}SurfInfo;enum SurfType{ ksurface, kfeature};enum SurfWhere{ surfBase = 1, surfOutside, surfInside};struct Export_Shard:ModelExport	{	struct V_Array *polyPoints; // polyhedron points	struct V_Array *surfPoints; // surface feature points	struct V_Array *surfIndex;  // index values for surface feature points	struct V_Array *surfArray; // array of all SurfInfo...	struct V_Array *sArray;    // array of current surface SurfInfo		double zOffset; 			// z offset for surface features, each layer is lnum*zOffset	SurfInfo sInfo; 			// current surface SurfInfo	P3D surfNormal;  			// current surface normal	int sDimension; 			// surface dimension (largest normal dimension)	int polyLayer;  	RGBAColor polyColor;	int surfIn;	int surfOut;	int coordnum;		CoPlanarSet faceSets;	// jcowen, added for coplanar fix		#if THINK_C	P3D GetPoint(int index);	void PutPoint(int index, P3D p3d);	#else	P3D GetPoint(int index)		{		P3D p3d; 		if(index>0)polyPoints->Get(index-1,&p3d);		else surfPoints->Get(-(index+1),&p3d);		return p3d;		}	void PutPoint(int index, P3D p3d)		{		if(index>0)polyPoints->Put(index-1,&p3d);		else surfPoints->Put(-(index+1),&p3d);		}	#endif	/* --- */	virtual void cExport(void);	virtual void dExport(void);	int Open(struct V_Buffer *, ExportUnit, double);		int Close(void);	int Layers(struct V_Array *);	virtual void OpenLevel(void);	virtual void CloseLevel(void);		virtual int OpenGroup(int, struct V_Array *, struct V_Array *);	virtual int CloseGroup(void);		virtual int OpenPolyhedron(struct V_Array *, RGBAColor, int);	virtual int ClosePolyhedron(void);			virtual int OpenSurface(struct V_Array *, RGBAColor, Point3DFFixed);	virtual int CloseSurface(void);		virtual int OpenFeature(struct V_Array *, RGBAColor, int, int);	virtual int CloseFeature(void);	virtual void Transform(void *, void *);//--------------Override these methods------------------------------		virtual int ExportOpen(struct V_Buffer *, ExportUnit, double);	virtual int ExportClose(void);	virtual int ExportLevel(void);	virtual int ExportGroup(void);	virtual int ExportPolyhedron(void);	virtual int ExportSurface(void);	virtual int ExportFeature(void);//-------------------------------------------------------------------	void AppendSurfInfo(SurfInfo *sInfo);	void OffsetSurface(SurfInfo *info, int layer);	void ClipSurface(V_Array *sInfo, SurfInfo *info, int faceClip);	V_Array* Intersect(V_Array *s1, V_Array *s2); // calc and return intersection of two polys	void RemoveSame(V_Array *poly);	void Slice(V_Array* pIndex,P3D p0,P3D p1);	void Shard(SurfInfo *out,V_Array *in);	double CrissCross3D(P3D p1, P3D p2, P3D q1, P3D q2);	int CheckSide(P3D p0, P3D p1, P3D q2);	int CheckWidth(V_Array* surface);#if SHOWSURFACE && MACINTOSHvoid MakeWindow(void);void KillWindow(void);void DrawSurface(SurfInfo *surf,int dimension);#endif	};#endif _EXPORT_SHARD_