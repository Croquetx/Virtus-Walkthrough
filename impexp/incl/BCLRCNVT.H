#ifndef BITMAP_COLOR_CONVERTER#define BITMAP_COLOR_CONVERTER#include "VTYPES.H"// PRO-JAP moved a string to AppText.h#if VWT /* jca 17 Sept 93.  Not in VR { */#define IMAGE_ERROR				-1#define IMAGE_ALL_OK			0#define	IMAGE_GET_MORE_PIXELS	1#define IMAGE_STRIP_DONE		2#define RGB_ORDER				0#define BGR_ORDER				1#define MAX_PALETTE_DEPTH		8#define PAL_NO_SHIFT			0#define PAL_SHIFT_UP    		1#define PAL_SHIFT_DOWN			2#define TRUE_NO_SHIFT			3#define TRUE_SHIFT_UP			4#define TRUE_SHIFT_DOWN			5#define HIGH4(i)				((i>>4)&0x0F)#define LOW4(i)					(i&0x0F)#define HIGH2(i)				((i>>6)&0x03)#define MIDHIGH2(i)				((i>>4)&0x03)#define MIDLOW2(i)				((i>>2)&0x03)#define LOW2(i)					(i&0x03)#define MAXLEFTOVERS			3#define	TRUE_TO_PAL_TABLE_SIZE	4096#define	HUE						0#define	SATURATION				1#define VALUE					2#define INDEX					3#define PREV					0#define	NEXT					1#define	GRAY					512#define	RED						0#define	RED_YELLOW				20#define YELLOW					40#define	YELLOW_GREEN			60#define	GREEN					80#define GREEN_CYAN				100#define CYAN					125#define	CYAN_BLUE				145#define BLUE					165#define BLUE_MAGENTA			185#define MAGENTA					210#define MAGENTA_RED				230#define MAX_HUE					255#define GRAY_INDEX				12#define	RED_INDEX				0#define	RED_YELLOW_INDEX		1#define YELLOW_INDEX			2#define	YELLOW_GREEN_INDEX		3#define	GREEN_INDEX				4#define GREEN_CYAN_INDEX		5#define CYAN_INDEX				6#define	CYAN_BLUE_INDEX			7#define BLUE_INDEX				8#define BLUE_MAGENTA_INDEX		9#define MAGENTA_INDEX			10#define MAGENTA_RED_INDEX		11#define N_TABLE_INDEX_ENTRIES	13#define HALF_RANGE				5	#define ENTRY_INDEX_CUTOFF		256				typedef struct {	int h,s,l;	} HSLColorInt;typedef struct {	int start, count;	} TableIndex;typedef struct {	HSLColorInt	hsl;	int			id;	} indexedHSL;	extern char *IMAGE_UNSUPPORTED_DEPTH;#if WINDOWS#define ABGR(r,g,b)		RGB(r,g,b)#define ARGB(r,g,b)		RGB(b,g,r)#elif MACINTOSH#define ABGR(r,g,b)		((ULong) (((long)b<<16)&0x00FF0000|((long)g<<8)&0x0000FF00|(long)r&0x000000FF))#define ARGB(r,g,b)		((ULong) (((long)r<<16)&0x00FF0000|((long)g<<8)&0x0000FF00|(long)b&0x000000FF))#define CONVERTER_MAGIC_OFFSET	64#endifstruct ColorConverterBase:indirect {	struct V_Array	*colorTable;	int		imageDepth, screenDepth;	long	width, pixCount;	int		order;	int		cColorConverter(struct V_Array *, int, int, long, int);	void	dColorConverter(void);	virtual int		Convert(char *, long , long *, char *, long , long *);};struct PalToPalConverter:ColorConverterBase {	int		mode, shift, shiftCount;	int		cColorConverter(struct V_Array *, int, int, long, int);	int		CreateConversionTable(struct V_Array *);	int		MapColors(struct V_Array *, unsigned char *);	int		Convert(char *, long , long *, char *, long , long *);};struct PalToTrueConverter:ColorConverterBase {	int		count, pixelBytes, leftoversCount, mode;	char	leftovers[MAXLEFTOVERS];		int		cColorConverter(struct V_Array *, int, int, long, int);	int		RemapPalToTrueColors(struct V_Array *);		int		Convert(char *, long , long *, char *, long , long *);};struct TrueToPalConverter:ColorConverterBase {	int		shift, shiftIncr, count;	char	leftovers[MAXLEFTOVERS];	int		cColorConverter(struct V_Array *, int, int, long, int);	int		MakeColorMap(V_Array *);	int		MatchColor(RGBColor *);	void	ShiftIntoDaBuffer(char *, long *, long, RGBColor *);		int		Convert(char *, long , long *, char *, long , long *);};struct TrueToTrueConverter:ColorConverterBase {	int		count, inBytesPerPixel, outBytesPerPixel, mode;	char	leftovers[MAXLEFTOVERS];		int		cColorConverter(struct V_Array *, int, int, long, int);	int		Convert(char *, long , long *, char *, long , long *);};#endif // VWT.  jca 17 Sept 93 }#endif