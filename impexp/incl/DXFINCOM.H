/*	DXFINCOM.H	__________		Communication with Kandu Software's DXFIN routines		Copyright _ 1991 Kandu Software Corp. All rights reserved.*//*	The following defines represent bits which can be set in the	global variable 'dxfinOptions' to control behavior of the	DXF import routines.  'dxfinOptions' is initially defined	with all bits off.		DXFIN_HEXAHEDRA	-	Set this bit on if you know that the input file						is composed entirely of hexahedra; you are						guaranteeing to the import routines that the						number of faces in the file is a multiple of						six, and that each set of six faces represents						a cohesive polyhedron.  Import logic will be						very different: don't use this bit unless you						really mean it.		DXFIN_PATCHALL	-	Set this bit on if you want the import routines						to attempt to patch ALL holes.  If you leave this						bit off, only holes which are planar will be patched.						With the bit on, the import routines will try to patch						all holes, planar or not.  Sometimes this makes matters						worse: holes with a generally convex shape will						probably patch well, extremely ragged or C-shaped holes						will cause the patch routines to perform poorly.						NOTE 19OCT91 - 						Implementation of this bit suppressed because of						unknown bug which may cause crash.  This will be fixed						soon.	DXFIN_TESTCONVEX-	Set this bit on if you want to test for the convexity of						all polyhedra.  At this time (19OCT91), this only						affects statistical reporting; the import routines will						pass all polyhedra to the calling application regardless						of whether they are convex.						*/#include "DXFOUT.H" //VIRTUS#if DEF3D_WANTED //VIRTUStypedef struct	{	unsigned short	red,green,blue,alpha;}	RGBAColor;#endif#define	DXFIN_HEXAHEDRA		0x0021#define	DXFIN_PATCHALL		0x0002#define	DXFIN_TESTCONVEX	0x0004#ifndef __powerc	extern 	ULong		dxfinOptions;	#else	ULong		dxfinOptions;#endif //__powerctypedef	struct	score	{	long	nrPolyhedra;			/*	Number of polyhedra collected					*/	long	nrConvex;				/*	Number of polyhedra which are simple surfaces	*/	long	nrTopoNightmares;		/*	Number of polyhedra which are not surfaces		*/	long	nrExtrusions;			/*	Number of extrusions processed					*/	long	nrDupsKilled;			/*	Number of faces dropped from model				*/}	score;extern	score	dxfinScore;//VIRTUS/* Flags for status argument to NewPoly() */#define DXFIN_DEGENERATE	0x01	/* Unable to align surfaces (degenerate or moebius surface) */#define DXFIN_UNPATCHES		0x02	/* Holes exist, DXFIMPORT was unable to patch them */#define DXFIN_PATCHES		0x04	/* Holes existed, they have been patched */#define DXFIN_ORPHAN		0x08	/* This surface is an orphan (only 1 surface in original object) */#define DXFIN_CONVEX		0x10	/* This object is convex */#if MACINTOSHvoid Import(SFReply *);#elif WINDOWSvoid Import(char *);#endifint NewPoly(Point3DFFixed *, int, short **, int, short *, RGBAColor *, long);