/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by  	John C. Alspaugh * * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:       QTMovie masks the QuickTime calls.  It provides a consistent *				interface for making animations. * History:  * Platform: 	 *				WINDOWS		 *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VIO.h"#include "VPane.h"#include "VGraphic.h"#include "VArray.h"#include "VDialog.h"#include "VGUtil.h"#include "VMemutil.h"#include "VError.h"#include "Clip.h"#include "AppDeflt.h"#include "AppText.h"#include "View.h"#include "observer.h"#include "QuickTim.h"#include "QTMovie.h"intQuickTimeMovie::cWalkMovie(TranslatorPreference *transPref, V_Buffer *buffer){	theQT = (QuickTime *) buffer;	err = 0;    return(err);}voidQuickTimeMovie::dWalkMovie(){	theQT = NULL;    delete(this);}intQuickTimeMovie::BeginMovie(Rect *rect, long bitDepth, long frames){	Rect	nRect;	r = *rect;	nRect = *rect;	depth = bitDepth;    nFrames = frames;	err = theQT->BeginMovie(&nRect,bitDepth,10);	if (err)		ResultError(err);    return(err);}intQuickTimeMovie::AnimateMovie(struct V_Pane *window, struct Observer *eye){	long	i;	char	str[256];	if (err)	return(err);	/* meter */	sprintf(str,NFramesRemaining,nFrames);	MeterSetCountTitle(str);	for (i = 0; (!err) && (i < nFrames); i++)		{		sprintf(str,NFramesRemaining,nFrames-i);		MeterSetCountTitle(str);		eye->SetFrame(i);		err = err ? err : window->VOutput(theQT->GetOffscreen());        err = err ? err : WriteMovieFrame(NULL);		MeterSetCount(i);      /* handle the meter */		err = err ? err : MeterUpdate(0);	}	sprintf(str,NFramesRemaining,0);	MeterSetCountTitle(str);	MeterSetCount(i);      /* handle the meter */	MeterUpdate(0);	return(err);}intQuickTimeMovie::WriteMovieFrame(struct V_Offscreen *newFrame){	if(!err) err = theQT->IOFrame();    return(err);}intQuickTimeMovie::EndMovie(){	err = theQT->EndMovie(err);    return(err);}