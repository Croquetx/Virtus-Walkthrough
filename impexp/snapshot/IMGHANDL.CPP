/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by  	John C. Alspaugh * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VArray.h"#include "VDisplay.h"#include "VPane.h"#include "AppDeflt.h"#include "ImgHandl.h"voidImageWriter::cImageWriter(V_Buffer *theFile, V_Offscreen *theScreen){file = theFile;screen = theScreen;flags = 0x00;xscaleNum = yscaleNum = DEFAULT_IMAGE_SCALE;xscaleDenom = yscaleDenom = 1;}voidImageWriter::dImageWriter(void){file = NULL;screen = NULL;delete(this);}	voidImageWriter::SetXResolution(long num, long denom){xscaleNum = num; xscaleDenom = denom;}voidImageWriter::SetYResolution(long num,long denom){yscaleNum = num;yscaleDenom = denom;}int	ImageWriter::DrawImage(V_Pane *pane){/* that's it.  just render the stuff from the pane to the offscreen */return(pane->VOutput(screen));}/* Ye olde virtuale functione */ int ImageWriter::WriteImage(struct TranslatorPreference *transPref){       	return(0);}intImageReader::cImageReader(V_Buffer *theFile){file = theFile;screen = NULL;flags = 0x00;xscaleNum = yscaleNum = DEFAULT_IMAGE_SCALE;xscaleDenom = yscaleDenom = 1;return (0);}voidImageReader::dImageReader(void){delete(this);}	voidImageReader::SetXResolution(long num, long denom){xscaleNum = num; xscaleDenom = denom;}voidImageReader::SetYResolution(long num,long denom){yscaleNum = num;yscaleDenom = denom;}V_Offscreen *ImageReader::GetScreen(){return(screen);}voidImageReader::SetScreen(V_Offscreen *screenPtr){screen = screenPtr;}/* virtual function */int	ImageReader::ReadImage(int depth){      	return(0);}