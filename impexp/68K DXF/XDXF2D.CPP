/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by *				David W. Easter *				 * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File: * Notes: * History: *------------------------------------------------------------------------------ */#include "VTypes.h"#if VWT// jca 17 Spet 93.  No dxf in VR {#include "XDXF2D.h"#include "WalkBuff.h"#include "VArray.h"#include <string.h>voidExport_DXF2D::cExport()	{	Export_DXF3D::cExport();	geomStyle = e2DPolyline;	extrude = FALSE;	surfVisible = FALSE;	}voidExport_DXF2D::Options2D(int os, int clr, Point3DFFixed v)	{	lineTermId = os;	colorMode = clr;		switch(os)		{		case eMac:			strcpy(lineTermination, TXT_MAC_LT);			break;		case eUnix:			strcpy(lineTermination, TXT_UNIX_LT);			break;		case eDos:		default:			strcpy(lineTermination, TXT_DOS_LT);			break;		}	SetView(v);	}intExport_DXF2D::OpenSurface(V_Array *pointRefs, RGBAColor color,Point3DFFixed normal)	{	int err = 0;	surfVisible = Visible(normal);	if (surfVisible)		err = Export_DXF3D::OpenSurface(pointRefs, color, normal);	return(err);	}intExport_DXF2D::CloseSurface()	{	int err = 0;	if (surfVisible)		err = Export_DXF3D::CloseSurface();	return(err);	}intExport_DXF2D::OpenFeature(V_Array *points, RGBAColor color, int where, intconnected)	{	int err = 0;	if (surfVisible)		err = Export_DXF3D::OpenFeature(points, color, where, connected);	return(err);	}intExport_DXF2D::CloseFeature()	{	int err = 0;	if (surfVisible)		err = Export_DXF3D::CloseFeature();	return(err);	}voidExport_DXF2D::Transform(void *in, void *out)	{	Point3DFFixed *pIn = (Point3DFFixed*)in, *pOut = (Point3DFFixed*)out;	*pOut = Translate(*pIn);	}void	Export_DXF2D::DXFWritePolylineVertex(int code, int threeD, doublethickness, Point3DFFixed *pt, RGBColor rgb)	{	double x, y;		// we can ignore threeD; we know this isn't a 3D polyline.	// we can ignore thickness, too, since this can't be extruded		DXFWriteLabel(DXF_START, TXT_DXF_VERTEX);	DXFWriteLayer(polyLayer);	DXFWriteColor(rgb);	DXFWriteLong(DXF_FLAGS, DXF_FLAGS_NONE);		x = FixedToDbl(pt->x);	y = FixedToDbl(pt->y);		DXFWriteDouble(DXF_VERTEX_X, x);	DXFWriteDouble(DXF_VERTEX_Y, y);	}	// jca 17 Sept 93 }#endif // VWT