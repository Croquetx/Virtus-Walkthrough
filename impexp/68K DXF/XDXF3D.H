#ifndef EXPORT_DXF3D#define EXPORT_DXF3D#include "VTYPES.h"#if VWT#include "Export.h"enum {	eMac,	eUnix,	eDos	};	// lineTermId	enum {	eByLayer,	eByObject	};	// dxf color mode	enum {	e3DFace,	e3DPolyline,	e2DPolyline	};	struct Export_DXF3D:ModelExport	{	char	localBuffer[256];	// temp buffer for writing out stuff		char lineTermination[3];	// mac, unix, dos	int lineTermId;			// mac, unix, dos	int colorMode;			// color by object; color by layer	int geomStyle;			//	int extrude;			// use extrusion?	struct V_Array *layerList;	// layer info	struct V_Array *polyPoints;	int polyLayer;	RGBAColor polyColor;	int extrudable;	struct Surface *baseSurf;		struct TrueToPalConverter	*colorMapper;	struct Polyhedron *polyhedron;	struct Surface *surface;	/* --- */	virtual void cExport(void);	virtual void dExport(void);		void Options3D(int, int, int, int);	int Open(struct V_Buffer *, ExportUnit, double);	int Close(void);	int Layers(struct V_Array *);	void SetPolyhedron(struct Polyhedron *);	int OpenPolyhedron(struct V_Array *, RGBAColor, int);	int ClosePolyhedron(void);	void SetSurface(struct Surface *);	virtual int OpenSurface(struct V_Array *, RGBAColor, Point3DFFixed);	virtual int OpenFeature(struct V_Array *, RGBAColor, int, int);	virtual void Transform(void *, void *);	int PolyExtrudable(void);			/* dxf-type things */	void	WriteDXFHeader(char *);	// write the header, with our product and version	void	WriteDXFTables(struct V_Array *);		// just dump the tables	void 	WriteDXFBlocks(void);		// again, a placeholder.  We don't use blocks	void	WriteDXFPolyline(struct V_Array *, RGBColor, FFixed);	void	WriteDXF3DFace(struct V_Array *, RGBColor);	virtual void	DXFWritePolylineVertex(int, int, double, Point3DFFixed *,RGBColor);	// write a point	void	DXFWrite3DFaceVertex(int, Point3DFFixed *);	// write a point		void	DXFWriteColor(RGBColor);		void	DXFWriteLayerColor(RGBColor, int);		void	DXFWriteLayer(int);	void	DXFWriteLabel(int, char *);	// code, label	void	DXFWriteLong(int, long);	// code, item	void	DXFWriteDouble(int, double);	// code, item		void 	DXFFillColorMap(struct V_Array *);	};// flags#define DXF_FLAGS_NONE	0x00#define DXF_LAYERF_OK	0x00#define DXF_PLF_VERTEX	0x01#define DXF_PLF_CLOSED	0x01#define DXF_PLF_3D		0x08#define DXF_VRTXF_3D	0x20// id codes#define DXF_START		0#define DXF_LABEL		2#define DXF_LINETYPE	6#define DXF_LAYER		8#define DXF_VERTEX_X	10#define DXF_VERTEX_Y	20#define DXF_VERTEX_Z	30#define DXF_THICKNESS	39#define DXF_COLOR		62#define DXF_POLYLINE_VERTEX		66#define DXF_FLAGS		70#define DXF_COMMENT		999#define TXT_DXF_SECTION	(strPtr)"SECTION"#define TXT_DXF_ENDSEC	(strPtr)"ENDSEC"#define TXT_DXF_HEADER	(strPtr)"HEADER"#define TXT_DXF_TABLE	(strPtr)"TABLE"#define TXT_DXF_TABLES	(strPtr)"TABLES"#define TXT_DXF_ENDTAB	(strPtr)"ENDTAB"#define TXT_DXF_BLOCKS	(strPtr)"BLOCKS"#define TXT_DXF_ENTITIES	(strPtr)"ENTITIES"#define TXT_DXF_VIEW	(strPtr)"VIEW"#define TXT_DXF_LAYER	(strPtr)"LAYER"#define TXT_DXF_EOF		(strPtr)"EOF"#define TXT_DXF_BLURB	(strPtr)"DXF Export by Virtus Corporation"#define TXT_MAC_LT		"\r"#define TXT_UNIX_LT		"\n"#define TXT_DOS_LT		"\r\n"#define TXT_DXF_CONTINUOUS	(strPtr)"CONTINUOUS"#define TXT_DXF_POLYLINE	(strPtr)"POLYLINE"#define TXT_DXF_VERTEX		(strPtr)"VERTEX"#define TXT_DXF_SEQEND	(strPtr)"SEQEND"#define TXT_DXF_3DFACE	(strPtr)"3DFACE"#define OpenDXFSection()	DXFWriteLabel(DXF_START, TXT_DXF_SECTION)#define CloseDXFSection()	DXFWriteLabel(DXF_START, TXT_DXF_ENDSEC)#define OpenDXFFile()		/* */#define CloseDXFFile()		DXFWriteLabel(DXF_START, TXT_DXF_EOF)#define OpenDXFEntitiesSection()		DXFWriteLabel(DXF_START, TXT_DXF_SECTION); DXFWriteLabel(DXF_LABEL, TXT_DXF_ENTITIES);#define CloseDXFEntitiesSection()		DXFWriteLabel(DXF_START, TXT_DXF_ENDSEC)#define SetRGBColor(clr, r, g, b)	{clr->red = r; clr->green = g; clr->blue = b;}#endif // VWT#endif //EXPORT_DXF3D