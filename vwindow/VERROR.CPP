/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by  	David A. Smith *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VError.h"#include "VDialog.h"#include "VTextDef.h"#include "AppText.h"	//PRO-JAP#include <stdio.h>#if MACINTOSH#include <GestaltEqu.h>#include <AppleEvents.h>#include <Printing.h>#endif //MACINTOSHvoid ResultError(int err)	{	AlertDialog *alertDialog;	char str[256];	char *errorMessage;	#if MACINTOSH	switch(err)		{		case noErr: return;break;		case evtNotEnb: errorMessage=txt_evtNotEnb; break;		case procNotFound: errorMessage=txt_procNotFound; break;	//case bufferIsSmall:errorMessage=txt_bufferIsSmall;break;	//case noOutstandingHLE:errorMessage=txt_noOutstandingHLE;break;	//case connectionInvalid:errorMessage=txt_connectionInvalid;break;	//case noUserInteractionAllowed:errorMessage=txt_noUserIntAll;break;		case iPrSavPFil: errorMessage=txt_iPrSavPFil; break;		case controlErr: errorMessage=txt_controlErr; break;		case iIOAbort: errorMessage=txt_iIOAbort; break;		case iMemFullErr: errorMessage=txt_iMemFullErr; break;		case iPrAbort: errorMessage=txt_iPrAbort; break;		case -4101: errorMessage=txt_lasWriteNotFound; break;		case -4100: errorMessage=txt_lasWriteClosed; break;		case -4099: errorMessage=txt_lasWriteReqToBig; break;		case -4098: errorMessage=txt_lasWriteReqActive; break;		case -4097: errorMessage=txt_lasWriteBadConnect; break;		case -4096: errorMessage=txt_lasWriteNoCCB; break;		case -8133: errorMessage=txt_PostScriptErr; break;		case -8132: errorMessage=txt_TimeOut; break;		case -8131: errorMessage=txt_lasWriteNotRes; break;		case dirFulErr: errorMessage=txt_dirFulErr; break;		case dskFulErr: errorMessage=txt_dskFulErr; break;		case nsvErr: errorMessage=txt_nsvErr; break;		case ioErr: errorMessage=txt_ioErr; break;		case bdNamErr: errorMessage=txt_bdNamErr; break;		case fnOpnErr: errorMessage=txt_fnOpnErr; break;		case eofErr: errorMessage=txt_eofErr; break;		case posErr: errorMessage=txt_posErr; break;		case mFulErr: errorMessage=txt_mFulErr; break;		case tmfoErr: errorMessage=txt_tmfoErr; break;		case fnfErr: errorMessage=txt_fnfErr; break;		case wPrErr: errorMessage=txt_wPrErr; break;		case fLckdErr: errorMessage=txt_fLckdErr; break;		case vLckdErr: errorMessage=txt_vLckdErr; break;		case fBsyErr: errorMessage=txt_fBsyErr; break;		case dupFNErr: errorMessage=txt_dupFNErr; break;		case opWrErr: errorMessage=txt_opWrErr; break;		case paramErr: errorMessage=txt_paramErr; break;		case rfNumErr: errorMessage=txt_rfNumErr; break;		case gfpErr: errorMessage=txt_gfpErr; break;		case volOffLinErr: errorMessage=txt_volOffLinErr; break;		case permErr: errorMessage=txt_permErr; break;		case volOnLinErr: errorMessage=txt_volOnLinErr; break;		case nsDrvErr: errorMessage=txt_nsDrvErr; break;		case noMacDskErr: errorMessage=txt_noMacDskErr; break;		case extFSErr: errorMessage=txt_extFSErr; break;		case fsRnErr: errorMessage=txt_fsRnErr; break;		case badMDBErr: errorMessage=txt_badMDBErr; break;		case wrPermErr: errorMessage=txt_wrPermErr; break;		case dirNFErr: errorMessage=txt_dirNFErr; break;		case tmwdoErr: errorMessage=txt_tmwdoErr; break;		case badMovErr: errorMessage=txt_badMovErr; break;		case resNotFound: errorMessage=txt_resNotFound; break;		case resFNotFound: errorMessage=txt_resFNotFound; break;		case addResFailed: errorMessage=txt_addResFailed; break;		case addRefFailed: errorMessage=txt_addRefFailed; break;		case rmvResFailed: errorMessage=txt_rmvResFailed; break;		case rmvRefFailed: errorMessage=txt_rmvRefFailed; break;		case resAttrErr: errorMessage=txt_resAttrErr; break;		case mapReadErr: errorMessage=txt_mapReadErr; break;		case gestaltUnknownErr: errorMessage=txt_gestaltUnknownErr; break;		case gestaltUndefSelectorErr: errorMessage=txt_gestaltUndefSelectorErr; break;		case gestaltDupSelectorErr: errorMessage=txt_gestaltDupSelectorErr; break;		case gestaltLocationErr: errorMessage=txt_gestaltLocationErr; break;		case errAECoercionFail: errorMessage=txt_errAECoercionFail; break;		case errAEDescNotFound: errorMessage=txt_errAEDescNotFound; break;		case errAECorruptData: errorMessage=txt_errAECorruptData; break;		case errAEWrongDataType: errorMessage=txt_errAEWrongDataType; break;		case errAENotAEDesc: errorMessage=txt_errAENotAEDesc; break;		case errAEBadListItem: errorMessage=txt_errAEBadListItem; break;		case errAENewerVersion: errorMessage=txt_errAENewerVersion; break;		case errAENotAppleEvent: errorMessage=txt_errAENotAppleEvent; break;		case errAEEventNotHandled: errorMessage=txt_errAEEventNotHandled; break;		case errAEReplyNotValid: errorMessage=txt_errAEReplyNotValid; break;		case errAEUnknownSendMode: errorMessage=txt_errAEUnknownSendMode; break;		case errAEWaitCanceled: errorMessage=txt_errAEWaitCanceled; break;		case errAETimeout: errorMessage=txt_errAETimeout; break;		case errAENoUserInteraction: errorMessage=txt_errAENoUserInteraction; break;		case errAENotASpecialFunction: errorMessage=txt_errAENotASpecialFunction; break;		case errAEParamMissed: errorMessage=txt_errAEParamMissed; break;		case errAEUnknownAddressType: errorMessage=txt_errAEUnknownAddressType; break;		case errAEHandlerNotFound: errorMessage=txt_errAEHandlerNotFound; break;		case errAEReplyNotArrived: errorMessage=txt_errAEReplyNotArrived; break;		case errAEIllegalIndex: errorMessage=txt_errAEIllegalIndex; break;		case userCanceledErr: errorMessage=txt_userCanceledErr; break;		default:			if(MemError())errorMessage=txt_notEnoughMemory;			else				{				sprintf(str,"%s %d.",txt_unknownError,err);				errorMessage=str;				}			break;		}#endif //MACINTOSH#if WINDOWSsprintf(str,TXT_ERROR_NUM,err);		// PRO-JAPerrorMessage=str;#endif //WINDOWS		alertDialog = new(AlertDialog);	alertDialog->cAlertDialog((strPtr)errorMessage);	}