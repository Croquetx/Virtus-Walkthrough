#ifndef V_MENU#define V_MENU#include "VTypes.h"#include "VArray.h"extern char *menuBreak;#define MENU_KEYCODE	0x00FF#define MENU_SPECIAL	0x1F00#define MENU_PREFIX		0xE000#define altKeyPrefix	0x8000#define ctrlKeyPrefix	0x4000#define shiftKeyPrefix	0x2000#define menuInsKey		0x0100#define menuDelKey      0x0200#define menuTabKey		0x0300#define menuBkSpKey     0x0400#define menuEnterKey	0x0500#define menuFKey(n)		((n)+16 << 8)#define TXTM_BREAK 	menuBreak#define menuNewKey 			'N'#define menuOpenKey 		'O'#define menuCloseKey		'W'#define menuSaveKey			'S'#define menuPrintKey		'P'#if GERMAN  #define menuOpenKeyPos 		4  #define menuCloseKeyPos 		1  #define menuExportKeyPos		1  #define menuMakeMovieKeyPos   3  #define menuLibraryKeyPos		3  #define menuPageSetupKeyPos   1  #elif SPANISH  #define menuSaveAsKeyPos		1  #define menuCreditKeyPos 	    1  #define menuImportKeyPos      5  #define menuMakeMovieKeyPos   7  #define menuHelpHowKeyPos		13  #define menuRevertKeyPos		2  #define menuCutKeyPos			2#else // English default  #define menuSaveAsKeyPos		5  #define menuRevertKeyPos		2  #define menuCutKeyPos			2#endif //  SPANISH#define menuFileEuroKey		'F'#define menuNewEuroKey		'N'#define menuOpenEuroKey		'O'#define menuCloseEuroKey	'C'#define menuSaveEuroKey		'S'#define menuSaveAsEuroKey	'A'#define menuRevertEuroKey	'V'#define menuPrintEuroKey	'P'#define menuPageSetupEuroKey 'R'#define menuQuitEuroKey		'X'#define menuCreditsEuroKey	'D' //for japan pro 2.0#define menuExportEuroKey	'E' //for japan pro 2.0#define menuImportEuroKey	'I' //for japan pro 2.0#define menuLibraryEuroKey	'L' //for japan pro 2.0#define menuMakeMovieEuroKey	'M' //for japan pro 2.0#define menuUndoKey 		'Z'#define menuCutKey 			'X'#define menuCopyKey			'C'#define menuPasteKey		'V'#define menuEditEuroKey		'E'#define menuUndoEuroKey		'U'#define menuCutEuroKey		'T'#define menuCopyEuroKey		'C'#define menuPasteEuroKey	'P'#define menuClearEuroKey	'E'#define menuWindowEuroKey	'W'#if MACINTOSH#define menuQuitKey		'Q'#define menuClearKey	'K'#define menuClearKeyPos	4#define menuPageSetupKeyPos	2#define menuQuitKeyPos	0enum MenuPriority	{	aboutPriority,	filePriority,	editPriority,	lowPriority,	averagePriority,	highPriority,	highestPriority	};#elif WINDOWS#define menuQuitKey		(altKeyPrefix|menuFKey(4))#define menuClearKey	menuDelKey#if GERMAN  #define menuQuitKeyPos			0#elif SPANISH  #define menuQuitKeyPos			0  #define menuDuplicateKeyPos		1  #define menuLockSelectedKeyPos	1  #define menuPageSetupKeyPos		1#else //  #define menuQuitKeyPos		1  #define menuClearKeyPos		1  #define menuPageSetupKeyPos	1#endif //  SPANISHenum MenuPriority	{	filePriority,	editPriority,	lowPriority,	averagePriority,	highPriority,	highestPriority,	aboutPriority	};#define IDM_VIRTUSMENU  5012#define BUILD_MENUID(mNum,iNum) (IDM_VIRTUSMENU+(mNum<<6)+iNum)#define HIMENUID(num) ((num-IDM_VIRTUSMENU)>>6)#define LOMENUID(num) ((num-IDM_VIRTUSMENU)&0x3FL)#endif //WINDOWS#define CLEAN_MENUS  	-128// MERGE15 removed open_vr_lib etcextern struct MenuArray *visibleMMgr;#if MACINTOSHextern struct V_WindowMenu *theWindowMenu;#endifextern int hiMenu;extern int loMenu;#define APPLEMENU	1#define HEIRMENU 	-1#define STANDARDMENU 0#define MENU_ACTIVE 1#define MENU_SELECT 2#define DA_MENU 	(V_Menu *)-1#define WINDOW_MENU	(V_Menu *)-2void CleanMenus(void);struct V_MenuItem:indirect{	struct V_Menu *heirMenu; 	char *helpStr;		char itemName[64];	int state;	int keyEquivalent;    int euroKey;	long keyAccelerator;		int divider_line;			// ABD WILLIAMS MERGE11 9/10/93		void cMenuItem(int);		// ABD WILLIAMS MERGE11 9/10/93	void dMenuItem(void);	void SetName(char *);	void GetName(char *);	void SetState(int);	int  GetState(void);	void SetKeyPos(int);	int  GetKeyPos(void);    void SetEuroKey(int);    int  GetEuroKey(void);	void SetKey(long);	long GetKey(void);	void SetHeir(struct V_Menu *);	struct V_Menu *GetHeir(void);	};struct V_Menu:V_Array{	int onOff;				int state;				char menuName[64];		int keyEquivalent;    int euroKey;    int mnemonics;	VMenuHandle menu;	int mNum;	int type;				int priority;	struct V_Document *document;	struct V_MenuMgr* manager;	struct V_Menu *linkTo;				struct V_Menu *linkFrom;		void cMenu(strPtr,struct V_Document *);	void dMenu(void);	void SetMenuKeyPos(int);	int  GetMenuKeyPos(void);	void SetMenuEuroKey(int);    int  GetMenuEuroKey(void);	void SetMnemonics(int);	int  GetMnemonics(void);	void MakeMenuEntry(char *, V_MenuItem *);	// jca 2 Nov 93 if the menu item has a mnemonic,															// accelerator, or key-sequence, make it here.	VMenuHandle MakeMenu(int tMenu);	void UnmakeMenu(void);	void LinkMenu(struct V_Menu *link);	void AddDA(void);	void DoDA(int);/*V_Array overrides*/	int Append(void *v);	int AppendSeparator(void);		// ABD WILLIAMS MERGE11 9/10/93	int Insert(long,void *v);	int Remove(long);	virtual void Action(int,long);	virtual void Preempt(void);		void SetPriority(int);	void SetHeir(int,struct V_Menu *);	void SetKey(int,long);	void SetKeyPos(int,int);    void SetEuroKey(int,int);	void SetTitle(int,strPtr);    void GetTitle(int,strPtr);	void Select(int,int);		void Activate(int,int);	int  GetState(int);	void VPreempt(void);	int  PopUp(struct V_Pane *,Point,int);	int  Width(void);	int LocalToGlobalItem(int); 	void CleanUp(void);	int  FindAccelerator(int,long modifier);	};struct V_WindowMenu:V_Menu{	struct V_Document *theDocument;	void ctheMenu(struct V_Document *);	void Action(int,long);	};struct V_MenuMgr:V_Array{	void cMenuMgr(void);	void dMenuMgr(void);	int Append(void *);	int Insert(long,void *);	void Delete(void *);	int Put(long,void *);	int Replace(void *,void *);	int Visible(void);	};	struct MenuArray:V_Array{	struct V_Document *menuDocument;	void SetMenuDocument(struct V_Document *);     //DUDE PORT	struct V_Document *GetMenuDocument(void);      //DUDE PORT	int FindAccelerator(int,long modifier);	int Compare(void *data1, void *data2);	};	#endif //V_MENU