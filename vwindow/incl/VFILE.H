#ifndef V_FILE#define V_FILE#include "VTypes.h"#include "VIO.h"#include "VArray.h"#if MACINTOSH#include <Aliases.h>#endif //MACINTOSH#include <stdio.h>#include <string.h>#define SAVE		1#define SAVEAS		2#define SAVECOPYAS	3#define LOAD		4#define LOADAS		5#define INIT		6#define NEW			7#define LOADSTART	8#define PRINT		9#define REFERENCE	10#define NEWFLAG		0x10#define DATA_FORK	1#define RESOURCE_FORK 2/* jca 29 jan 93 added to shift filename management to v_file */#if WINDOWS#define MAX_LENGTH_FILENAME		8#define MAX_LENGTH_EXTENSION	3#define MAX_LENGTH_APPENDAGE	6#define USE_EXTENSION			0x01#define USE_FILENAME			0x02#elif MACINTOSH#define MAX_LENGTH_FILENAME		32#define MAX_LENGTH_EXTENSION	31#define MAX_LENGTH_APPENDAGE	31#endif#define V_FILETYPE				0x0002//JAM added July94 [[[enum VirtusFileType	{		VirtusNoType,		VirtusProFile,		VirtusVRFile,		VirtusVWTFile    };//JAM added July94 ]]]int FileCount(void);extern long theCreator;//=============================================================// VfsLocation	path, name, etc. to fixate a particular file.		//GJR 10/06/93// Contents are only to be touched by vfile routines themselves//------------------------------------------------------------- //MERGE-PRO-JAM-1 struct VfsLocation:indirect {#if MACINTOSH	string name[64];	/* the file name is stored here		*/	long directory;		/* directory number */	short volume;		/* volume number */	AliasHandle alias;	/* this is used to find the file V7*/#else //WINDOWS	string path[256];	/* path to the file */	string name[64];	/* name of the file, sans extension */	string extension[MAX_LENGTH_EXTENSION+1];	/* short extension */#endif //MACINTOSH	void cVfsLocation(void);	void dVfsLocation(void);	void CopyVfsLocation(struct VfsLocation *);	};//typedef struct VfsLocation VfsLocation;//=============================================================	struct V_File:V_Buffer{#if MACINTOSH	IOParam pblk;	long	Buff_Begin, Buff_End;	int		Buff_Ptr, Buff_Max;	V_Array *typeArray;	/* the file type array (choose one)			*/	AliasHandle alias;	/* this is used to find the file*/#elif WINDOWS	FILE *file;	HFILE hFile;	int fileNum;        /* this is the file ref number*/	string path[256];	/* this is the directory path*/	int validated;	/* use the fileExtension or filname */	string fileExt[MAX_LENGTH_EXTENSION+1];    /* file extension */	string defFileExt[MAX_LENGTH_EXTENSION+1];	/* the default file extension */	struct V_Array	*filters;  /* the file filter patterns */	int	defFilterLen; 	/* length of the default filter */#endif	int use_radio_button_save;	//JAM MERGE-GOURAUD-PRO	int use_alternate_type;		// PRO25	int read_only;		/* is this a a read-only type file?   		*/	int stationery;		/* is this a stationery type file? 	 		*/	short resource;		/* the resource reference number 			*/	string filname[64];	/* the real file name is stored here		*/	string fname[64];	/* a temporary file name is stored here		*/	long create;		/* the creator application 					*/	long type;			/* the file type							*/	string qStr[256];	/* query string								*/	int query;			/* what are we doing here?					*/	int used;			/* have we passed this way before?			*/	long minDiskSpace;	/* minimum disk space required to save this file. */	int openFlag;		/* indicates the state of the file.			*/	int newflag;		/* indicates that the open dialog will have a New button */	struct V_File *relativeFile;/*this files reference is calculated relative to this relativeFile*/	long refCon;		/*used for anything that you want			*/	int dataFork;		/* data fork or resource fork I/O? */    int finderFlags;	/* control of bundle, invisible, etc. flags */#if VPRO	//JAM 14JULY94 added to handle embed/notembed textures [[[	short EmbedTexturesFlag;	//JAM 14JULY94 added to handle embed/notembed textures ]]]#endif	void cFile(int,long,long,strPtr,strPtr);	void sFile(void);#if WINDOWS	void sWFile(strPtr);	void GetName(strPtr); 			// the model name (no extensions)#elif MACINTOSH	void AEFile(FSSpec *fspec);#endif //WINDOWS	void dFile(void);	void SetName(strPtr);	long GetFType(void);	void AddFType(long, strPtr);	void SetFType(long);             // for use with trace layer imports	void GetFName(strPtr);          // the name used by the file system (with extension)	void AppendFName(strPtr);       // adds stuff to the file name (TEMP, TIFF, JOEBOB, 2, 3, etc)	int GetVolume(void);	void SetVolume(int);	void SetMinDiskSpace(long);	void SetQuery(int ,strPtr);	void SetRelative(struct V_File *relative);	void SetFork(int);    void FinderFlags(int);	int GetBufferType(void);	int Find(void);	int FindApplication(void);/*assumes we already know where it is*/	int FindSystem(void);	int FVerify(void);		int MakeDirectory(void);	int SetDirectory(void);		int Open(int createFlag);	int Close(void);	int OpenResource(int createFlag);	int CloseResource(void);	int	GetFullPathStr(char *fullPathName);	// ABD MERGE-TEXTURE 9/13/93											//Removed unused args //GJR 09/07/93	/*Resource I/O method*/	int IOResource(Handle *data,long type, int rID, strPtr rName);	int VRemoveResource(long type, int rID);	/*V_Buffer I/O methods*/	int IOSetDirection(int dir);	int IOData(void *,long);	int IOPosition(void *,long,long);	int IOSetPosition(long);		int IOLength(long *);	int	IOSetLength(long);	int	IOInsert(long,long);	int	IODelete(long,long);	int Used(void);	int ReadOnly(void);	int Stationery(void);	void SetNewFlag(int);	int GetNewFlag(void);		int Delete(void);	int Rename(strPtr);	int Copy(struct V_File *);		int IO(struct V_Buffer *);/*this is used to save the file reference data*/	int VGetLocation(VfsLocation *fileLocation_ptr);		//GJR 10/06/93	int VSetLocation(VfsLocation *fileLocation);			//GJR 10/06/93	int	VIsSameLocation(VfsLocation *fileLocation);			//GJR 10/06/93private:#if MACINTOSH	int SetLocation(char *name, long directory,short volume,AliasHandle als);	int GetLocation(char *name, long *directory,short *volume,AliasHandle *als);#else //WINDOWS	int SetLocation(char *directory, char *name, char *fExt);	int GetLocation(char *directory, char *name, char *fExt);#endif //MACINTOSHpublic://GJR 10/06/93 mac/win joined together. Delete from following (2 pairs)#if MACINTOSH	int UpdateBuffer(long);	int IOBuffer(char *, long);#elif WINDOWS	void Untitle(void)	{ validated &= ~USE_FILENAME; };#endif //MACINTOSH#if VPRO	//JAM 14JULY94 added to handle embed/notembed textures [[[	short GetEmbedTextures(void);	void SetEmbedTextures(short);	//JAM 14JULY94 added to handle embed/notembed textures ]]]#endif	};//------------------------------------------------------// VfsLocation routines	int VfsGetLocationFType(VfsLocation*, LongPtr type_ptr);	int VfsGetLocationFName(VfsLocation*, CharPtr name);	int	VfsIsSameLocation(VfsLocation*, VfsLocation*);			//GJR 10/06/93	int	VfsGetBogusLocation(VfsLocation *);			//GJR 10/06/93	int VfsIsVirtusModel(VfsLocation *);	//JAM 23July94	int VfsFindAllFilesInDir(VfsLocation *, ULong, V_Array *);	int VfsGetListOfTextures(V_Array *);#endif //V_FILE