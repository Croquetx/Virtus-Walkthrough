#include "VTypes.h"#include "VToolbox.h"#ifndef VIO#define VIO#define DATA_OUT 	1#define DATA_IN		0#define IO_CHAR		0x01#define IO_SHORT	0x02#define IO_LONG		0x04#define IO_DOUBLE	0x08#define IO_PSTRING	0x10/* write out motorolla byte-order */#define IO_CHAR_M	IO_CHAR#define IO_SHORT_M	IO_SHORT#define IO_LONG_M	IO_LONG#define IO_DOUBLE_M	IO_DOUBLE#define IO_PSTRING_M IO_PSTRING/* write out intel byte-order */#define IO_CHAR_I	IO_CHAR	#define IO_SHORT_I	0x20#define IO_LONG_I	0x40#define IO_DOUBLE_I 0x80#define IO_PSTRING_I IO_PSTRING#ifdef __powerc#define IEEE_SINGLE float#define IEEE_DOUBLE double#define IEEE_EXTENDED extended double#elif (THINK_C || (__MWERKS__ && !__powerc))#define IEEE_SINGLE float#define IEEE_DOUBLE short double#define IEEE_EXTENDED long double#elif __BORLANDC__ || THINK_CPLUS || __SC__ || _MSC_VER // DAS-C++ 10/2/93//jca 4JAN94 symantic for windows, microsquiche visual c#define IEEE_SINGLE float#define IEEE_DOUBLE double#define IEEE_EXTENDED long double#else#error Choke and Die you Pig Dog Compiler!!! Need to figure out the compilers representation of a double.#endif //DOUBLE TYPES#define MakeID(a,b,c,d)	((long)(a) << 24 | (long)(b) << 16 | (c) << 8 | (d))#define V_BUFFERTYPE	0x0001struct V_IO:indirect{	virtual int IO(struct V_Buffer *);	};	struct ChunkData	{	long size;	long position;	};struct V_Buffer:V_IO{	int direction;	int cryptOn;	long position;	struct V_Array *buffer;	struct ChunkData chunkData;	struct V_Array *chunkStack;	long refCon;		void cBuffer(int);	void dBuffer(void);	void Verify(void);		/*DAS 1/27/91*/	virtual int IOData(void *,long);	int IOType(void *,int);	int IODirection(void);	virtual int IOPosition(void *data,long length,long position);	int IOTypePosition(void *data,int type, long position);	virtual int IOSetPosition(long position);	long IOGetPosition(void);	virtual int  IOSetDirection(int);	virtual int  IOInsert(long,long);	virtual int  IODelete(long,long);	virtual int  IOLength(long*);	virtual int  IOSetLength(long);	virtual int IO(struct V_Buffer *);	void	SetCryptOn(void);	void	SetCryptOff(void);	void	EnCrypt(char *to_ptr, char *from_ptr, long length, long keypad_idx);	void	DeCrypt(char *to_ptr, char *from_ptr, long length, long keypad_idx);	void SetRefCon(long);	long GetRefCon(void);	long OpenChunkR(void);	int OpenChunkW(long);	void CloseChunk(void);	void PushChunk(void);	void PopChunk(void);	long ChunkSize(void);	virtual int GetBufferType(void);	};	#endif //VIO