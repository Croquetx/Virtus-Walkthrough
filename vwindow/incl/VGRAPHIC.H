#ifndef V_GRAPHICS#define V_GRAPHICS#include "VTypes.h"extern RGBColor vBlack;extern RGBColor vWhite;extern int cursNum;void VForeColor(RGBColor *);void VBackColor(RGBColor *);enum VCursorTypes{	vCursorArrow = 0,	vCursorText = 1,	vCursorFCross,	vCursorEarth = 128,	vCursorCross = 10000,	vCursorLock,	vCursorHand,	vCursorQuestion,	vCursorSplit,	vCursorPencil,	vCursorRing,	vCursorFinger,	vCursorDropper,	vCursorHide,	vCursorTumble,	vCursorConnect,#if ((VR) || (VPRO))		// MERGE-GOURAUD-PRO 	vCursorZoomOut,	vCursorZoomIn,#endif //VR	vCursorNO, // DAS-VDRAG 9/3/93	vCursorDummy	};void VSetCursor(int);void TextSetUp(int,int,int);enum VFontSizes{    vSmallFont = 6,    vMediumFont = 9,    vLargeFont = 12,    vButtonFontSize = 16,	vSystemFontSize = vLargeFont,#if !(WINDOWS && JAPANESE)	vAppFontSize = vMediumFont,	vDialogFontSize = 8#else	vAppFontSize = 10,	vDialogFontSize = 12#endif //!(WINDOWS && JAPANESE)	};enum VPatternTypes{	vPatBlack = 1,	vPatLtGray,	vPatGray,	vPatDkGray,	vPatWhite,	vPatSelect,	vPatDithered			};void VDrawText(char*,int,int,Rect*);void VClipDrawText(char*,int,int,Rect*);  // this is clipped to the rect  JAM 17 Nov 93void VDrawChar(char,Rect*);void VSetPattern(int);void VSelectPatternOrigin(Point);#define VSetColor(c,r,g,b) { c.red = r; c.green = g; c.blue = b; }#if WINDOWS#define VPenState	int#elif MACINTOSH#define VPenState	PenState#endifvoid	VGetPen(VPenState*);       // save and restore the pen and pattern.  jca 8 aug 93int 	VGetPattern(void);void	VSetPen(VPenState*);     #if MACINTOSHenum VFontTypes{    vSystemFont = systemFont,    vAppFont = applFont,    vMonacoFont = monaco,    vCourierFont = courier,    vTimesFont = times,    vGenevaFont = geneva,    vChicagoFont = systemFont,	vDialogFont = systemFont,	vButtonFont = 125,	vVerticalFont =  126	};enum VFontFaces{	vNormal = normal,	vBold = bold,	vItalic = italic,	vUnderlined = underline,	vOutline = outline,	vShadow = shadow,	vCondense = condense,	vExtend = extend,    vDialogFace = bold	};void InitCurs(void);#ifdef __powerc#define randSeed	qd.randSeed#define screenBits	qd.screenBits#define arrow		qd.arrow#define dkGray		qd.dkGray#define ltGray		qd.ltGray#define gray		qd.gray#define black		qd.black#define white		qd.white#define thePort		qd.thePort#else#define screenBits	(qd.screenBits)#define thePort		(qd.thePort)#endif //__PPCC__enum VPenModeTypes{	vPatXor = patXor,	vPatBic = patBic,	vPatOr = patOr,	vSrcOr = srcOr,	vSrcXor = srcXor,	vPatCopy = patCopy,	vNotSrcBic = notSrcBic	};extern Pattern *currentPattern;#define VSetFont(ft,sz,fc) { TextFont(ft); TextFace(fc); TextSize(sz); }#define VSetPenSize(h,v) PenSize(h,v)#define VSetPenNormal() PenNormal()#define VPenMode(m) PenMode(m)#define VTextMode(m) TextMode(m)#define VTextWidth(str,s,l) TextWidth(str,s,l)#define VClipRect(r) ClipRect((r))#define VFrameRect(r) FrameRect((r))#define VFrameOval(r) FrameOval((r))#define VPaintRect(r) PaintRect((r))#define VFillRect(r) FillRect(r,currentPattern)#define VInvertRect(r) InvertRect(r);#define VEraseRect(r) EraseRect((r))#define VMoveTo(h,v) MoveTo((h),(v))#define VLineTo(h,v) LineTo((h),(v))#define VSetRect(rt,l,t,r,b) SetRect(rt,l,t,r,b)#define VOffsetRect(r,h,v) OffsetRect(r,h,v)#define VInsetRect(r,h,v) InsetRect(r,h,v)#define VShowCursor() ShowCursor()#define VHideCursor() HideCursor()#define VCharWidth(ch) (CharWidth(ch))	// MERGE-GOURAUD-PRO-6 return width of char in pixels#elif WINDOWSvoid InitGraphics(HINSTANCE);void InitCurs(HINSTANCE);void ReleaseGraphics(void);void ReleaseCurs(void);void InitFonts(HINSTANCE);void ReleaseFonts(void);HFONT GetFont(int,int,int);int FontsLoaded(void);HFONT LoadFont(int,int,int);int  DestroyFont(HFONT);enum VFontTypes{    vSystemFont = 0,    vAppFont,    vMonacoFont,    vCourierFont,    vTimesFont,    vGenevaFont,	vChicagoFont,	vDialogFont,    vButtonFont = 125,    vVerticalFont = 126    };enum VTextFaces{	vNormal = 0,	vBold = 0x01,	vItalic = 0x02,	vUnderlined = 0x04,	vOutline = 0x08,	vShadow = 0x10,	vCondense = 0x20,	vExtend = 0x40,#if !JAPANESE    vDialogFace = 0x01#else	vDialogFace = 0#endif //!JAPANESE	};enum VPenModeTypes{	vPatXor = 1,	vPatBic,	vPatOr,	vSrcOr,	vSrcXor,	vNotSrcBic,	vPatCopy,	vMarqueeMove,	vMarqueeStay	};extern int currentDepth;extern HBRUSH currentBrush;	extern PATTERN currentPattern;extern HPALETTE currentPalette;extern HDC currentDevice;void SetGraphicContext(HDC);HDC  GetGraphicContext(void);void VSetPenSize(int,int);void VSetPenNormal(void);void VSetFont(int,int,int);void VPenMode(int);void VTextMode(int);int  VTextWidth(char*,int,int);void VClipRect(Rect *);void VFrameRect(Rect*);void VFrameOval(Rect*);void VPaintRect(Rect*);void VFillRect(Rect*);#define VInvertRect(r) InvertRect(currentDevice,r);#define VSetRect(rt,l,t,r,b) SetRect(rt,l,t,r,b)#define VOffsetRect(r,h,v) OffsetRect(r,h,v)#define VInsetRect(r,h,v) InflateRect(r,-(h),-(v))#define VShowCursor() ShowCursor(TRUE)#define VHideCursor() ShowCursor(FALSE)#define VCharWidth(ch) (12)	// FIX THIS!!! MERGE-GOURAUD-PRO-6 return width of char in pixels (FIX THIS!!!)void VEraseRect(Rect *);void VMoveTo(int,int);void VLineTo(int,int);extern WORD gwVgrRasterCaps;extern WORD	gwVgrHasPalette;extern WORD	gwVgrBitsPixel;extern WORD	gwVgrPlanes;extern WORD	gwVgrNumColors;extern WORD	gwVgrSizePalette;extern WORD	gwVgrNumReserved;extern WORD	gwVgrColorRes;#endif //WINDOWS#endif //V_GRAPHICS