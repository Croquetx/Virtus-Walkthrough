#ifndef V_MEMORY#define V_MEMORY#include <string.h>enum MemoryFlags{	memoryFine = 0,	memoryShort,	memoryCritical,	memoryGone	};	#define WALKVIEW_RENDER_MEM_THRESHOLD 50000L#define SURFFEAT_RENDER_MEM_THRESHOLD 200000Lextern int lowMemory;extern int gmemoryLowForWalkView;			//JAM 17FEB95 low memory walk renderingextern int gmemoryLowForSurfaceFeatures;	//JAM 17FEB95 low memory walk rendering//true if total mem is bigger than value, false otherwise#define MemThreshholdTest(NumBytes) (FreeMem() >= (NumBytes))void ObjLock(void * theObj);void ObjUnlock(void * theObj);void MoveObjHi(void * theObj);void GrowMemory(int);int CheckMemory(void);void ReserveMemoryBlock(long);void ReclaimMemory(void);#if WINDOWS	// DAS 11/10/93long TotalMem(void);void InitMemoryPool(void);  		// jca 7APR94 init smartheapvoid EndMemoryPool(void);    	// jca 7APR94 end smartheap#endif // WINDOWS DAS 11/10/93#ifdef __powerc#define Vmemmove memmove#define Vmemcpy memcpy#elif THINK_C||THINK_CPLUS // DAS-C++ 10/2/93void *Vmemmove(void *, void *, size_t);void *Vmemcpy(void *, void *, size_t );#else#define Vmemmove memmove#define Vmemcpy memcpy#endif //THINK_C#endif //V_MEMORY