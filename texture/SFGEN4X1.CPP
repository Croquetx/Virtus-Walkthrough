/*used to generate the various cases of the scanfill routines for texture8*//* cases:texture width is a power of two, is not a power of twomode is decal, mode is not decalmirror horizontally or notmirror vertically or nottotal of 16 cases*/#include "VTypes.h"#include "WTypes.h"#include "VTimer.h"#include "VDebug.h"#include "TextSrvr.h"	// ABD TEXTURE#include "sfgen.h"#if WINDOWS#include "DOS.h"		// DOS segment handlers		GJR 10/29/93						// Note: huge can't store across seg boundaries with single op#define SPANNEDHUGE(farptr, hifarptr) ((unsigned) FP_OFF(farptr) > (unsigned) FP_OFF(hifarptr))#endif //WINDOWS#undef ISAPOWEROFTWO#undef DECAL#undef HMIRROR#undef VMIRROR#define ISAPOWEROFTWO(A)	((A & 8) != 0)#define DECAL(A)			((A & 4) != 0)#define HMIRROR(A)			((A & 2) != 0)#define VMIRROR(A)			((A & 1) != 0)#define CAT(X,Y)			X##Y#define XCAT(X,Y)			CAT(X,Y)	/*got this xcat stuff from K&R C book*/typedef union byteword	{	struct		{		unsigned char b3;		unsigned char b2;		unsigned char b1;		unsigned char b0;		}b;	unsigned long w;	}byteword;//unsigned char mask4bitbackward[2]  = {0xF0, 0x0F};//unsigned char mask4bitforward[2] = {0x0F, 0xF0};//unsigned char mask2bitbackward[4]  = {0xFC, 0xF3, 0xCF, 0x3F};//unsigned char mask2bitforward[4] = {0x3F, 0xCF, 0xF3, 0xFC};//unsigned char mask1bitbackward[8]  = {0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F};//unsigned char mask1bitforward[8] = {0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0xFE};//unsigned char mask4x1bitbackward[8]  = {0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F};unsigned long mask4x1bitbackward[8] = {0xFEFEFEFE, 0xFDFDFDFD, 0xFBFBFBFB, 0xF7F7F7F7,									   0xEFEFEFEF, 0xDFDFDFDF, 0xBFBFBFBF, 0x7F7F7F7F};//unsigned char mask4x1bitforward[8] = {0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0xFE};unsigned long mask4x1bitforward[8] =  {0x7F7F7F7F, 0xBFBFBFBF, 0xDFDFDFDF, 0xEFEFEFEF,									   0xF7F7F7F7, 0xFBFBFBFB, 0xFDFDFDFD, 0xFEFEFEFE};unsigned long fakecolor[16] = {0x0000, 0x000F, 0x00F0, 0x00FF,							   0x0F00, 0x0F0F, 0x0FF0, 0x0FFF,							   0xF000, 0xF00F, 0xF0F0, 0xF0FF,							   0xFF00, 0xFF0F, 0xFFF0, 0xFFFF};//int InitialMaskIndex;  defined in 4_2_1 bit generator/*linear routines*/#define ROUTINENUMBER 0#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 1#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 2#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 3#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 4#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 5#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 6#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 7#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 8#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 9#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 10#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 11#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 12#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 13#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 14#include "lnsfl4x1.h"#undef ROUTINENUMBER#define ROUTINENUMBER 15#include "lnsfl4x1.h"#undef ROUTINENUMBER