#include "VTypes.h"#include "WTypes.h"#include "ShowTest.h"			// !!! DEBUG#include "VDebug.h"             // !!! DEBUG#include "VDisplay.h"#include "VFile.h"#include "VMemUtil.h"#include "VGUtil.h"#include "VGraphic.h"#include "VMDL.h"#include "VError.h"			// jca 4 Oct 93#include "TextType.h"		// after vfile				//GJR 10/06/93#include "AppText.h"		// jam 31Oct94#include <string.h>#include <stdio.h>#if MACINTOSH#include <Components.h>       #endif/*------------------------------------------------------------------------------*//*	This routine */void TTChunk::cTextureType(){	char str[256];	sprintf(str,"%s",TXT_EMBED);	//jam 31oct94//	file = NULL;	vfsLocation = new(VfsLocation);    vfsLocation->cVfsLocation();	TextureType::cTextureType();	strcpy(type_str, str);}/*------------------------------------------------------------------------------*//*	This routine */void TTChunk::dTextureType(){		file = NULL;                     	// jca 21APR94 this file refers to the doc; don't delete it!	FileTextureType::dTextureType();    // jca 21APR94 clean up}/*------------------------------------------------------------------------------*//*	This method */int TTChunk::LoadPicture(){	int error = 0;extern int lowMemory;Rect unpad_rect;	// VPROVGrafPort savePort; VGrafDevice saveDevice;	// MERGE-VPRO-2 save and restore port	if (!file) return(-1);	if (io_position == -1) return(-1);	VGetPort(&savePort, &saveDevice);	// MERGE-VPRO-2 save and restore port	if (!mip[0])	{	V_Offscreen *temp_pict = NULL;	Rect r_from, r;	short power;	short width;	V_File *tempfile;		tempfile = new(V_File);		tempfile->cFile(LOAD, MakeID('?','?','?','?'), MakeID('?','?','?','?'), "", "");		// PRO-22 [[[		{		extern int gReadingEncryptedFile;			if (gReadingEncryptedFile)				tempfile->SetCryptOn();        }        // PRO-22 ]]]		error = tempfile->VSetLocation(vfsLocation);		if (error) return error;		error = tempfile->Find();		if (error) return error;		error = tempfile->Open(FALSE);        if (error) return error;		temp_pict = new(V_Offscreen);		if (temp_pict == NULL) error = memFullErr;				if (!error) 		{		long id;			tempfile->IOSetDirection(DATA_IN);			tempfile->IOSetPosition(io_position);			id = tempfile->OpenChunkR();			if (id == IFF_TXPD)			{				temp_pict->IO_BMAP(tempfile, NULL, NoCompression);			}			else			{				DEBUGGER();			}			tempfile->CloseChunk();		}		if (!error)		{			temp_pict->GetRect(&r_from);			unpad_rect = r_from;	// VPRO						// make the horizontal size a power of two			r = r_from;			power = 2;			width = r_from.right - r_from.left;			while (power < width)				power <<= 1;			power = min(power, 1024);		// max out at 1024, protects flash texture							r.right = r.left + power;			// make the vertical size a power of two			power = 2;			width = r_from.bottom - r_from.top;			while (power < width)				power <<= 1;							power = min(power, 1024);		// max out at 1024, protects flash texture							r.bottom = r.top + power;						mip[0] = NULL; 	// initialize			// check for degenerate cases			if (((r.bottom - r.top) == 0) || ((r.right - r.left) == 0))			{            	// ELVIS!!!! need a better error code				error = -1;	// jca 22MAR94 this is an error (there's probably a better error code)			}			if (lowMemory)	error = memFullErr;		}				if (!error)		{		// MERGE-PIXEL8 [[[//JAM 28JUN94 [[[ since temp_off and mip[0] are both pixel8's, we can just make mip[0] = temp_off		V_Pixel8 *temp_off = NULL;					temp_off = new(V_Pixel8);	// create temp offscreen			if (temp_off == NULL)				goto handle_error;						error = temp_off->cPixel8(&r, 8, &vWhite, NULL);			if (error) goto handle_error;							// copy pict to temp offscreen//MERGE-PRO-JAM-2 REMOVED	temp_pict->SetMetaPort();		// MERGE-1/26			temp_off->SetMetaPort();		// MERGE-1/26			temp_pict->MetaTo(temp_off, &r_from, &r);			temp_off->UnsetMetaPort();		// MERGE-1/26//MERGE-PRO-JAM-2 REMOVED	temp_pict->UnsetMetaPort();		// MERGE-1/26			unpadded_rect[0] = r_from;			mip[0] = temp_off;			temp_off = NULL;//JAM 28JUN94 ]]] since temp_off and mip[0] are both pixel8's, we can just make mip[0] = temp_off			goto no_error;handle_error:			if (mip[0] != NULL) mip[0]->dPixel8();			mip[0] = NULL;			if (temp_off)  // jca 22MAR94 also clean up the temp_off            	{				temp_off->dOffscreen();		// get rid of temp offscreen				temp_off = NULL;                }no_error:			;		// MERGE-PIXEL8 ]]]		}		if (temp_pict != NULL) temp_pict->dOffscreen();				tempfile->Close();        tempfile->dFile();		// VPRO [[[		ObjLock(this);		#if JAPANESE		sprintf(info_str, "%s%d x %s%d", TXTD_HRZSIZE, unpad_rect.right-unpad_rect.left, TXTD_VRTSIZE, unpad_rect.bottom-unpad_rect.top);#else		sprintf(info_str, "%d%s x %d%s", unpad_rect.right-unpad_rect.left, TXTD_HRZSIZE, unpad_rect.bottom-unpad_rect.top, TXTD_VRTSIZE);#endif		ObjUnlock(this);		// VPRO ]]]	}	//ShowMem(FALSE);	VSetPort(savePort, saveDevice); 	// MERGE-VPRO-2 save and restore port	return (error);#if 0	if (!file) return(-1);	if (io_position == -1) return(-1);	VGetPort(&savePort, &saveDevice);	// MERGE-VPRO-2 save and restore port	if (!mip[0])	{	V_Offscreen *temp_pict = NULL;	Rect r_from, r;	short power;	short width;	long old_pos;	int old_dir;	int was_open = FALSE; // BILBIL - must init this flag!!! - 12/12/93		if (file->openFlag)		{			old_pos = file->IOGetPosition();			old_dir = file->IODirection();			was_open = TRUE;		}		else		{			error = file->Open(FALSE);			if (error) return error;		}					temp_pict = new(V_Offscreen);		if (temp_pict == NULL) error = memFullErr;				if (!error) 		{		long id;			file->IOSetDirection(DATA_IN);			file->IOSetPosition(io_position);			id = file->OpenChunkR();			if (id == IFF_TXPD)			{				temp_pict->IO_BMAP(file, NULL, NoCompression);			}			else			{				DEBUGGER();			}			file->CloseChunk();		}		if (!error)		{			temp_pict->GetRect(&r_from);			unpad_rect = r_from;	// VPRO						// make the horizontal size a power of two			r = r_from;			power = 2;			width = r_from.right - r_from.left;			while (power < width)				power <<= 1;			power = min(power, 1024);		// max out at 1024, protects flash texture							r.right = r.left + power;			// make the vertical size a power of two			power = 2;			width = r_from.bottom - r_from.top;			while (power < width)				power <<= 1;							power = min(power, 1024);		// max out at 1024, protects flash texture							r.bottom = r.top + power;						mip[0] = NULL; 	// initialize			// check for degenerate cases			if (((r.bottom - r.top) == 0) || ((r.right - r.left) == 0))			{            	// ELVIS!!!! need a better error code				error = -1;	// jca 22MAR94 this is an error (there's probably a better error code)			}			if (lowMemory)	error = memFullErr;		}				if (!error)		{		// MERGE-PIXEL8 [[[//JAM 28JUN94 [[[ since temp_off and mip[0] are both pixel8's, we can just make mip[0] = temp_off#if 0/*		V_Offscreen *temp_off = NULL;					temp_off = new(V_Offscreen);	// create temp offscreen			if (temp_off == NULL)				goto handle_error;						error = temp_off->cOffscreen(&r, 8, &vWhite, NULL);			if (error) goto handle_error;							// copy pict to temp offscreen			temp_pict->SetMetaPort();		// MERGE-1/26			temp_off->SetMetaPort();		// MERGE-1/26			temp_pict->MetaTo(temp_off, &r_from, &r);			temp_off->UnsetMetaPort();		// MERGE-1/26			temp_pict->UnsetMetaPort();		// MERGE-1/26						// jca 22MAR94 [[ moved this code down here			mip[0] = new(V_Pixel8);			if (mip[0] == NULL)				{							error = memFullErr;                goto handle_error;				}							error = mip[0]->cCreateCopy(temp_off);			if (error || lowMemory)				{				if (!error)	error = memFullErr;				mip[0] = NULL;                goto handle_error;                }			// jca 22MAR94 ]] end moved code			unpadded_rect[0] = r_from;			temp_off->dOffscreen();		// get rid of temp offscreen			temp_off = NULL;*/#endif		V_Pixel8 *temp_off = NULL;					temp_off = new(V_Pixel8);	// create temp offscreen			if (temp_off == NULL)				goto handle_error;						error = temp_off->cPixel8(&r, 8, &vWhite, NULL);			if (error) goto handle_error;							// copy pict to temp offscreen			temp_pict->SetMetaPort();		// MERGE-1/26			temp_off->SetMetaPort();		// MERGE-1/26			temp_pict->MetaTo(temp_off, &r_from, &r);			temp_off->UnsetMetaPort();		// MERGE-1/26			temp_pict->UnsetMetaPort();		// MERGE-1/26					unpadded_rect[0] = r_from;			mip[0] = temp_off;			temp_off = NULL;//JAM 28JUN94 ]]] since temp_off and mip[0] are both pixel8's, we can just make mip[0] = temp_off			goto no_error;handle_error:			if (mip[0] != NULL) mip[0]->dPixel8();			mip[0] = NULL;   /*      moved this down, since we need to do it always jca 10AUG94 VR1.0.1 JAM 6OCT94   			if (temp_off)  // jca 22MAR94 also clean up the temp_off            	{				temp_off->dOffscreen();		// get rid of temp offscreen				temp_off = NULL;				}   */no_error:			;			//	moved this down, since we need to do it always jca 10AUG94 VR1.0.1 JAM 6OCT94  			if (temp_off)  // jca 22MAR94 also clean up the temp_off            	{				temp_off->dOffscreen();		// get rid of temp offscreen				temp_off = NULL;				}		// MERGE-PIXEL8 ]]]		}		if (temp_pict != NULL) temp_pict->dOffscreen();				if (was_open)		{			file->IOSetPosition(old_pos);			file->IOSetDirection(old_dir);		}		else			file->Close();		// VPRO [[[		ObjLock(this);		#if JAPANESE		sprintf(info_str, "%s%d x %s%d", TXTD_HRZSIZE, unpad_rect.right-unpad_rect.left, TXTD_VRTSIZE, unpad_rect.bottom-unpad_rect.top);#else		sprintf(info_str, "%d%s x %d%s", unpad_rect.right-unpad_rect.left, TXTD_HRZSIZE, unpad_rect.bottom-unpad_rect.top, TXTD_VRTSIZE);#endif		ObjUnlock(this);		// VPRO ]]]	}	//ShowMem(FALSE);	VSetPort(savePort, saveDevice); 	// MERGE-VPRO-2 save and restore port	return (error);#endif}/*------------------------------------------------------------------------------*//*	This routine */void TTChunk::UnloadPicture(){	int i;		for ( i = 0 ; i < MAX_NUM_MIPS ; i++ )	{		if (mip[i]) mip[i]->dPixel8();		// get rid of picture		mip[i] = NULL;							// make sure picture set to NULL	}}/*------------------------------------------------------------------------------*//*	This routine */void TTChunk::GetFileLoc(struct VfsLocation *returnloc){	returnloc->CopyVfsLocation(vfsLocation);	}