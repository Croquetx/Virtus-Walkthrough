#include "VTypes.h"#include "VMDL.h"#include "VFile.h"#include "TextType.h"			// comes after vfile			//GJR 10/06/93#include "VError.h"#include <string.h>/*------------------------------------------------------------------------------*//*	This routine */void FileTextureType::cTextureType(){		// create file reference	file = new(V_File);	file->cFile(REFERENCE, 0, 0, "", "");	vfsLocation = new(VfsLocation);    vfsLocation->cVfsLocation();}/*------------------------------------------------------------------------------*//*	This routine */void FileTextureType::dTextureType(){		if (file) file->dFile();	file = NULL;	if (vfsLocation) vfsLocation->dVfsLocation();	vfsLocation = NULL;	TextureType::dTextureType();}int FileTextureType::SetFileLoc(VfsLocation *vfsLocation){	int err = noErr;	// file created in cTexture	if (file)	{		err = file->VSetLocation(vfsLocation);	// fill in file ref with real info		if (!err) err = file->Find();						// find the file	}	return(err);}/*------------------------------------------------------------------------------*//*	This routine */void FileTextureType::GetFileLoc(VfsLocation *vfsLocation_ptr)			//GJR 10/06/93{	OSErr err = noErr;	if (file)		err = file->VGetLocation(vfsLocation_ptr);		// Use vfs		//GJR 10/06/93}void FileTextureType::GetFullPathStr(char *str){		if (file)		file->GetFullPathStr(str);		//Remove platform args		//GJR 10/06/93}/*------------------------------------------------------------------------------*//*	This routine */int FileTextureType::IORef(V_Buffer *buf){	int err = noErr;	if (!file) return(noErr);	ASSERT(file->relativeFile == NULL);	// if we are saving to a file, we will set relative 	// to this file, otherwise we will set relative to NULL 	// (as in cut/paste).	if (buf->GetBufferType() == V_FILETYPE)		file->SetRelative((V_File*)buf);	else		file->SetRelative(NULL);										buf->OpenChunkW(IFF_TXFR);		// texture file ref		err = file->IO(buf);			//JAM 8-15-94 after we are done outputting, we shouldn't have	//relative file anymore, so texture doesn't depend on possibly nonexistent	//V_File.	file->SetRelative(NULL);		buf->CloseChunk();	return (err);}/*------------------------------------------------------------------------------*//*	This routine */void FileTextureType::SetVfsLocation(struct VfsLocation *newvfs){	int err = noErr;	vfsLocation->CopyVfsLocation(newvfs);}