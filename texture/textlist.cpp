/*------------------------------------------------------------------------------ * WalkThroughª - the real time 3-D CAD system. * Version 0.1 * * Copyright © 1989 by Virtus Corporation * All Rights Reserved * Written by  	David A. Smith *				David W. Easter *				Mark J. Uland * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * TextureList.c *------------------------------------------------------------------------------ */#include "VTypes.h"#include "vgutil.h"#include "AppMssgs.h"#include "TEXTLIST.h"	#include "TEXTITEM.h"#include "TEXTLITM.h"#include "CADCNTRL.h"#include "AppText.h"#include "APPDEFLT.h"#include "Misc.h"#include "ToolDef.h"#include "VWCNTRL.h"#include "WLKCNTRL.h"#include "Observer.h"#include "TEXTPALT.h"#include <stdio.h>#include <string.h>	void TextureList::cPane(int flag)	{	controller = NULL;		LayerList::cPane(flag);	selection = -1; 	// fix the selection since there are no items here yet	SetVScroll();	SetBarWidth(16);	new_width = 150;	Draggable(TRUE);	}void TextureList::Display(int type,int x,int y)	{	Rect		data,r;#if 0 //only used in if 0 below	PenState	pen;#endif		r = dataRect;		switch(type)		{		case SCROLL_DRAW:			LayerList::Display(type,x,y);			break;				default:	#if 0			data = dataRect;			GetPenState(&pen);			PenNormal();			EraseRect(&data);			MoveTo(data.left, data.top);			LineTo(data.right, data.top);			SetPenState(&pen);#endif			LayerList::Display(type,x,y);			break;		}			}	void TextureList::SetController(Controller *ctrl)	{	TextureListItem	**tli;	int			i,length;		WalkList::SetController(ctrl);			if(!theList || !(length = theList->ALength())) return;		tli = (TextureListItem **)theList->Use();	for(i = 0; i < length; i++,tli++)		(*tli)->SetController(controller);	theList->Unuse();	}			void TextureList::SetList(V_Array *newList)	{	WalkList::SetList(newList);	SetController(controller);	if(theWindow)Reset();	}void TextureList::MouseDown(Point p,long modifiers)	{	int flag;	int old_selection = selection;	TextureListItem *currentTexture;				if (!active) return;		if(doubleClick&modifiers) 			{				if (controller)					controller->Request(NULL, msgEdit, objTexture, 0);			}		else WalkList::MouseDown(p,modifiers);				if (old_selection != selection)		{			theList->Get(selection,&currentTexture);				if (back_pane != NULL)			{			Rect r;							back_pane->SetTextureListItem(currentTexture);				back_pane->Reset();			}		}	}TextureListItem *TextureList::GetTextureListItem()	{		TextureListItem *currentTexture;		if (selection == -1) 		return NULL;	else		theList->Get(selection,&currentTexture);	return(currentTexture);	}TextureItem *TextureList::GetTextureItem()	{		TextureListItem *currentTexture;	if (selection == -1) 		return NULL;	theList->Get(selection,&currentTexture);		if (currentTexture != NULL)		return(currentTexture->GetTextureItem());	else		return NULL;	}	voidTextureList::SetTextureItem(TextureItem *ti)	{		struct TextureListItem **tx;	int i;			tx = (TextureListItem **)theList->Use();		for (i = 0 ; i < theList->ALength() ; i++ )		{		TextureItem *ti0 = tx[i]->GetTextureItem();			if (ti0 == ti)			{				SetSelection(i);				Reset();				break;			}		}		theList->Unuse();	}#define CELL_HEIGHT 36int TextureList::GetHeight()	{	return(CELL_HEIGHT);	}void TextureList::CalcSize(Rect *r,Point *p,int type,int warning)	{		r->top = 50;	}	/*------------------------------------------------------------------------------*//* 	This routine returns the maximum width, in pixels, for the texture picker.*/int TextureList::GetMaxStrWidth(int include_no_texture_string)	{#if 0    //JAM MERGE-VPRO-JAM-FORWIN	int theMax, i;	struct TextureListItem **tx;	char str[256],str1[256];	char str2[6] = "\p: ";//JAM MERGE-VPRO-JAM-FORWIN [[[//		TextFace(bold);							/* !!! *///		TextFont(geneva);						/* !!! *///		TextSize(9);							/* !!! */		VSetFont(vAppFont,vMediumFont,vBold);//JAM MERGE-VPRO-JAM-FORWIN ]]]		if (include_no_texture_string)			theMax = StringWidth("\pNo Texture");		tx = (TextureListItem **)theList->Use();		for (i = 0 ; i < theList->ALength() ; i++ )		{		TextureItem *ti;			ti = tx[i]->GetTextureItem();//JAM MERGE-VPRO-JAM-FORWIN [[[//			TextFace(bold);							/* !!! */			VSetFont(vAppFont,vMediumFont,vBold);//JAM MERGE-VPRO-JAM-FORWIN ]]]			ti->GetName(str);			C2Pstr(str);			theMax = max(StringWidth((StringPtr)str), theMax);//JAM MERGE-VPRO-JAM-FORWIN [[[//			TextFace(0);							/* !!! */			VSetFont(vAppFont,vMediumFont,vNormal);//JAM MERGE-VPRO-JAM-FORWIN ]]]			ti->GetTypeStr(str);			C2Pstr(str);			ti->GetInfoStr(str1);			C2Pstr(str1);			theMax = max(StringWidth((StringPtr)str)+StringWidth((StringPtr)str1)+StringWidth((StringPtr)str2), theMax);		}		theList->Unuse();		return theMax;#endif    //JAM MERGE-VPRO-JAM-FORWIN}void TextureList::SetTextureBackPane(struct TextureBackPane *tbp){	back_pane = tbp;}int TextureList::SetSelection(int who){int old_selection = selection;TextureListItem	*currentTexture;	who = WalkList::SetSelection(who);		if (who != old_selection)	{		theList->Get(selection,&currentTexture);			if (back_pane != NULL)			back_pane->SetTextureListItem(currentTexture);		back_pane->Reset();	}	return who;}	void TextureList::NewItem2()		// always insert in front (for "no texture")	{	TextureListItem	*nTexture;	char		str[256];	int			success;		if (selection != -1) 		{			theList->Get(selection,&nTexture);			if (nTexture != NULL) nTexture->SetHilite(FALSE);		}		nTexture = new(TextureListItem);		nTexture->cListItem("");		nTexture->SetList(this);		nTexture->SetController(controller);		nTexture->SetHilite(TRUE);		nTexture->SetTextureItem(NULL);		theList->Insert(0,&nTexture);		SetSelection(0);// MERGE-GOURAUD-PRO-12 put back in		Reset();	}		void TextureList::AddItem2(TextureItem *nti){struct TextureListItem **tx;int i;Boolean found = FALSE;	tx = (TextureListItem **)theList->Use();	for (i = 0 ; i < theList->ALength() ; i++ )	{	TextureItem *ti;			// see if this texture item is the same as the one we are supposed to add		ti = tx[i]->GetTextureItem();		if (ti == nti) { found = TRUE; break; }	}	theList->Unuse();		// if we didn't find it already in the list, then add a new list item	if (!found)		NewItem(nti);}		void TextureList::AddItem3(TextureItem *nti){struct TextureListItem **tx;int i;Boolean found = FALSE;	tx = (TextureListItem **)theList->Use();	for (i = 0 ; i < theList->ALength() ; i++ )	{	TextureItem *ti;			// see if this texture item is the same as the one we are supposed to add		ti = tx[i]->GetTextureItem();		if (ti == nti) { found = TRUE; break; }	}	theList->Unuse();		// if we didn't find it already in the list, then add a new list item	if (!found)		NewItem3(nti);}void TextureList::NewItem(TextureItem *ti)	{	TextureListItem	*nTexture;	char		str[256];	int			success;			if (selection != -1) 		{			theList->Get(selection,&nTexture);//MERGE-GOURAUD-PRO-12 put back in			if (nTexture != NULL) nTexture->SetHilite(FALSE);//MERGE-GOURAUD-PRO-12 put back in		}		nTexture = new(TextureListItem);		ti->GetName(str);		nTexture->cListItem(str);		nTexture->SetList(this);		nTexture->SetController(controller);		nTexture->SetHilite(TRUE);//MERGE-GOURAUD-PRO-12 put back in		nTexture->SetTextureItem(ti);		if (selection == -1)		{			theList->Insert(0,&nTexture);			SetSelection(0);//MERGE-GOURAUD-PRO-12 put back in		}		else		{		//¥¥¥ OLD	theList->Insert(selection+1,&nTexture);//MERGE-GOURAUD-PRO-12		//¥¥¥ OLD	SetSelection(selection+1);//MERGE-GOURAUD-PRO-12 put back in			theList->Insert(theList->ALength(),&nTexture);//MERGE-GOURAUD-PRO-12			WalkList::SetSelection(theList->ALength());//MERGE-GOURAUD-PRO-12 put back in		}		Reset();	}void TextureList::NewItem3(TextureItem *ti)	{	TextureListItem	*nTexture;	char		str[256];	int			success;			if (selection != -1) 		{			theList->Get(selection,&nTexture);			if (nTexture != NULL) nTexture->SetHilite(FALSE);		}		nTexture = new(TextureListItem);		ti->GetName(str);		nTexture->cListItem(str);		nTexture->SetList(this);		nTexture->SetController(controller);		nTexture->SetHilite(TRUE);		nTexture->SetTextureItem(ti);		if (selection == -1)		{			theList->Insert(0,&nTexture);			WalkList::SetSelection(0);//MERGE-GOURAUD-PRO-12 put back in		}		else		{		//¥¥¥ OLD	theList->Insert(selection+1,&nTexture);//MERGE-GOURAUD-PRO-12		//¥¥¥ OLD	WalkList::SetSelection(selection+1);//MERGE-GOURAUD-PRO-12 put back in			theList->Insert(theList->ALength(),&nTexture);//MERGE-GOURAUD-PRO-12			WalkList::SetSelection(theList->ALength());//MERGE-GOURAUD-PRO-12 put back in		}	}int TextureList::RemoveItem()	{		TextureListItem	*item;		WalkList::RemoveItem();	back_pane->SetTextureListItem(GetTextureListItem());	Reset();	return(TRUE);	}	void TextureList::MenuSelection(Point p,long modifiers)	{	}intTextureList::GetAction(long action,long modifiers)	{		switch(action)		{		case MSG_SELECT_NO_TEXTURE: SetTextureItem(NULL); break;		default: return(FALSE); break;		}			return(TRUE);	}