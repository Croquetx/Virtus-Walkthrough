#include "WTypes.h"#include <stdlib.h>#include "VArray.h"#include "TxtrUtil.h"#include "InitText.h"#define NUMOFTEMPARRAYS 5int indexPFFArray;V_Array *tempPFFArray[NUMOFTEMPARRAYS];int indexPFFAIArray;V_Array *tempPFFAIArray[NUMOFTEMPARRAYS];int indexPFFArrayB;V_Array *tempPFFArrayB[NUMOFTEMPARRAYS];int indexPFFAIArrayB;V_Array *tempPFFAIArrayB[NUMOFTEMPARRAYS];V_Array *tempPFFAIArrayC;V_Array *clipvarray1;V_Array *clipvarray2;PointFFixed *slicetexture;V_Array *slicetextureVA;Point3DAllInfo *slicep;V_Array *slicepVA;PointFFixed *slicetexture2;V_Array *slicetexture2VA;PointFFixed *slicep2;V_Array *slicep2VA;void inittemparrays(int plength){	int i;		if((plength<<2) > tempPFFArray[0]->ALength()) {		for(i=0;i<NUMOFTEMPARRAYS;i++) {			tempPFFArray[i]->Unuse();			tempPFFArray[i]->SetLength(plength<<2);			(PointFFixed *)tempPFFArray[i]->Use();			tempPFFAIArray[i]->Unuse();			tempPFFAIArray[i]->SetLength(plength<<2);			(Point3DAllInfo *)tempPFFAIArray[i]->Use();			tempPFFArrayB[i]->Unuse();			tempPFFArrayB[i]->SetLength(plength<<2);			(PointFFixed *)tempPFFArrayB[i]->Use();			tempPFFAIArrayB[i]->Unuse();			tempPFFAIArrayB[i]->SetLength(plength<<2);			(Point3DAllInfo *)tempPFFAIArrayB[i]->Use();		}			}}PointFFixed *gettemparray2(){	indexPFFArray += 1;	if(indexPFFArray == NUMOFTEMPARRAYS) indexPFFArray = 0;	return((PointFFixed *)(tempPFFArray[indexPFFArray]->Abuse()));}Point3DAllInfo *gettemparray1(){	indexPFFAIArray += 1;	if(indexPFFAIArray == NUMOFTEMPARRAYS) indexPFFAIArray = 0;	return((Point3DAllInfo *)(tempPFFAIArray[indexPFFAIArray]->Abuse()));}PointFFixed *gettemparray2B(){	indexPFFArrayB += 1;	if(indexPFFArrayB == NUMOFTEMPARRAYS) indexPFFArrayB = 0;	return((PointFFixed *)(tempPFFArrayB[indexPFFArrayB]->Abuse()));}Point3DAllInfo *gettemparray1B(){	indexPFFAIArrayB += 1;	if(indexPFFAIArrayB == NUMOFTEMPARRAYS) indexPFFAIArrayB = 0;	return((Point3DAllInfo *)(tempPFFAIArrayB[indexPFFAIArrayB]->Abuse()));}Point3DAllInfo *gettemparray1C(int plength){	if(tempPFFAIArrayC->ALength() < plength)	{		tempPFFAIArrayC->Unuse();		tempPFFAIArrayC->SetLength(plength);		return((Point3DAllInfo *)tempPFFAIArrayC->Use());	}	return((Point3DAllInfo *)(tempPFFAIArrayC->Abuse()));}voidinitcliparrays(int plength){	if(clipvarray1->ALength() < (plength << 1))	{		clipvarray1->Unuse();		clipvarray2->Unuse();		clipvarray1->SetLength(plength << 1);		clipvarray2->SetLength(plength << 1);		(Point3DAllInfo *)clipvarray1->Use();		(PointFFixed *)clipvarray2->Use();	}}voidinitslicearrays(int plength){	if(slicetextureVA->ALength() < (plength << 1)) 	{		slicetextureVA->Unuse();		slicetextureVA->SetLength(plength << 1);		slicetexture = (PointFFixed *)slicetextureVA->Use();		slicepVA->Unuse();		slicepVA->SetLength(plength << 1);		slicep = (Point3DAllInfo *)slicepVA->Use();		slicetexture2VA->Unuse();		slicetexture2VA->SetLength(plength << 1);		slicetexture2 = (PointFFixed *)slicetexture2VA->Use();		slicep2VA->Unuse();		slicep2VA->SetLength(plength << 1);		slicep2 = (PointFFixed *)slicep2VA->Use();	}}FFixed SqrtTable[0xc0];voidInitSqrtTable(void);voidInitSqrtTable(void){	FFixed num, tempfixed;		for(num.l = 0x40; num.l < 0x100; num.l++)	{		tempfixed.l = num.l << 8;		SqrtTable[num.l - 0x40] = DblToFixed(Vsqrt(FixedToDbl(tempfixed)));	}}FFixedFastFixedSquareRoot(FFixed num){	FFixed resultval;	int shiftval;		if(num.l <= 0)	{		resultval.l = 0;		return resultval;	}		shiftval = 0;	while(num.l >= 0x00010000)	{		num.l >>= 2;		shiftval++;	}	while(num.l < 0x00004000)	{		num.l <<= 2;		shiftval--;	}	resultval = SqrtTable[(num.l >> 8) - 0x40];	FFFShift(resultval, shiftval);	return resultval;}voidInitTextureMapping(){	int i;		InitSqrtTable();	for(i=0;i<NUMOFTEMPARRAYS;i++) {		tempPFFArray[i] = new(V_Array);		tempPFFArray[i]->cArray(0, sizeof(PointFFixed), 8);		tempPFFArray[i]->Use();		tempPFFAIArray[i] = new(V_Array);		tempPFFAIArray[i]->cArray(0, sizeof(Point3DAllInfo), 8);		tempPFFAIArray[i]->Use();				tempPFFArrayB[i] = new(V_Array);		tempPFFArrayB[i]->cArray(0, sizeof(PointFFixed), 8);		tempPFFArrayB[i]->Use();		tempPFFAIArrayB[i] = new(V_Array);		tempPFFAIArrayB[i]->cArray(0, sizeof(Point3DAllInfo), 8);		tempPFFAIArrayB[i]->Use();	}	tempPFFAIArrayC = new(V_Array);	tempPFFAIArrayC->cArray(0, sizeof(Point3DAllInfo), 8);	tempPFFAIArrayC->Use();			indexPFFArray = -1;	indexPFFArrayB = -1;	indexPFFAIArray = -1;	indexPFFAIArrayB = -1;		clipvarray1 = new(V_Array);	clipvarray1->cArray(0, sizeof(Point3DAllInfo), 8);	clipvarray2 = new(V_Array);	clipvarray2->cArray(0, sizeof(PointFFixed), 8);	clipvarray1->Use();	clipvarray2->Use();		slicetextureVA = new(V_Array);	slicetextureVA->cArray(0, sizeof(PointFFixed), 8);	slicetexture = (PointFFixed *)slicetextureVA->Use();	slicepVA = new(V_Array);	slicepVA->cArray(0, sizeof(Point3DAllInfo), 8);	slicep = (Point3DAllInfo *)slicepVA->Use();	slicetexture2VA = new(V_Array);	slicetexture2VA->cArray(0, sizeof(PointFFixed), 8);	slicetexture2 = (PointFFixed *)slicetexture2VA->Use();	slicep2VA = new(V_Array);	slicep2VA->cArray(0, sizeof(PointFFixed), 8);	slicep2 = (PointFFixed *)slicep2VA->Use();}voidEndTextureMapping(){	int i;		for(i=0;i<NUMOFTEMPARRAYS;i++) {		tempPFFArray[i]->Unuse();		tempPFFArray[i]->dArray();		tempPFFAIArray[i]->Unuse();		tempPFFAIArray[i]->dArray();				tempPFFArrayB[i]->Unuse();		tempPFFArrayB[i]->dArray();		tempPFFAIArrayB[i]->Unuse();		tempPFFAIArrayB[i]->dArray();	}	tempPFFAIArrayC->Unuse();	tempPFFAIArrayC->dArray();			clipvarray1->Unuse();	clipvarray1->dArray();	clipvarray2->Unuse();	clipvarray2->dArray();		slicetextureVA->Unuse();	slicetextureVA->dArray();	slicepVA->Unuse();	slicepVA->dArray();	slicetexture2VA->Unuse();	slicetexture2VA->dArray();	slicep2VA->Unuse();	slicep2VA->dArray();	}