#include "VTypes.h"#include "TEXTPALT.h"#include "TEXTLIST.h"		// ABD TEXTURE#include "TEXTLITM.h"#include "TEXTITEM.h"#include "CVWCNTRL.h"#include "ToolDef.h"#include <string.h>#include <stdio.h>#include "VGraphic.h"#include "VMemUtil.h"#include "VGUtil.h"		// ABDWINQQQ#include "AppText.h"#include "dlogtext.h"int gWindowsSucks = FALSE;    // ABDWINQQQ global so we don't deactivate when choosing from menu							  // if you don't like this scheme then I suggest you fix it.void TextureBackPane::cPane(int flags){Rect r;	BlankPane::cPane(flags);	texture_list = NULL;	texture_list_item = NULL;	popUps = NULL;	//JAM 7OCT94 robustness	textureCmdPopUp = NULL;	//JAM 7OCT94 robustness}//JAM MEMLEAK1 FIX 25MAY94 [[[voidTextureBackPane::dPane(){	if(popUps != NULL) popUps->dArray();#if WINDOWS // jeff made me do it-- 14OCT94 JCA	//on macintosh, texturecmdpopup is added with additem to the	//itemlist, so it gets deleted by dItemList in dPane.	//on windows, though, it's its own menu and must be deleted.	if(textureCmdPopUp != NULL) textureCmdPopUp->dMenu(); 	//JAM 7OCT64 this needs to be deleted#endif // WINDOWS	BlankPane::dPane();}//JAM MEMLEAK1 FIX 25MAY94 ]]]void TextureBackPane::Display(int type, int x, int y) {Rect r, rr;TextureItem *ti = NULL;Rect dr = dataRect;int length;V_Offscreen *  thumbnail;		// Temp for thumbnail test. GJR082893		r= dataRect;	VEraseRect(&r);	if (texture_list_item)	{		ti = texture_list_item->GetTextureItem();		if (ti)		{		char str1[256];		char str2[256];		Rect r_from, r_to;		RGBColor c;		VCGrafPort tp;		VGrafDevice gd;					ti->GetTypeStr(str1);			ti->GetInfoStr(str2);			strcat(str1, " ("); 			strcat(str1, str2); 			strcat(str1, ")"); 			info_text->SetText(str1);			ti->GetName(str1);			name_text->SetText(str1);				SetRect(&r_to, dataRect.left+5,					dataRect.top+5, 					dataRect.left+32+5, 					dataRect.top+5+32);					thumbnail = ti->GetThumbnail();		// only do if thumbnail present GJR082893			if (thumbnail)				{				r_from = thumbnail->rect;					VGetPort(&tp, &gd);		// Memory may move, so reget thumb. GJR082893#if MACINTOSH				ti->GetThumbnail()->MetaTo((V_Display*)theWindow, &r_from, &r_to);#elif WINDOWS				ti->GetThumbnail()->MetaTo(this, &r_from, &r_to);#endif				VSetPort(tp, gd);				}		}		else		{			name_text->SetText(TXT_NOTEXTURE);			info_text->SetText("");		}	}    #if MACINTOSH	VSetRect(&dr, -32767, -32767, 32767, 32767);	ClipRect(&dr);	#endif // MACINTOSH		VSetPenNormal();	VSetPattern(vPatBlack);	VForeColor(&vBlack);	//JAM 9/14/94	#if WINDOWS	//line must be inside pane on windows to draw	VMoveTo(dataRect.left,dataRect.bottom-1);	VLineTo(dataRect.right,dataRect.bottom-1);	#else	VMoveTo(dataRect.left,dataRect.bottom);	VLineTo(dataRect.right,dataRect.bottom);	#endif	VSetRect(&r, dataRect.right - 15, dataRect.top, dataRect.right, dataRect.top + 15);		VEraseRect(&r);			VForeColor(&vBlack);		VInsetRect(&r, -1, -1);	VFrameRect(&r);	VInsetRect(&r, 1, 1);	VInsetRect(&r,2,2);	VForeColor(&vBlack);	VMoveTo(r.right-8,r.top+1);	VLineTo(r.right-8,r.top+9);	VMoveTo(r.right-7,r.top+2);	VLineTo(r.right-7,r.top+8);	VMoveTo(r.right-6,r.top+3);	VLineTo(r.right-6,r.top+7);	VMoveTo(r.right-5,r.top+4);	VLineTo(r.right-5,r.top+6);	VMoveTo(r.right-4,r.top+5);	VLineTo(r.right-4,r.top+5);			#if 0	length = popUps->ALength();	if(length)	{	V_PopMenu **pPopMenu;	int i;		pPopMenu = (V_PopMenu **)popUps->Use();		for(i = 0; i < length; i++,pPopMenu++)			(*pPopMenu)->Display();		popUps->Unuse();	}	#endif	V_Pane::Display(type, x, y);}void  TextureBackPane::MouseDown(Point p,long modifiers){Rect r;int length;V_PopMenu **pPopMenu;int old;long result;	if (!active) return;	if(modifiers&doubleClick)		controller->Request(NULL,msgEdit,objTexture,0);	else	{	V_Pane::MouseDown(p, modifiers);	#if WINDOWS  // ABDWINQQ [[[	{    Rect r;//	VSetRect(&r, 155, 0, 170, 15); 		// rect of popup rect	VSetRect(&r, 171, 0, 186, 15); 		// rect of popup rect JAM altered rightwise 10/4/94		if (VPtInRect(p, &r))		{		extern int gWindowsSucks;		int result;			textureCmdPopUp->Preempt();			gWindowsSucks = TRUE;			result = textureCmdPopUp->PopUp(this,p,0);            gWindowsSucks = FALSE;			textureCmdPopUp->Action(result,modifiers);        }	}	#endif // MACINTOSH ABDWINQQ ]]]	#if 0		length = popUps->ALength();		if(length)		{		V_PopMenu **pPopMenu;		int i;			pPopMenu = (V_PopMenu **)popUps->Use();			for(i = 0; i < length; i++,pPopMenu++)				(*pPopMenu)->MouseDown(p, modifiers);			popUps->Unuse();		}	#endif	}}	void TextureBackPane::MouseUp(Point p,long modifiers){		if (!active) return;	V_Pane::MouseUp(p,modifiers);}void  TextureBackPane::Track(Point p,long modifiers,int lastCall){	VSetCursor(vCursorArrow);	textureCmdPopUp->Preempt();	V_Pane::Track(p, modifiers, lastCall);}	void TextureBackPane::CalcSize(Rect *r,Point *p,int type,int warning){	#if WINDOWS	r->bottom = r->top+50;    #else	r->bottom = r->top+49;    #endif}void TextureBackPane::SetTextureList(TextureList *tl) {Rect r;VStyleRec	theStyle;	// MERGE-GOURAUD-PRO-7	texture_list = tl;		ObjLock(this);	name_text = new(V_Text);	name_text->cItem();	AddItem(name_text);		// MERGE-GOURAUD-PRO-7 [[[	theStyle.just = vJustLeft;	theStyle.size = 9;	theStyle.font = vAppFont;	theStyle.face = vBold;	theStyle.textFlags = TEXT_AUTOFORMAT|TEXT_ERASE;	name_text->SetStyle(&theStyle);	// MERGE-GOURAUD-PRO-7 ]]]	VSetRect(&r, 40, 8, 150, 21);	name_text->SetRect(&r);	info_text = new(V_Text);	info_text->cItem();	AddItem(info_text);		// MERGE-GOURAUD-PRO-7 [[[	theStyle.just = vJustLeft;	theStyle.size = 9;	theStyle.font = vAppFont;	theStyle.face = vDefTextFace;	theStyle.textFlags = TEXT_AUTOFORMAT|TEXT_ERASE;	info_text->SetStyle(&theStyle);	// MERGE-GOURAUD-PRO-7 ]]]	VSetRect(&r, 40, 22, 170, 35);	info_text->SetRect(&r);	popUps = new(V_Array);	popUps->cArray(0, sizeof(struct V_PopMenu *), 4);//	texturePopUp = new(TexturePopMenu);//	texturePopUp->ctheMenu(D_TEXT_FONT,D_TEXT_FACE,D_TEXT_SIZE);//	texturePopUp->SetTextureList(tl);//	popUps->Append(&texturePopUp);	textureCmdPopUp = new(TextureCmdsPopMenu);#if MACINTOSH // ABDWINQQQ	textureCmdPopUp->cItem();	AddItem(textureCmdPopUp);#else // MACINTOSH ABDWINQQQ	textureCmdPopUp->cMenu("", tl->back_pane->controller->document);	textureCmdPopUp->AddItems();#endif // MACINTOSH ABDWINQQQ#if MACINTOSH // ABDWINQQQ	VSetRect(&r, 155, 0, 170, 15);	textureCmdPopUp->SetRect(&r);#endif // MACINTOSH ABDWINQQQ//JAM PORTTOWINQQQ#if MACINTOSH	textureCmdPopUp->SetCheckCurrentValue(FALSE);#endif	textureCmdPopUp->SetTextureList(tl);	textureCmdPopUp->SetController((CAVWalkController*)tl->back_pane->controller);	popUps->Append(&textureCmdPopUp);	ObjUnlock(this);}void TextureBackPane::SetTextureListItem(TextureListItem *tli) {char str[256] = "";TextureItem *ti = NULL;	texture_list_item = tli;	if (texture_list_item)		ti = texture_list_item->GetTextureItem();}voidTexturePopMenu::ctheMenu(int font,int face,int size){#if 0	Rect r;	PopMenu::ctheMenu(font,face,size);	r.left = 5;	r.top = 4;	r.right = 130;	r.bottom = 22;	SetRect(&r);	PopTitle(TXT_NOTEXTURE);	SetCurrent(0);	Append(TXT_NOTEXTURE);#endif}voidTexturePopMenu::SetTextureList(struct TextureList *tl){	texture_list = tl;}	voidTexturePopMenu::Display(){#if 0	PopMenu::Display(activeFlag);#endif}intTexturePopMenu::DoPopUp(Point p,long modifiers,int which){#if 0int result,oldChoice,newType;	oldChoice = current;	result = PopMenu::DoPopUp(p,modifiers,which);	if(oldChoice!= current && (0<=current))	{		// set the current texture item to (current)		// set the title of this popup to the texture item (current)	}	return(result);#endif}voidTextureCmdsPopMenu::AddItems(){#if 0	Rect r;	PopMenu::ctheMenu(font,face,size); 	PopTitle("");	SetCurrent(1);#endif	//Append("New Texture...");		// MERGE-GOURAUD-PRO-5	/*	Append("Delete Texture...");	Append("Duplicate Texture");	AppendSeparator();	Append("Texture Options...");	AppendSeparator();	Append("Add Textures...");*///JAM changed order 6/26/94	Append(TXTRCMDSPOPADD);//	AppendSeparator();	Append(TXTRCMDSPOPDEL);	Append(TXTRCMDSPOPDUP);	AppendSeparator();	Append(TXTRCMDSPOPOPT);#if WINDOWS           // wont compile on Mac JAN95	SetEuroKey(menuLoadTextures, menuLoadTexturesEuroKey);	SetEuroKey(menuDeleteTexture, menuDeleteTextureEuroKey);	SetEuroKey(menuDuplicateTexture, menuDuplicateTextureEuroKey);	SetEuroKey(menuEditTexture, menuEditTextureEuroKey);#endif // WINDOWS}	voidTextureCmdsPopMenu::Display(){	}voidTextureCmdsPopMenu::SetTextureList(struct TextureList *tl){	texture_list = tl;}voidTextureCmdsPopMenu::SetController(struct CAVWalkController *c){	controller = c;}voidTextureCmdsPopMenu::Preempt(){//JAM PORTTOWINQQQTextureListItem *tli;//TextureDialog	*txtDialog;TextureItem *ti;	if (!texture_list) return;		tli = texture_list->GetTextureListItem();	if (tli != NULL)		ti = tli->GetTextureItem();			#if MACINTOSH		popMenu->Activate(menuDeleteTexture, (ti != NULL));	popMenu->Activate(menuDuplicateTexture, (ti != NULL));	popMenu->Activate(menuEditTexture, (ti != NULL));#else	Activate(menuDeleteTexture, (ti != NULL));	Activate(menuDuplicateTexture, (ti != NULL));	Activate(menuEditTexture, (ti != NULL));#endif // MACINTOSH}/*------------------------------------------------------------------------------ * int  V_Menu::PopUp(Point corner,int startItem); * Point corner; top left corner of selected menu item. * int startItem; the item displayed over the top. * * This is the pop-up menu function.  It needs to be a heirarchical menu.  Call * this method with the point set to where you want the pop-up to be. * *------------------------------------------------------------------------------*/#if 0int TextureCmdsPopMenu::PopUp(Point corner, int startItem){long result;int res;MakeMenu(HEIRMENU);Preempt();result=PopUpMenuSelect(menu,corner.v,corner.h+15,0);UnmakeMenu();res=result&0xFFFF;return(res);}#endif/*------------------------------------------------------------------------------ * void V_Menu::Select(int iNum, int stte) * Select places or removes a check mark in the specified item, iNum.  It also * sets the state bit flag for this item.  Note that you can only set the state * bit flag if there are less then 31 items, otherwise the flag is simply * ignored. *------------------------------------------------------------------------------*/void TextureCmdsPopMenu::Select(int iNum, int stte){// do nothing}void#if MACINTOSH  // ABDWINQQQ  [[[TextureCmdsPopMenu::Action()#else // MACINTOSHTextureCmdsPopMenu::Action(int iNum, long modifiers)#endif // MACINTOSH ABDWINQQQ ]]]{TextureListItem *tli;TextureDialog	*txtDialog;int defPref,result = 0 ;char str[256];	if (!texture_list) return;		tli = texture_list->GetTextureListItem();    #if MACINTOSH // ABDWINQQQ [[[	switch (GetValue())	#else	switch (iNum)    #endif // MACINTOSH ABDWINQQQ ]]]	{		case menuLoadTextures: 		/* ABD */			if (controller->AddTextures())				controller->SetChange(TRUE);		// mark file as dirty			break;		case menuSaveTextures: 		/* ABD */			break;		case menuDeleteTexture:			if (tli != NULL)			{			TextureItem *ti = tli->GetTextureItem();							if (ti != NULL)				{				char tName[256];									ti->GetName(tName);										if (ti->IsUsedInDocument())						{						sprintf(str,TXTRABOUTTODEL1,tName);						}					else                    	{						sprintf(str,TXTRABOUTTODEL2,tName);						}					if (WarningMessage(str,TXT_TXTRDELETE,TXTC_CANCEL,POSITIVE_BUTTON_ONE|DEFAULT_BUTTON_TWO))					{					TextureList *tl = ((TextureList*)(tli->list_pane));											// make objects using this item not textured						ti->NoTexture();												tl->RemoveItem();												ti->dTextureItem();											}				}				controller->Request(NULL,msgUpdate,objPolyhedron,0);			controller->Request(NULL,msgUpdate,objTextureList,0);			controller->Request(NULL,msgUpdate,objView,0);			}								break;		case menuDuplicateTexture:			if (tli != NULL)			{			TextureItem *ti = tli->GetTextureItem();							if (ti != NULL)				{				TextureItem *new_ti = ti->Duplicate(); 									// add texture item to palette list					((TextureList*)(tli->list_pane))->AddItem2(new_ti);								}			}			break;		case menuEditTexture:			if (tli != NULL)			{			TextureItem *ti = tli->GetTextureItem();							if (ti != NULL)				{					txtDialog = new(TextureDialog);					txtDialog->cTextureDialog(controller);				}			}			break;		default:			break;	}}