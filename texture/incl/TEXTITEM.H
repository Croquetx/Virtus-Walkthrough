/*------------------------------------------------------------------------------ * WalkThroughª - the real time 3-D CAD system. * Version 0.1 * * Copyright © 1989 by Virtus Corporation * All Rights Reserved * Written by  	Andrew B. Davidson * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * TextureItem.h *------------------------------------------------------------------------------ */#ifndef _TEXTURE_ITEM_#define _TEXTURE_ITEM_#include "TextType.h"#include "WTypes.h"		// ABD MERGE13enum mappingTypes	{	mapNormal = 0,	mapCubic,	mapCylindrical,	mapCylindricalCap,	mapSpherical	};struct TextureSettings {		char name[64];					// texture item logical name		int decal, shade, colorize;				// Boolean		FFixed hSlide, vSlide, rotate;		int hFlip, vFlip, hMirror, vMirror;		// Boolean		FFixed hTiles, vTiles;		FFixed hPixels_per_unit,vPixels_per_unit;		int hUnit, vUnit;		int use_real_world_size_h,use_real_world_size_v;	// Boolean		int mapping;};// Shade Entry -- there are as many of these as shading levels.  For a given shading// level, the corresponding shade entry contains pointers to 4 arrays of 256 entries// each that have the dither values for that color.struct ShadeEntry {	unsigned char *dith[4][4];		// CLUT indices (four of them to do dithering)									// (if not CLUT-based, contains actual pixel values)									// JAM added dimension 0-1bit 1-2bit 2-4bit 3-4bit	Long  *color4x1[2];				// 4bit planar			//gjr 12/15/93	Long  *truecolor;				// JAM 32 bit shading table	Short *color16bit;				// JAM 16 bit shading table	Long  *color24bit;				// JAM 24 bit shading table	struct V_Array *va[4][4];		// MERGE32	struct V_Array *color4x1va[2];	// add 4bit planar		//gjr 12/15/93	struct V_Array *truecolorva;	// MERGE32	struct V_Array *color16bitva;	// MERGE32	struct V_Array *color24bitva;	// MERGE32};typedef struct ShadeEntry ShadeEntry;struct TextureRendSettings {			// ABD TEXTURE		int decal, colorize;					// Boolean		int hFlip, vFlip, hMirror, vMirror;		// Boolean		ShadeEntry *textureShade;		// texture shading array		struct V_Offscreen *mip[MAX_NUM_MIPS];	// offscreen mip maps (0 == main picture)		Rect mip_rect[MAX_NUM_MIPS];	// offscreen mip map rects (unpadded, always powers of 2 width/height)		RGBColor filtered_color;		// the color of a 1x1 mip map};/*-------------------------------------------------------------------------------*//*	TEXTURE ITEM -- a pointer to this object is stored in the texture arrays	and textured objects.  It stores document-level info for this texture.  There	may be many of these (with different logical names) all pointing to the 	same texture.  There is one of these for every texture used in the 	document, including textures that have been added but are not used by any object 	in the model.*/struct TextureItem:indirect	{		/* ------ TEXTURE STYLE SHEET SETTINGS ------ */				struct TextureSettings settings;		/* ------ LOW-LEVEL VARIABLES ------ */						struct TextureArray *parent;			// the texture array this item is in		struct Texture *texture;				// the texture this item represents		int doc_use_count;						// number of uses by model objects		int use_count;							// number of uses by non-model things (e.g. texture picker)		struct V_Array *polys;					// model polys using this texture item		struct V_Array *surfs;					// model surfs using this texture item		struct V_Array *feats;					// model feats using this texture item		long id;								// id for i/o, NON_IO_ID if not involved in i/o		int old_style_index;					// index for old style beta files		/* ------ TEXTURE TYPE ROUTINES ------ */		void GetFileLoc(struct VfsLocation *);								//GJR 10/06/93		int SetupFrame(void);		struct V_Offscreen *GetPicture(int);		void GetPaddedRect(Rect*, int);		void GetUnpaddedRect(Rect*, int);		RGBColor GetFilteredRGB(void);		void GetFullPathStr(char*);		void GetInfoStr(char*);		void GetTypeStr(char*);		int IORef(V_Buffer *);				int IOOff(V_Buffer *);		 #if (!VPLAYER)		int SetThumbnail(struct V_Offscreen *); #endif // (!VPLAYER)		int SetOffscreen(struct V_Offscreen *);     // ABD MERGE-BUG 17MAR94		/* ------ HIGH LEVEL ROUTINES ------ */						void cTextureItem(struct TextureArray *);	// create a texture item		void dTextureItem(void);					// delete a texture item		int DocUsePoly(struct Polyhedron *);		// use a texture item in a document													// pass ptr to object using texture		void DocUnusePoly(struct Polyhedron *);		// stop using a texture item in a document													// pass ptr to object that was using texture		int DocUseSurf(struct SurfDef *);			// use a texture item in a document													// pass ptr to object using texture		void DocUnuseSurf(struct SurfDef *);		// stop using a texture item in a document													// pass ptr to object that was using texture		int DocUseFeat(struct SurfFeature *);		// use a texture item in a document													// pass ptr to object using texture		void DocUnuseFeat(struct SurfFeature *);	// stop using a texture item in a document													// pass ptr to object that was using texture		int TIUse(void);	//DAS-LK 10/2/93	// use a texture item for a non-document use		void TIUnuse(void);	//DAS-LK 10/2/93	// stop using a texture item for a non-document use		void ApplyTexture(void);				// reapply texture to everything that uses it		void SetDefaults(void);					// 		struct TextureItem *Duplicate(void);			// 		void UniqueName(void);					// 			void GetName(char *);					// sets string to name of texture item		// ABD changed to return err (3 routines) 12/9/39		int TextureFileLoc(struct VfsLocation*);		// set texture instance var based on file info		int TextureVFile(struct V_File *);				// set texture instance var based on V_File info		int TextureChunk(struct V_File *, long);		// set texture instance var based on V_File info		int SetVideoDigitizer(short, short);			// set video digitizer board		int TextureOffscreen(void);     				// ABD MERGE-BUG 17MAR94		void MergeInto(struct TextureItem *);	// combine two texture items		void Merge(struct TextureItem *);		// combine two texture items		int MakeReal(void);						// turn placeholder texture item into real one		void NoTexture(void);					// set objects using texture item to no texture		void ChangeSource(struct V_File *);			// make this texture item use a different source texture		void ChangeSourceChunk(struct V_File *, long); // make this texture item use a source chunk#if (!VPLAYER)		struct V_Offscreen *GetThumbnail(void);	// returns ptr to texture thumbnail		//GJR 10/06/93		Rect GetThumbnailRect(void);			// jca 18 Oct 93 returns the thumb's rect#endif // (!VPLAYER)		int IsUsedInDocument(void);				// TRUE if texture is used in document		int IsUsed(void);						// TRUE if texture used (but not in document)		/*----LOW LEVEL CALLS----*/		int LoadPicture(void);					// 		void UnloadPicture(void);				// 		int IO(struct V_Buffer *);						// read/write texture item (local id, name, etc.)	};#endif //_TEXTURE_ITEM_  // DAS-C++ 10/2/93