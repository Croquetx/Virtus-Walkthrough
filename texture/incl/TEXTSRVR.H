/*------------------------------------------------------------------------------ * WalkThroughª - the real time 3-D CAD system. * Version 0.1 * * Copyright © 1989 by Virtus Corporation * All Rights Reserved * Written by  	Andrew B. Davidson * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Texture.h * Definitions for Texture, TextureItem, TextureArray, TextureServer *------------------------------------------------------------------------------ */#ifndef _TEXTURE_SERVER_#define _TEXTURE_SERVER_#include "VTypes.h"#if MACINTOSH   // jca 7JAN94#include <QuickTimeComponents.h>#endif  // MACINTOSH#include "TextItem.h"#define NON_IO_ID 			-1		// texture not involved in i/o#define NO_TEXTURE_IO_ID 	-2		// texture is NIL, but should be saved anyway// ABD TEXTURE#define NUM_TEXTURE_SHADING_LEVELS 32#define NTSLMO (NUM_TEXTURE_SHADING_LEVELS-1)	// NUM_TEXTURE_SHADING_LEVELS minus one// REMOVE #define NUM_TEXTURE_SHADING_INDICES 256         // GJR 12/10/93// Texture Shader is an array of shade entries -- each shade entry contains pointers// to 4 arrays of 256 elementstypedef ShadeEntry *TextureShader;		typedef struct{#if MACINTOSH	VideoDigitizerComponent vdig;#endif //MACINTOSH	char name[256];} VDIGstruct;/*---------------------------------------------------------------------------------*//*	TEXTURE ID SERVER*/struct TextureServer:indirect	{		/* ------ INSTANCE VARIABLES ------ */		struct V_Array *textures;								// array of Textures		struct V_Array *vdigs;									// array of video digitizers		long lock_count;									// texture lock count						struct TextureArray *io_textures;				// array of TextureItems for i/o		long next_id;									// next id to assign for i/o        #if VPRO		short EmbedTexturesFlag;						// flag whether or not to embed textures        #endif		/* ------ HIGH LEVEL ROUTINES ------ */						void cTextureServer(void);						// create texture server		void dTextureServer(void);						// delete texture server		void OpenVDIGs(void);							// open video digitizers		void CloseVDIGs(void);							// close video digitizers		void AddVDIGs(struct TextureArray *);			// add video digitizers to array				void LockTextures(void);						// lock textures		void UnlockTextures(void);						// unlock textures				struct Texture *NewTexture(int);				// create texture      void RemoveTexture(struct Texture *);		// remove texture from textures array		void LoadTexturesOldStyle(struct V_File *);			// loads textures old style		struct TextureItem *FindOldStyle(int);			// find texture item old style		int FindInCustomPicts(struct V_File *);		// MERGE24		void BeginTextureIO(V_Buffer *,							struct TextureArray *);		// begin texture list accumulation		void BeginTextureIOLib(V_Buffer *,							struct TextureArray *);		// MERGE24		struct TextureItem *IDtoTexture(long);			// returns texture item for given id		long TexturetoID(struct TextureItem *);			// returns id for given texture item		void EndTextureIO(struct V_Buffer *);					// stop texture list accumulation		void EndTextureIOLib(struct V_Buffer *);				// stop texture list accumulation		int IOTextureTable(struct V_Buffer *, int);					// i/o texture table		int IOTextureLibrary(struct V_Buffer *);					// i/o texture table		struct TextureItem	*VRFindTextureByFileName(struct V_File *);	// MERGE24		struct TextureItem  *VRFindTextureByName(char *);             // jca 21JAN94		int SameName(struct TextureItem *, struct TextureItem *);		int SameFile(struct TextureItem *, struct TextureItem *);		int SameSettings(struct TextureItem *, struct TextureItem *);		int MergeIfSame(struct TextureItem *, struct TextureItem *);		int MergeIfSameVR(struct TextureItem *, struct TextureItem *);				void RemoveDocTextures(void);				void DeleteTextureShadeTable(void);		// MERGE32		void CalcTextureShadeTable(struct V_Offscreen *);	        #if VPRO		short GetEmbedTextures(void);							// see if embed textures flag is set		void SetEmbedTextures(short);                        // set value of embed textures flag		#endif		/* ------ LOW LEVEL ROUTINES ------ */		// find Texture with given file loc		struct Texture *GlobalFindByFileLoc(struct VfsLocation*);		//GJR 10/06/93		struct Texture *GlobalFindChunkByLocAndPos(struct VfsLocation *, long); //JAM  8/9/94 //MERGE-PRO-JAM-1	};extern struct TextureServer *gTextureServer;// moved into the class jca 21JAN94//struct TextureItem *VRFindTextureByName(char *);#endif //_TEXTURE_SERVER_