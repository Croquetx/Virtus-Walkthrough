#include "VTypes.h"#include "WTypes.h"#include "ShowTest.h"			// !!! DEBUG#include "VDisplay.h"#include "VFile.h"#include "VMemUtil.h"#include "VGUtil.h"#include "VGraphic.h"#include <string.h>#include <stdio.h>#include "VError.h"		// jca 4 Oct 93#include "TextType.h"			//after vfile		//GJR 10/06/93#include "AppText.h"		// jam 31Oct94#if MACINTOSH#include <Components.h>#endif/*------------------------------------------------------------------------------*//*	This routine */void TTPICT::cTextureType(){	char str[256];	sprintf(str,"%s",TXT_EMBED);	//jam 31oct94	TextureType::cTextureType();	strcpy(type_str, str);}/*------------------------------------------------------------------------------*//*	This method assumes that the texture->file has been set up appropriately (i.e.	it is a reference to a file).  This method will load the picture file, save	a smaller version of the picture in the thumbnail, and then delete the picture.	The picture will be loaded for real when the texture is actually used in a model	or selected in the texture selector.  (If no objects are selected and we choose	a texture from the palette, then we load the texture immediately.  Otherwise	there will be a delay if we try to create a new object -- the texture will be	loaded after we release the mouse button, while the marquee is still visible,	kinda ugly, and also may cause bugs because many routines do not expect the	port to be reset from underneath them (even though IOPictFile should not in	theory do that).  There is definitely a bug in there somewhere, probably the	fact that Set/UnsetMetaPort are not nestable.		!!! see comments in routine for what it actually does.*/int TTPICT::LoadPicture(){		// do nothing	return noErr;}/*------------------------------------------------------------------------------*//*	This routine */void TTPICT::UnloadPicture(){		// do nothing}/*------------------------------------------------------------------------------*//*	This routine */int TTPICT::SetOffscreen(V_Offscreen *off){	int error = 0;extern int lowMemory;VCGrafPort savePort;VGrafDevice saveDevice;Rect unpad_rect;		// VPRO	VGetPort(&savePort,&saveDevice);	if (!mip[0])	{	Rect r_from, r;	short power;	short width;				if (off == NULL) 			error = -1;		if (!error)		{			off->GetRect(&r_from);			unpad_rect = r_from;		// VPRO						// make the horizontal size a power of two			r = r_from;			power = 2;			width = r_from.right - r_from.left;			while (power < width)				power <<= 1;			power = min(power, 1024);		// max out at 1024, protects flash texture							r.right = r.left + power;			// make the vertical size a power of two			power = 2;			width = r_from.bottom - r_from.top;			while (power < width)				power <<= 1;							power = min(power, 1024);		// max out at 1024, protects flash texture							r.bottom = r.top + power;						mip[0] = NULL; 	// initialize			// check for degenerate cases			if (((r.bottom - r.top) == 0) || ((r.right - r.left) == 0))			{            	// ELVIS!!!! need a better error code				error = -1;	// jca 22MAR94 this is an error (there's probably a better error code)			}			if (lowMemory)	error = memFullErr;		}				if (!error)		{		// MERGE-PIXEL8 [[[		V_Offscreen *temp_off = NULL;					temp_off = new(V_Offscreen);	// create temp offscreen			if (temp_off == NULL)				goto handle_error;						error = temp_off->cOffscreen(&r, 8, &vWhite, NULL);			if (error) goto handle_error;							// copy pict to temp offscreen			off->SetMetaPort();		// MERGE-1/26			temp_off->SetMetaPort();		// MERGE-1/26			off->MetaTo(temp_off, &r_from, &r);			temp_off->UnsetMetaPort();		// MERGE-1/26			off->UnsetMetaPort();		// MERGE-1/26						// copy temp offscreen to Pixel8            // jca 22MAR94 [[ moved this code down here			mip[0] = new(V_Pixel8);			if (mip[0] == NULL)				{							error = memFullErr;                goto handle_error;				}							error = mip[0]->cCreateCopy(temp_off);			if (error || lowMemory)				{				if (!error)	error = memFullErr;				mip[0] = NULL;                goto handle_error;                }			// jca 22MAR94 ]] end moved code			unpadded_rect[0] = r_from; 			temp_off->dOffscreen();		// get rid of temp offscreen			temp_off = NULL;            // jca 22MAR94			goto no_error;handle_error:			if (mip[0] != NULL) mip[0]->dPixel8();			mip[0] = NULL;			if (temp_off)  // jca 22MAR94 also clean up the temp_off            	{				temp_off->dOffscreen();		// get rid of temp offscreen				temp_off = NULL;                }no_error:			;		// MERGE-PIXEL8 ]]]		}	}	// VPRO [[[	ObjLock(this);		#if JAPANESE	sprintf(info_str, "%s%d x %s%d", TXTD_HRZSIZE, unpad_rect.right-unpad_rect.left, TXTD_VRTSIZE, unpad_rect.bottom-unpad_rect.top);#else	sprintf(info_str, "%d%s x %d%s", unpad_rect.right-unpad_rect.left, TXTD_HRZSIZE, unpad_rect.bottom-unpad_rect.top, TXTD_VRTSIZE);#endif	ObjUnlock(this);	// VPRO ]]]	//ShowMem(FALSE);	VSetPort(savePort,saveDevice);	return (error);}