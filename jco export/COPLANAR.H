/* *	CoPlanar.H * *	Copyright 1995 Virtus Corporation *	All rights reserved. *  Jonathan C. Owen *  Created 95.12.15 */ #ifndef _COPLANAR_ #define _COPLANAR_#include "Surface.h"#include "POLYHDRN.H"class Plane {	friend class CoPlanarSet;	friend class TransfNOAP;    	Point3Ddouble normal;    	double distToOrigin;}; // plane def'n#define JCOSMALL .00001double DotP3Dd( Point3Ddouble *a, Point3Ddouble *b );void NormalizeP3Dd( Point3Ddouble *pi, Point3Ddouble *po );void CrossP3Dd( Point3Ddouble *a, Point3Ddouble *b, Point3Ddouble *c);class TransfNOAP {	Point3Ddouble n,o,a,p;		public:	TransfNOAP(  ) {		n.x = o.y = a.z = 1.0;		n.y = n.z = o.x = o.z = a.x = a.y = p.x = p.y = p.z = 0.0;	};		~TransfNOAP(void){};	void TransP3D( Point3Ddouble *pi, Point3Ddouble *po );	void invertTrans( TransfNOAP *t );	void transFromPlane( Plane *pln );}; // transformclass shardPoly {public:	friend class CoPlanarSet;	V_Array *pgon; // for now, this is point3ddouble	RGBAColor clr;	int planeIndex;	// will need transparency info, too};class Facet {	friend class CoPlanarSet;	shardPoly face;	Surface *sfc;	struct V_Array *features[3];	int inPlaneDir;};class CoPlanarSet {public:	friend class Export_Shard;	V_Array *facets;	V_Array *inside;	V_Array *outside;	V_Array *vertices;	V_Array *planes;	TransfNOAP proj2d;	TransfNOAP proj3d;	void Add( Surface *sfc, RGBAColor clr );	void Build(Polyhedron *poly);	void Create(Polyhedron *poly);	int CoPlanar( Plane p, Point3Ddouble nrml, double dist);	V_Array *clipSetSet( V_Array *pset, V_Array *clipset );	V_Array *clipPolySet( shardPoly *bpoly, V_Array *front );	void clipSfcs();	V_Array *polySetFromFacet( Facet *fptr, int Forward );	void outputPolys( double unit_conversion, V_Buffer *buf );	V_Array *clipInDir(int Forward);	void outputPolySet(double unit_conversion, V_Buffer *buf, V_Array *pset, int Clockwise);	int isClockwise( shardPoly *pptr, short first, short second, short third );	shardPoly polyFromSfc( Surface *sfc );	int vertIndex( Point3Ddouble pnt );	V_Array *clipPolyPoly(shardPoly *ain, shardPoly *bin, TransfNOAP *to2d, TransfNOAP *to3d);	int clumpPolyPoly(shardPoly *ain, shardPoly *bin, TransfNOAP *to2d, TransfNOAP *to3d, shardPoly *pout);	V_Array *convexConnectivity(shardPoly *ain, TransfNOAP *to2d);};#endif   _COPLANAR_