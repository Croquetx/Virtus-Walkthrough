.TH ERR 3 "25 July 1990" local "Utility routines".SH NAME warning, error, fatal \- consistent error handling.SH SYNOPSIS#include <setjmp.h>.br#include <err.h>.LPwarning( fmt, ... ).brchar *fmt;.LPerror( fmt, ... ).brchar *fmt;.LPfatal( fmt, ... ).brchar *fmt;.LPfatal_nr( nr, fmt, ... ).brint	nr;.brchar *fmt;.LPextern int err_nr_errors, err_nr_warnings;.brextern int *err_warning_jmpbuf, *err_error_jmpbuf, *err_fatal_jmpbuf;.SH DESCRIPTIONThese routines provide a way to handle all kind of errors in a consistent way.The differences between the routines are:.I warning()is intended to be used when the error encountered is to be reported, butwill probably not harm the result..I error()should be called when the error will harm the result (it will probably not be valid), but execution can continue;.I fatal()should be called when the error means that the program can not continue..I fatal()will exit with a return value of 1;.I fatal_nr()will exit with the return value.I nr..brThe integers.I err_nr_warningsand .I err_nr_errorshold the number of time these routines are called..brThe.I err_*_jmpbufvariables are pointers to a .I jmp_buf.When these are not NULL they should point to a valid.I jmp_buffor use by.I longjmp(3).In this way the program can catch errors as generated by these routines..SH ARGUMENTSThe string.I fmtand trailing arguments are handled in the way of.I printf(3)..SH SEE ALSOsetjmp(3), printf(3), fprintf(3), exit(3)..SH AUTHORKlamer Schutte, klamer@mi.el.utwente.nl