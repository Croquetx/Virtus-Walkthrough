/*------------------------------------------------------------------------------ * VWINDOWSª - the window object toolbox * * Copyright c 1991 by Virtus Corporation * All Rights Reserved * Written by David A. Smithx * Virtus Corporation * 117 Edinburgh So * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * FLASH.c *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VMath.h"#include "Clip.h"#include "Flash.h"/*these two routines clip a line segment vertically (crossed by a horizontal line)  and horizontally (crossed by a vertical line), replacing the first pair of points  with the clip intersection */voidClipLineVertical(FFixed *FFx1, FFixed *FFy1, FFixed FFyclip, FFixed *FFx2, FFixed *FFy2){	FFixed tempfixed, ratio;		tempfixed.l = FFy2->l - FFy1->l;	ratio.l = FFyclip.l - FFy1->l;	ratio = FFDiv(ratio, tempfixed);	tempfixed.l = FFx2->l - FFx1->l;	tempfixed = FFMult(ratio, tempfixed);	FFx1->l += tempfixed.l;	FFy1->l = FFyclip.l;}voidClipLineHorizontal(FFixed *FFx1, FFixed *FFy1, FFixed FFxclip, FFixed *FFx2, FFixed *FFy2){	FFixed tempfixed, ratio;		tempfixed.l = FFx2->l - FFx1->l;	ratio.l = FFxclip.l - FFx1->l;	ratio = FFDiv(ratio, tempfixed);	tempfixed.l = FFy2->l - FFy1->l;	tempfixed = FFMult(ratio, tempfixed);	FFy1->l += tempfixed.l;	FFx1->l = FFxclip.l;}/*clips line to rectangle by clipping to each side.  assumes y2 > y1*//*  the clip is moved in by 1/4 unit on each side to avoid problems with drawing  on the right or left edge of the clip, which is outside the clip*/intClipLineToRect(Rect rclip, FFixed *FFx1, FFixed *FFy1, FFixed *FFx2, FFixed *FFy2){	FFixed FFcliptop, FFclipbottom, FFclipleft, FFclipright;		FFcliptop.intg = rclip.top;	FFclipbottom.intg = rclip.bottom;	FFclipright.intg = rclip.right;	FFclipleft.intg = rclip.left;	FFcliptop.frac = FFclipbottom.frac = FFclipright.frac = FFclipleft.frac = 0;	/*move the clip in by 1/4th so that valid values will be      on or inside the clip*/	FFcliptop.l += FixedPointFive.l>>1;	FFclipbottom.l -= FixedPointFive.l>>1;	FFclipleft.l += FixedPointFive.l>>1;	FFclipright.l -= FixedPointFive.l>>1;	/*valid values are on or inside the clip.  We clip off any      pieces which are outside the clip*/	if((FFx1->l < FFclipleft.l) && (FFx2->l >= FFclipleft.l)) {		ClipLineHorizontal(FFx1, FFy1, FFclipleft, FFx2, FFy2);	}	else if((FFx2->l < FFclipleft.l) && (FFx1->l >= FFclipleft.l)) {		ClipLineHorizontal(FFx2, FFy2, FFclipleft, FFx1, FFy1);	}	if((FFx1->l > FFclipright.l) && (FFx2->l <= FFclipright.l)) {		ClipLineHorizontal(FFx1, FFy1, FFclipright, FFx2, FFy2);	}	else if((FFx2->l > FFclipright.l) && (FFx1->l <= FFclipright.l)) {		ClipLineHorizontal(FFx2, FFy2, FFclipright, FFx1, FFy1);	}    /*we know FFy1 <= FFy2, so only have to check one direction*/	if((FFy1->l < FFcliptop.l) && (FFy2->l >= FFcliptop.l)) {		ClipLineVertical(FFx1, FFy1, FFcliptop, FFx2, FFy2);	}	if((FFy2->l > FFclipbottom.l) && (FFy1->l <= FFclipbottom.l)) {		ClipLineVertical(FFx2, FFy2, FFclipbottom, FFx1, FFy1);	}	/*if one point is inside (on or within) rect now, both are.*/	if((FFy1->l >= FFcliptop.l) && (FFy1->l <= FFclipbottom.l) &&	   (FFx1->l >= FFclipleft.l) && (FFx1->l <= FFclipright.l)) 	{#if DEBUG	/*dummy check.  See if the other point really is inside*/	if((FFy2->l < FFcliptop.l) || (FFy2->l > FFclipbottom.l) ||	  (FFx2->l < FFclipleft.l) || (FFx2->l > FFclipright.l))     DEBUGGER();#endif		return(0);    //there is something to draw	}	else 	{		return(-1);   //clipped out of existance	}}