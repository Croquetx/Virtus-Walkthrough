/*------------------------------------------------------------------------------ * VWINDOWSt - the window object toolbox * * Copyright c 1991 by Virtus Corporation * All Rights Reserved * Written by David A. Smith * Virtus Corporation * 117 Edinburgh So * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * F32.c *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VMath.h"#include "VToolBox.h"#include "VDisplay.h"#include "VGUtil.h"#include "Clip.h"#include "Flash.h"#include "Gouraud.h"			// MERGE-GOURAUD/*------------------------------------------------------------------------------ * Define the function names *------------------------------------------------------------------------------ */#define FLine FLine32#define FLineClip FLineClip32#define FlashFill FlashFill32#define FlashClip FlashClip32#define FFixedFLine FFixedFLine32#define FlashGouraud 		FlashGouraud32			// MERGE-GOURAUD#define FlashGouraudClip 	FlashGouraudClip32		// MERGE-GOURAUD/*------------------------------------------------------------------------------ * Define the two major data types. *------------------------------------------------------------------------------ */// 32bit stores 4 bytes per pixel.// THIS FORMAT IS DIFFERENT FROM ALL OTHER SUB-32 FORMS.// SO TOTALLY DIFFERENT CODE IS USED.typedef ULong VColorType[1];typedef ULong GColorType;		// MERGE-GOURAUDtypedef struct{	LPLONG lptr;	long firstByte;} PixType;/*------------------------------------------------------------------------------ * AutoInit your static data areas here. *------------------------------------------------------------------------------ *//*------------------------------------------------------------------------------ * Define the macro pixel routines. * For additional information about this code, see the Flash.c sources. *------------------------------------------------------------------------------ */// rightmost bit per color is in first plane (lsb order)#define InitColorPen(color,rgb) { color[0] = offscreen->GetDither(rgb); }#define InitColorBrush(color,rgb) {InitColorPen(color,rgb);}// MERGE-GOURAUD [[[// this macro inits the color index based on the rgb -- index will range from 0..255// at most, and will be less for bit depths 1/2/4.  The index is an index into the standard color// table; index is an unsigned char, rgb is an RGBColor#define InitColorIndex(index,rgb) { index = rgb; }// MERGE-GOURAUD ]]]#define InitPixel(pix,xval,yval,to) {pix.lptr=(ULong*)to->baseAddress; \	pix.lptr+=((xval-to->xOffset)); \	pix.firstByte = (yval-to->yOffset)*(long)(to->rowBytes); \	pix.lptr+=(pix.firstByte>>2); }/*#define InitPixel(pix,xval,yval,to) {\    pix.lptr = (LPLONG)((LONG)to->baseAddress+(LONG)(glpbBmRowAddresses[yval-to->yOffset]));\    pix.firstByte = pix.lptr; \    pix.lptr += (xval-to->xOffset);}*/	// MERGE-HMD [[[#if USE_HMD#define InitPixelHMDL(pix,xval,yval,to) {pix.lptr=(ULong*)to->baseAddress; \	pix.lptr+=((xval-to->xOffset)); \	pix.firstByte = (yval-to->yOffset)*((long)(to->rowBytes) << 1); \	if (gHMDOffsetLeft) pix.firstByte += ((long)(to->rowBytes));	\	pix.lptr+=(pix.firstByte>>2); \	}#define InitPixelHMDR(pix,xval,yval,to) {pix.lptr=(ULong*)to->baseAddress; \	pix.lptr+=((xval-to->xOffset)); \	pix.firstByte = (yval-to->yOffset)*((long)(to->rowBytes) << 1); \	if (gHMDOffsetRight) pix.firstByte += ((long)(to->rowBytes));	\	pix.lptr+=(pix.firstByte>>2); \	}#define AddLinePixelHMD(pix,to) pix.lptr += to->rowBytes>>1#endif // USE_HMD// MERGE-HMD ]]]#define DecPixel(pix)  pix.lptr--#define IncPixel(pix)  pix.lptr++#define AddPixel(pix,length) pix.lptr+=length#define AddLinePixel(pix,to) pix.lptr += to->rowBytes>>2#define SetPixel(pix,color) *pix.lptr=color[0]#define DecSetPixel(pix,color) *pix.lptr--=color[0]#define IncSetPixel(pix,color) *pix.lptr++=color[0]// MERGE-GOURAUD [[[#define IncSetPixel2(pix,color) *pix.lptr++=color#define SetPixel2(pix,color) *pix.lptr=color#define PixVal(pix) ((long)(pix.lptr))#define GetGouraudDither(dith_abcd, shade, color)	(gTextureShader[shade].truecolor[color])// MERGE-GOURAUD ]]]/*------------------------------------------------------------------------------ * ScanFillPatternXxx(). *------------------------------------------------------------------------------ */#define ScanFillPattern ScanFillPattern32void ScanFillPattern32(PixType pixel,int evenodd,int dx,VColorType color);								void ScanFillPattern32(PixType pixel,int evenodd,int dx,VColorType color) {LPLONG pl;pl = pixel.lptr;if ((evenodd & 1)^((((long)pl^pixel.firstByte)>>2) & 1))	{ // jitter our starting location	pl +=1;	dx--;	}while(dx>0)	{	*pl = color[0];    pl += 2;  // skip every other pixel	dx -= 2;  // count the pairs of pixels	}}														/*------------------------------------------------------------------------------ * ScanFillxxx. *------------------------------------------------------------------------------ */#define ScanFill ScanFill32void ScanFill32(PixType pixel,int evenodd,int dx,VColorType color);										void ScanFill32(PixType pixel,int evenodd,int dx,VColorType color)											{LPLONG pl;LONG col;pl = pixel.lptr;col = color[0];while(dx-- >0)	*pl++ = col;}// MERGE-GOURAUD [[[/*------------------------------------------------------------------------------ * GouraudFillxxxx *------------------------------------------------------------------------------ */// GOURAUD -- we have to pattern fill dx pixels, going from intensity il to intensity ir#define DefaultGouraudFillPattern DefaultGouraudFillPattern32#define DefaultGouraudFill DefaultGouraudFill32#define GouraudFillPattern GouraudFillPattern32A#define GouraudFill GouraudFill32A/*------------------------------------------------------------------------------------------*//**/void GouraudFill32(PixType pixel, int evenodd, int dx, int actual_dx, int left_unused,	FFixed il, FFixed ir, GColorType *dith_a, GColorType *dith_b, unsigned short *jitter,	long *jitter_diffs);										void GouraudFill32(PixType pixel, int evenodd, int dx, int actual_dx, int left_unused,	FFixed il, FFixed ir, GColorType *dith_a, GColorType *dith_b, unsigned short *jitter,	long *jitter_diffs)								{		register long increment, i; FFixed fdx, diff;	// determine the fraction of intensity and pixels -- how much do I bump the intensity	// per pixel?		fdx.intg = actual_dx;	fdx.frac = 0;	diff.l = ir.l - il.l;	increment = FFDiv(diff, fdx).l;		i = il.l;	while (left_unused--)		i += increment;	while (dx--)	{		IncSetPixel2(pixel, dith_a[i >> 16]);		i += increment;	} }							/*------------------------------------------------------------------------------------------*//**/void GouraudFill32A(PixType pixel, long evenodd, long dx, long actual_dx, long left_unused,		// MERGE-GOURAUD-PRO-10	FFixed il, FFixed ir, GColorType *dith_a, GColorType *dith_b, unsigned short *jitter,	long *jitter_diffs);										void GouraudFill32A(PixType pixel, long evenodd, long dx, long actual_dx, long left_unused,		// MERGE-GOURAUD-PRO-10	FFixed il, FFixed ir, GColorType *dith_a, GColorType *dith_b, unsigned short *jitter,	long *jitter_diffs)								{		FFixed fdx, diff;register long increment, big_increment, i;	// pretend these are FFixedlong adx;		// MERGE-GOURAUD-PRO-10	// determine the fraction of intensity and pixels -- how much to bump the intensity	// per pixel		fdx.intg = actual_dx;	fdx.frac = 0;	diff.l = ir.l - il.l;	increment = FFDiv(diff, fdx).l;		// get the initial intensity	i = il.l;			// do the part that is clipped out on the left -- just increment the number of times	// (left_unused is the number of pixels on the left that are clipped out)	// (also note that pixel has been inited to the value that we are actually supposed to	// start drawing at, so we don't increment pixel here)	while (left_unused--)		i += increment;	// compute how many pairs of pixels to do	adx = (dx >> 1);		// subtract the number of pairs from dx	dx -= (adx << 1);	// loop through the pairs -- note that since we know we are on a even word boundary,	// we can hard-code the dith_a and dith_b values	while (adx--)	{	register long jitt;		jitt = jitter[(PixVal(pixel) >> 2) & 0xF]; jitt += i;		IncSetPixel2(pixel, dith_a[jitt >> 16]);		i += increment;				jitt = jitter[(PixVal(pixel) >> 2) & 0xF]; jitt += i;		IncSetPixel2(pixel, dith_a[jitt >> 16]);		i += increment;	}		// do the last pixel -- at this point dx will be 0 or 1	if (dx)	{	register long jitt;		jitt = jitter[(PixVal(pixel) >> 2) & 0xF]; jitt += i;		SetPixel2(pixel, dith_a[jitt >> 16]);		// note no need to do IncSet		// note no need to increment i	}}							// MERGE-GOURAUD ]]]/*------------------------------------------------------------------------------------------*//**/void GouraudFillPattern32A(PixType pixel, long evenodd, long dx, long actual_dx, long left_unused,		// MERGE-GOURAUD-PRO-6	FFixed il, FFixed ir, GColorType *dith_a, GColorType *dith_b, unsigned short *jitter);										void GouraudFillPattern32A(PixType pixel, long evenodd, long dx, long actual_dx, long left_unused,		// MERGE-GOURAUD-PRO-6	FFixed il, FFixed ir, GColorType *dith_a, GColorType *dith_b, unsigned short *jitter)								{		register FFixed increment, double_increment, i, fdx, diff;int extra_pixel = FALSE;	// determine the fraction of intensity and pixels -- how much to bump the intensity	// per pixel -- note that we use the actual dx, which is the number of pixels across	// the whole scan line (i.e. it doesn't include clipping) so that our dx is correct		fdx.intg = actual_dx;	fdx.frac = 0;	diff.l = ir.l - il.l;	increment = FFDiv(diff, fdx);	// do initial increment to make our screen pattern -- do the initial skip-a-pixel	// if we need to.	if(((PixVal(pixel) >> 2) & 1) ^ (evenodd & 1))	{		// skip a pixel		IncPixel(pixel);				// make this pixel part of the left unused so we get the right intensity		// for the pixels we actually draw.  Remember that pixel has been inited		// based on the place we are supposed to start drawing from, so we must		// decrement dx.		left_unused++;		dx--;	}		// get the initial intensity	i = il;			// do the part that is clipped out on the left -- just increment the number of times	// (left_unused is the number of pixels on the left that are clipped out)	// (also note that pixel has been inited to the value that we are actually supposed to	// start drawing at, so we don't increment pixel here)	while (left_unused--)		i.l += increment.l;			// compute a double increment so we only have to do 1 add per pixel for the next	// intensity value	double_increment.l = (increment.l << 1);		// if dx is odd, then the following loop will not draw the last pixel in the scan	// line.  	if (dx & 1)	{		extra_pixel = TRUE;		dx--;	}			// now do the drawing -- dx is the number of pixels to actually draw	// This loop draw a pixel and then skips a pixel repeatedly.	while (dx > 0)	{	FFixed jitt;	register short jittintgpart;			// add in the jitter value		jitt.intg = 0;		jitt.frac = jitter[PixVal(pixel) & 0xF];		jitt.l += i.l;			// write the pixel		if (PixVal(pixel) & 1)			{			jittintgpart = jitt.intg;			IncSetPixel2(pixel, dith_a[jittintgpart]);            }		else			{			jittintgpart = jitt.intg;			IncSetPixel2(pixel, dith_b[jittintgpart]);            }				// skip a pixel (dither pattern fill)		IncPixel(pixel);		// increment the intensity for two pixels		i.l += double_increment.l;				// decrement dx; by 2 since we are doing a dither fill		dx -= 2;	} 			if (extra_pixel)	{	FFixed jitt;			// add in the jitter value		jitt.intg = 0;		jitt.frac = jitter[PixVal(pixel) & 0xF];		jitt.l += i.l;			// write the extra pixel -- no need to increment because this is the last pixel		if (PixVal(pixel) & 1)        	{			SetPixel2(pixel, dith_a[jitt.intg]);            }		else        	{			SetPixel2(pixel, dith_b[jitt.intg]);            }	}}							#define USE_JITTER_VALS_NO_DITHER 1			// MERGE-GOURAUD#include "FlashZ.h"#undef USE_JITTER_VALS_NO_DITHER			// MERGE-GOURAUD