/*------------------------------------------------------------------------------ * VWINDOWSt - the window object toolbox * * Copyright c 1991 by Virtus Corporation * All Rights Reserved * Written by David A. Smith * Virtus Corporation * 117 Edinburgh So * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Fw8.c *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VGUtil.h"#include "VDisplay.h"#include "Clip.h"#include "Flash.h"#include "Gouraud.h"		// JAM-MERGE-GOURAUD-PRO#include "DOS.h"		// DOS segment handlers		GJR 10/20/93						// Note: huge can't store across seg boundaries with single op#define SPANNEDHUGE(farptr, hifarptr) ((unsigned) FP_OFF(farptr) > (unsigned) FP_OFF(hifarptr))#if FLASHUSEASM						// Borland:	Must have Project LocalOption compile switch "-B" on.						// Borland: must do a DOS "TASM <filename.asm>" to get obj.#if BORLANDC>=0x452		// earlier borlands hate inline...#pragma inline    // Borlandc 4.0 likes this.  your milage may vary.#endif#endif/*------------------------------------------------------------------------------ * Define the function names *------------------------------------------------------------------------------ */#define FLine FLine8#define FLineClip FLineClip8#define FlashFill FlashFill8#define FlashClip FlashClip8#define FFixedFLine FFixedFLine8#define FlashGouraud 		FlashGouraud8			// MERGE-GOURAUD#define FlashGouraudClip 	FlashGouraudClip8		// MERGE-GOURAUD/*------------------------------------------------------------------------------ * Define the two major data types. *------------------------------------------------------------------------------ */typedef unsigned long VColorType[2];typedef struct 	PixType{LPLONG pixel;						int pos;                        int y;						LPLONG rowBase;                        int offset;	// offset to next plane						} PixType;typedef unsigned char GColorType;		// MERGE-GOURAUD/*------------------------------------------------------------------------------ * AutoInit your static data areas here. *------------------------------------------------------------------------------ */// PIXBIT selects a scan-line ordered pixel bits, input is 0..3#define PIXBIT(x) (0x0ffL<<(((x)*8)))static LONG pixbit[] =						{PIXBIT(0) ,PIXBIT(1) ,PIXBIT(2) ,PIXBIT(3) };// Setting bit masks, LMASK keeps logical (wrto scan) left bits.//		RMASK keeps logical (wrto scan) right bits.//		Input is scanline pixel position, 0..3;//		Output is either left keep or right keep bit mask.//			Note that LMASK keeps the bit position itself.//		Left says where the starting NEW pixel is,//			so Left==0 says replace from the beginning,//			   Left==1 says pixel 0 is left alone, but replace pixel 1+//		Right says where to STOP, and KEEP OLD.(points one past last new store)//			so Right==0 says don't store into this longword at all//			   Right==1 says store into pixel 0, but leave 1+ alone.// For intel (little endian), this means progress 1's from lo byte to hi//     intel also wants hi bit to low within a byte//// Just show the masks. Be Careful				//GJR 10/20/93// There is NO 'LM0'. the first loc says no mask, so is zero//  for BOTH left mask and right mask. This avoids some extra edge testing in the code#define LM1 0x000000FFL#define LM2 0x0000FFFFL		//NEED the 'L' else "word" effects happen#define LM3 0x00FFFFFFLstatic unsigned long lMask[]=						{0, LM1, LM2, LM3};static unsigned long rMask[]=						{0,~LM1,~LM2,~LM3};/*------------------------------------------------------------------------------ * Define the macro pixel routines. * For additional information about this code, see the Flash.c sources. *------------------------------------------------------------------------------ */// rightmost bit per color is in first plane (lsb order)#define InitColorPen(color,rgb) {unsigned long lcol=offscreen->GetDither(rgb)&0x00FF0000; \			  lcol |= lcol<<8; lcol |= lcol>>16; \			  color[0]=lcol;  \              color[1]=lcol;  \			  }#define InitColorBrush(color,rgb) {unsigned long lcol=dither?offscreen->GetDither(rgb):offscreen->GetNoDither(rgb); \			  color[0]=lcol;  \              color[1]=(lcol>>16)|(lcol<<16);  \			  }// MERGE-GOURAUD [[[// this macro inits the color index based on the rgb -- index will range from 0..255// at most, and will be less for bit depths 1/2/4.  The index is an index into the standard color// table; index is an unsigned char, rgb is an RGBColor#define InitColorIndex(index,rgb) { index = rgb; }// MERGE-GOURAUD ]]]#define InitPixel(pix,xval,yval,to) {  \	pix.y = yval+to->yOffset; \    pix.rowBase = (LPLONG)glpbBmRowAddresses[pix.y];  \	pix.pixel= (LPLONG)((pix.rowBase)+ ((xval+to->xOffset)>>2) );  \	pix.offset = gwBmWidthBytes; \	pix.pos=((xval+to->xOffset)&0x03); }#if USE_HMD#pragma option -Od#define InitPixelHMDL(pix,xval,yval,to) { \	pix.y = yval << 1;\	pix.y += to->yOffset; \    if(gHMDOffsetLeft) pix.y += 1; \    pix.rowBase = (LPLONG)glpbBmRowAddresses[pix.y];  \	pix.pixel= (LPLONG)((pix.rowBase)+ ((xval+to->xOffset)>>2) );  \	pix.offset = gwBmWidthBytes; \	pix.pos=((xval+to->xOffset)&0x03); }#define InitPixelHMDR(pix,xval,yval,to) { \	pix.y = yval << 1; \    pix.y += to->yOffset; \	if(gHMDOffsetRight) pix.y += 1; \    pix.rowBase = (LPLONG)glpbBmRowAddresses[pix.y];  \	pix.pixel= (LPLONG)((pix.rowBase)+ ((xval+to->xOffset)>>2) );  \	pix.offset = gwBmWidthBytes; \	pix.pos=((xval+to->xOffset)&0x03); }#define AddLinePixelHMD(pix,to) { int xOffset; \	xOffset = (LPBYTE)pix.pixel - (LPBYTE)pix.rowBase;  \	pix.y+=2; \	pix.rowBase = (LPLONG)glpbBmRowAddresses[pix.y];  \	pix.pixel= (LPLONG)((LPBYTE)(pix.rowBase)+ (xOffset) );  \	}#endif // USE_HMD#define DecPixel(pix)  {if(!pix.pos)pix.pixel--; pix.pos=(pix.pos-1)&0x03;}#define IncPixel(pix)  {pix.pos+=1; pix.pos&=0x03;if(!pix.pos)pix.pixel++; }#define AddPixel(pix,length) {pix.pos+=length;pix.pixel+=pix.pos>>2;	\								pix.pos&=0x03;}#define AddLinePixel(pix,to) { int xOffset; \	xOffset = (LPBYTE)pix.pixel - (LPBYTE)pix.rowBase;  \	pix.y++; \	pix.rowBase = (LPLONG)glpbBmRowAddresses[pix.y];  \	pix.pixel= (LPLONG)((LPBYTE)(pix.rowBase)+ (xOffset) );  \	}// Modify to convert linear lpl to segment adjusted lpl //GJR 10/20/93#define SetPixel(pix,color) {LPLONG lpl=pix.pixel;								\	if (SPANNEDHUGE(pix.rowBase, lpl))	\		{ char huge* hugelpl  = (char *)pix.rowBase;	\				 hugelpl += FP_OFF(lpl) - FP_OFF(pix.rowBase); \				 lpl      = (LPLONG)hugelpl;	\	    }	\	*lpl=((*lpl^color[0])&~pixbit[pix.pos])^color[0]; \	}#define DecSetPixel(pix,color) do{SetPixel(pix,color);DecPixel(pix);}while(0)#define IncSetPixel(pix,color) do{SetPixel(pix,color);IncPixel(pix);}while(0)// MERGE-GOURAUD [[[#define SetPixel2(pix,color) {LPLONG lpl=pix.pixel;								\	unsigned long copiedcolor; \	copiedcolor = color; \	copiedcolor |= (copiedcolor << 8); \    copiedcolor |= (copiedcolor << 16); \	if (SPANNEDHUGE(pix.rowBase, lpl))	\		{ char huge* hugelpl  = (char *)pix.rowBase;	\				 hugelpl += FP_OFF(lpl) - FP_OFF(pix.rowBase); \				 lpl      = (LPLONG)hugelpl;	\	    }	\	*lpl=((*lpl^copiedcolor)&~pixbit[pix.pos])^copiedcolor; \	}#define IncSetPixel2(pix,color) do{SetPixel2(pix,color);IncPixel(pix);}while(0)#define PixVal(pix) ((long)pix.pixel+pix.pos)					// MERGE-GOURAUD#define GetGouraudDither(dith_abcd, the_shade, the_color)	(gTextureShader[the_shade].dith[3][dith_abcd][the_color])// MERGE-GOURAUD ]]]/*------------------------------------------------------------------------------ * ScanFillPatternXxx(). *------------------------------------------------------------------------------ */#define ScanFillPattern ScanFillPattern8void ScanFillPattern8(PixType pixel,int evenodd,int dx,VColorType color);								void ScanFillPattern8(PixType pixel,int evenodd,int dx,VColorType color) {int ml,mr;LPLONG pl;//LPLONG pr;LPLONG plbase;long lNumLongs;     // actually the number of longword CROSSINGSlong col=color[evenodd&1];unsigned long mask=0xFF00FF00;if (evenodd&1) mask = ~mask; // complement to select opposite pixelsplbase=pixel.pixel;pl=plbase;if (SPANNEDHUGE(pixel.rowBase, pl))  // Segment Adjust	//GJR 10/20/93	{ char huge* hugepl  = (char huge*)pixel.rowBase;				 hugepl += FP_OFF(pl) - FP_OFF(pixel.rowBase);				 pl      = (LPLONG)hugepl;    }ml=(pixel.pos); //  offset for leftmost pixelpixel.pos  += dx;lNumLongs   = pixel.pos>>2;pixel.pixel+= lNumLongs;pixel.pos  &=0x03;mr=(pixel.pos);// Coding note:// ((old ^ new) &KeepOldBits) ^ new// uses (a^b^b==a) property to keep old wherever KeepOldBits is set.// old bits are replaced by new bits only where KeepOldBits is clear/off.if (lNumLongs == 0) // same 32 bits	{		*pl =(((*pl^col)&(lMask[ml]|rMask[mr]|mask))^col);	}else 	{    // Do prefix if not a full longword	if(ml)		{		*pl++=(((*pl^col)&(lMask[ml]             |mask))^col);		if (FP_OFF(pl) == 0)  // Segment Adjust	//GJR 10/20/93			{ char huge* hugepl  = (char huge*)pixel.rowBase;			hugepl += FP_OFF(pl) - FP_OFF(pixel.rowBase);			pl      = (LPLONG)hugepl;			}        lNumLongs--;		}    // Now do longwords	if (SPANNEDHUGE(pl, pl + lNumLongs))		{		long huge *hugepl = pl;		for (;lNumLongs > 0; lNumLongs--)			{			*hugepl++=(((*hugepl^col)&(                       mask))^col);			}        pl = hugepl;	// keep left pointer at next longword location		}	else		{		for (;lNumLongs > 0; lNumLongs--)		  *pl++=(((*pl^col)&(                       mask))^col);		}    // Finish with suffix, if any	if(mr)*pl  =(((*pl^col)&(             rMask[mr]|mask))^col);	}}/*------------------------------------------------------------------------------ * ScanFillxxx. *------------------------------------------------------------------------------ */#define ScanFill ScanFill8void ScanFill8(PixType pixel,int evenodd,int dx,VColorType color);										void ScanFill8(PixType pixel,int evenodd,int dx,VColorType color)											{int ml,mr;				LPLONG pl;LPLONG plbase;long lNumLongs;    	// actually the number of longword CROSSINGSlong col=color[evenodd&1];plbase=pixel.pixel;pl=plbase;if (SPANNEDHUGE(pixel.rowBase, pl))  // Segment Adjust	//GJR 10/20/93	{ char huge* hugepl  = (char huge*)pixel.rowBase;				 hugepl += FP_OFF(pl) - FP_OFF(pixel.rowBase);				 pl      = (LPLONG)hugepl;    }ml=((long)pixel.pos);pixel.pos  += dx;lNumLongs   = pixel.pos>>2;pixel.pixel+= lNumLongs;pixel.pos  &= 0x03;mr=((long)pixel.pos);if (lNumLongs == 0)  // if we are not crossing any 32 bit boundaries (i.e. only one long needed)	{		*pl =(((*pl^col)&(lMask[ml]|rMask[mr]))^col);	}else 	{    ASSERT(lNumLongs > 0);	if(ml)		{		*pl++=(((*pl^col)&(lMask[ml]             ))^col);		if (FP_OFF(pl) == 0)  // Segment Adjust	//GJR 10/20/93			{ char huge* hugepl  = (char huge*)pixel.rowBase;						 hugepl += FP_OFF(pl) - FP_OFF(pixel.rowBase);						 pl      = (LPLONG)hugepl;    		}		lNumLongs -= 1;  // account for doing one already        if (lNumLongs == 0) goto DoneStoringLongs;		}	ASSERT(lNumLongs > 0);#if FLASHUSEASM	if ( FlashUseAsm	  && !SPANNEDHUGE(pl, pl + lNumLongs))		{		WORD plSegment;        LONG plOffset;		plSegment = SELECTOROF(pl);		plOffset = OFFSETOF(pl);		ASM { 						// Borland:	Must have Project LocalOption compile switch "-B" on.						// Borland: must do a DOS "TASM <filename.asm>" to get obj.			pushfd				/* MS wants DF saved *///			push eax			push ecx			push edi		    /* yuch */        	mov eax, col			mov ecx, lNumLongs	/* num of 32bits to move */			mov es,plSegment            mov edi,plOffset			cld					/* set direction to forwards */			rep  stosd			/* store doubles(32 bits) at a time */            mov pl,di			/* keep pl pointing to the next longword */			pop edi			pop ecx//			pop eax            popfd			}		}	else#endif		{		long huge *hugepl = pl;		for (; lNumLongs > 0; lNumLongs--)			{			*hugepl++=col;			}        pl = hugepl;		// keep pl pointing to next long to store into		}DoneStoringLongs:					// done with prefix and longs. Do suffix, if any	if(mr)*pl  =(((*pl^col)&(             rMask[mr]))^col);	}}// MERGE-GOURAUD [[[/*------------------------------------------------------------------------------ * GouraudFillxxxx *------------------------------------------------------------------------------ */// GOURAUD -- we have to pattern fill dx pixels, going from intensity il to intensity ir#define DefaultGouraudFillPattern DefaultGouraudFillPattern8#define DefaultGouraudFill DefaultGouraudFill8#define GouraudFillPattern DefaultGouraudFillPattern8#define GouraudFill DefaultGouraudFill8// MERGE-GOURAUD ]]#include "FlashZ.h"