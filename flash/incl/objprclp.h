#ifndef _OBJ_PR_CLIP_H_	// PRO-13#define _OBJ_PR_CLIP_H_	// PRO-13#define ACCEPT 0#define REJECT -1#define INSIDE 1#define EXACTLY_ON 0#define OUTSIDE -1#define DONT_INTERSECT 0#define DO_INTERSECT 1#define COLINEAR 2#define CROSSED 3typedef struct LineData{	FFixed a;	FFixed b;	FFixed c;} LineData;void ClipLineVertical(FFixed *FFx1, FFixed *FFy1, FFixed FFyclip, FFixed *FFx2, FFixed *FFy2);void ClipLineHorizontal(FFixed *FFx1, FFixed *FFy1, FFixed FFxclip, FFixed *FFx2, FFixed *FFy2);int ClipLineToRect(Rect rclip, FFixed *FFx1, FFixed *FFy1, FFixed *FFx2, FFixed *FFy2);voidWinMakeLine(PointFFixed p1, PointFFixed p2, LineData *LineInfo);/*shortWinClipToPoly(PointFFixed *poly1, LineData *LineInfos, long length1, FFixedRect *BoundingBox,			  Point *poly2, long length2,			  PointFFixed *polyout, long *lengthout);shortClipLineToPoly(Clip *, PointFFixed *, PointFFixed *);*//*intClipToPoly(Point3DAllInfo *p, PointFFixed *textureptr,			 int *plength, PointFFixed *clippts,  LineData *LineEqtns, int cliplength,			 FFixedRect *BoundingBox);*/voidPerspectiveCorrectBetween(Point3DAllInfo *pt1, PointFFixed *tx1, 						  Point3DAllInfo *pt2, PointFFixed *tx2, 						  FFixed ratio,						  Point3DAllInfo *pout, PointFFixed *tout);						  /*used for temporary array for clipping for flash*/PointFFixed *InitFlashTemporaryArray(long plength);voidInitClipping(void);voidEndClipping(void);						 #endif // _OBJ_PR_CLIP_H_	// PRO-13						 