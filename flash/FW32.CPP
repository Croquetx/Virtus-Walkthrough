/*------------------------------------------------------------------------------ * VWINDOWSt - the window object toolbox * * Copyright c 1991 by Virtus Corporation * All Rights Reserved * Written by David A. Smith * Virtus Corporation * 117 Edinburgh So * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Fw32.c *------------------------------------------------------------------------------ */#include "VTypes.h"#include "VGUtil.h"#include "VDisplay.h"#include "Clip.h"#include "Flash.h"#include "Gouraud.h"			// MERGE-GOURAUD#include "DOS.h"		// DOS segment handlers		GJR 10/20/93						// Note: huge can't store across seg boundaries with single op#define SPANNEDHUGE(farptr, hifarptr) ((unsigned) FP_OFF(farptr) > (unsigned) FP_OFF(hifarptr))#if FLASHUSEASM						// Borland:	Must have Project LocalOption compile switch "-B" on.						// Borland: must do a DOS "TASM <filename.asm>" to get obj.#if BORLANDC>=0x452		// earlier borlands hate inline...#pragma inline    // Borlandc 4.0 likes this.  your milage may vary.#endif#endif/*------------------------------------------------------------------------------ * Define the function names *------------------------------------------------------------------------------ */#define FLine FLine32#define FLineClip FLineClip32#define FlashFill FlashFill32#define FlashClip FlashClip32#define FFixedFLine FFixedFLine32#define FlashGouraud 		FlashGouraud32			// MERGE-GOURAUD#define FlashGouraudClip 	FlashGouraudClip32		// MERGE-GOURAUD/*------------------------------------------------------------------------------ * Define the two major data types. *------------------------------------------------------------------------------ */// 32bit stores 4 bytes per pixel.// THIS FORMAT IS DIFFERENT FROM ALL OTHER SUB-32 FORMS.// SO TOTALLY DIFFERENT CODE IS USED.typedef unsigned long VColorType[1];typedef ULong GColorType;		// MERGE-GOURAUDtypedef struct 	PixType{LPLONG pixel;						int y;						LPLONG rowBase;                        int offset;	// offset to next plane						} PixType;/*------------------------------------------------------------------------------ * AutoInit your static data areas here. *------------------------------------------------------------------------------ *//*------------------------------------------------------------------------------ * Define the macro pixel routines. * For additional information about this code, see the Flash.c sources. *------------------------------------------------------------------------------ */// rightmost bit per color is in first plane (lsb order)#define InitColorPen(color,rgb) { unsigned long lcol; \			  lcol  = offscreen->GetDither(rgb);  \			  color[0]=lcol;  \			  }#define InitColorBrush(color,rgb) {InitColorPen(color,rgb);  \			  }// MERGE-GOURAUD [[[// this macro inits the color index based on the rgb -- index will range from 0..255// at most, and will be less for bit depths 1/2/4.  The index is an index into the standard color// table; index is an unsigned char, rgb is an RGBColor#define InitColorIndex(index,rgb) { index = rgb; }// MERGE-GOURAUD ]]]#define InitPixel(pix,xval,yval,to) {  \	pix.y = yval+to->yOffset; \    pix.rowBase = (LPLONG)glpbBmRowAddresses[pix.y];  \	pix.pixel= ((pix.rowBase)+ ((xval+to->xOffset)) );  \	pix.offset = gwBmWidthBytes; }#if USE_HMD#pragma option -Od#define InitPixelHMDL(pix,xval,yval,to) {  \	pix.y = yval << 1;\	pix.y += to->yOffset; \    if(gHMDOffsetLeft) pix.y += 1; \	pix.rowBase = (LPLONG)glpbBmRowAddresses[pix.y];  \	pix.pixel= ((pix.rowBase)+ ((xval+to->xOffset)) );  \	pix.offset = gwBmWidthBytes; }#define InitPixelHMDR(pix,xval,yval,to) {  \	pix.y = yval << 1;\	pix.y += to->yOffset; \	if(gHMDOffsetRight) pix.y += 1; \	pix.rowBase = (LPLONG)glpbBmRowAddresses[pix.y];  \	pix.pixel= ((pix.rowBase)+ ((xval+to->xOffset)) );  \	pix.offset = gwBmWidthBytes; }#define AddLinePixelHMD(pix,to) { int xOffset; \    xOffset = (LPBYTE)pix.pixel - (LPBYTE)pix.rowBase;  \	pix.y+=2; \	pix.rowBase = (LPLONG)glpbBmRowAddresses[pix.y];  \	pix.pixel= (LPLONG)((LPBYTE)(pix.rowBase)+ (xOffset) );  \	}#endif // USE_HMD#define DecPixel(pix)  {pix.pixel-= 1; }#define IncPixel(pix)  {pix.pixel+= 1; }#define AddPixel(pix,length) {pix.pixel+=length;}#define AddLinePixel(pix,to) { int xOffset; \    xOffset = (LPBYTE)pix.pixel - (LPBYTE)pix.rowBase;  \	pix.y++; \	pix.rowBase = (LPLONG)glpbBmRowAddresses[pix.y];  \	pix.pixel= (LPLONG)((LPBYTE)(pix.rowBase)+ (xOffset) );  \	}// Modify to convert linear lpl to segment adjusted lpl //GJR 10/20/93#define SetPixel(pix,color) {LPLONG lpl=pix.pixel;	\	if (SPANNEDHUGE(pix.rowBase, lpl))	\		{ char huge* hugelpl  = (char *)pix.rowBase;	\				 hugelpl += FP_OFF(lpl) - FP_OFF(pix.rowBase); \				 lpl      = (LPLONG)hugelpl;	\	    }	\	*lpl++=color[0]; \	}#define DecSetPixel(pix,color) do{SetPixel(pix,color);DecPixel(pix);}while(0)#define IncSetPixel(pix,color) do{SetPixel(pix,color);IncPixel(pix);}while(0)// MERGE-GOURAUD [[[#define SetPixel2(pix,color) {LPLONG lpl=pix.pixel;	\	if (SPANNEDHUGE(pix.rowBase, lpl))	\		{ char huge* hugelpl  = (char *)pix.rowBase;	\				 hugelpl += FP_OFF(lpl) - FP_OFF(pix.rowBase); \				 lpl      = (LPLONG)hugelpl;	\	    }	\	*lpl++=color; \	}#define IncSetPixel2(pix,color) do{SetPixel2(pix,color);IncPixel(pix);}while(0)#define PixVal(pix) ((long)pix.pixel>>2)#define GetGouraudDither(dith_abcd, shade, color)	(gTextureShader[shade].truecolor[color])// MERGE-GOURAUD ]]]/*------------------------------------------------------------------------------ * ScanFillPatternXxx(). *------------------------------------------------------------------------------ */#define ScanFillPattern ScanFillPattern32void ScanFillPattern32(PixType pixel,int evenodd,int dx,VColorType color);								void ScanFillPattern32(PixType pixel,int evenodd,int dx,VColorType color) {LPLONG pl,plbase;plbase = pixel.pixel;pl = plbase;if ((evenodd^(((LONG)pl)>>2))&1)	{ // jitter our starting location	pl +=1;	dx--;	}// ideal is lNumBytes-1, but this includes, without overdoing it too often //GJR 10/20/93if (SPANNEDHUGE(pixel.rowBase, pl + dx))	{    long huge* hugepl;	char huge* hugepb  = (char *)pixel.rowBase;    			hugepb += FP_OFF(pl) - FP_OFF(pixel.rowBase);  // done separately to process seg crossings                hugepl = (long *)hugepb;	while(dx>0)		{		*hugepl = color[0];	    hugepl += 2;  // skip every other pixel		dx     -= 2;  // count the pairs of pixels		}	}else	{	while(dx>0)		{		*pl = color[0];	    pl += 2;  // skip every other pixel		dx -= 2;  // count the pairs of pixels		}    }}														/*------------------------------------------------------------------------------ * ScanFillxxx. *------------------------------------------------------------------------------ */#define ScanFill ScanFill32void ScanFill32(PixType pixel,int evenodd,int dx,VColorType color);										void ScanFill32(PixType pixel,int evenodd,int dx,VColorType color)											{LPLONG pl,plbase;LONG col;LONG lNumLongs;plbase = pixel.pixel;pl = plbase;if (SPANNEDHUGE(pixel.rowBase, pl))  // Segment Adjust	//GJR 10/20/93	{ char huge* hugepl  = (char huge*)pixel.rowBase;				 hugepl += FP_OFF(pl) - FP_OFF(pixel.rowBase);				 pl      = (LPLONG)hugepl;    }lNumLongs = dx;col = color[0];#if FLASHUSEASM	if ( FlashUseAsm	  && !SPANNEDHUGE(pl, pl + lNumLongs))		{		WORD plSegment;        LONG plOffset;		plSegment = SELECTOROF(pl);		plOffset = OFFSETOF(pl);		ASM { 						// Borland:	Must have Project LocalOption compile switch "-B" on.						// Borland: must do a DOS "TASM <filename.asm>" to get obj.			pushfd				/* MS wants DF saved *///			push eax			push ecx			push edi		    /* yuch */        	mov eax, col			mov ecx, lNumLongs	/* num of 32bits to move */			mov es,plSegment            mov edi,plOffset			cld					/* set direction to forwards */			rep  stosd			/* store doubles(32 bits) at a time */            mov pl,di		/* update the lower offset */			pop edi			pop ecx//			pop eax            popfd			}		}	else#endif     	{		long huge *hugepl = pl;		while(dx>0)			{			*hugepl++ = col;			dx -= 1;			}		}}// MERGE-GOURAUD [[[/*------------------------------------------------------------------------------ * GouraudFillxxxx *------------------------------------------------------------------------------ */// GOURAUD -- we have to pattern fill dx pixels, going from intensity il to intensity ir#define DefaultGouraudFillPattern DefaultGouraudFillPattern32#define DefaultGouraudFill DefaultGouraudFill32#define GouraudFillPattern DefaultGouraudFillPattern32#define GouraudFill GouraudFill32A/*------------------------------------------------------------------------------------------*//**/void GouraudFill32(PixType pixel, int evenodd, int dx, int actual_dx, int left_unused,	FFixed il, FFixed ir, GColorType *dith_a, GColorType *dith_b, unsigned short *jitter,	long *jitter_diffs);										void GouraudFill32(PixType pixel, int evenodd, int dx, int actual_dx, int left_unused,	FFixed il, FFixed ir, GColorType *dith_a, GColorType *dith_b, unsigned short *jitter,	long *jitter_diffs)								{		register long increment, i; FFixed fdx, diff;	// determine the fraction of intensity and pixels -- how much do I bump the intensity	// per pixel?		fdx.intg = actual_dx;	fdx.frac = 0;	diff.l = ir.l - il.l;	increment = FFDiv(diff, fdx).l;		i = il.l;	while (left_unused--)		i += increment;	while (dx--)	{		IncSetPixel2(pixel, dith_a[i >> 16]);		i += increment;	} }							/*------------------------------------------------------------------------------------------*//**/void GouraudFill32A(PixType pixel, long evenodd, long dx, long actual_dx, long left_unused,		// MERGE-GOURAUD-PRO-10	FFixed il, FFixed ir, GColorType *dith_a, GColorType *dith_b, unsigned short *jitter,	long *jitter_diffs);										void GouraudFill32A(PixType pixel, long evenodd, long dx, long actual_dx, long left_unused,		// MERGE-GOURAUD-PRO-10	FFixed il, FFixed ir, GColorType *dith_a, GColorType *dith_b, unsigned short *jitter,	long *jitter_diffs)								{		FFixed fdx, diff;register long increment, big_increment, i;	// pretend these are FFixedlong adx;		// MERGE-GOURAUD-PRO-10	// determine the fraction of intensity and pixels -- how much to bump the intensity	// per pixel		fdx.intg = actual_dx;	fdx.frac = 0;	diff.l = ir.l - il.l;	increment = FFDiv(diff, fdx).l;		// get the initial intensity	i = il.l;			// do the part that is clipped out on the left -- just increment the number of times	// (left_unused is the number of pixels on the left that are clipped out)	// (also note that pixel has been inited to the value that we are actually supposed to	// start drawing at, so we don't increment pixel here)	while (left_unused--)		i += increment;	// compute how many pairs of pixels to do	adx = (dx >> 1);		// subtract the number of pairs from dx	dx -= (adx << 1);	// loop through the pairs -- note that since we know we are on a even word boundary,	// we can hard-code the dith_a and dith_b values	while (adx--)	{	register long jitt;		jitt = jitter[PixVal(pixel) & 0xF]; jitt += i;		IncSetPixel2(pixel, dith_a[jitt >> 16]);		i += increment;				jitt = jitter[PixVal(pixel) & 0xF]; jitt += i;		IncSetPixel2(pixel, dith_a[jitt >> 16]);		i += increment;	}		// do the last pixel -- at this point dx will be 0 or 1	if (dx)	{	register long jitt;		jitt = jitter[PixVal(pixel) & 0xF]; jitt += i;		SetPixel2(pixel, dith_a[jitt >> 16]);		// note no need to do IncSet		// note no need to increment i	}}							// MERGE-GOURAUD ]]]#define USE_JITTER_VALS_NO_DITHER 1			// MERGE-GOURAUD#include "FlashZ.h"#undef USE_JITTER_VALS_NO_DITHER			// MERGE-GOURAUD