#include "Gouraud.h"#include "VMath.h"#include "VDisplay.h"#include "VGraphic.h"// gJitterVals is a 8x8 dither matrix, but with each column duplicated to make it 8x16// (i.e. columns go 0, 0, 1, 1, 2, 2, etc).  We do this so we can access it with "pixel & 0xF"// instead of "(pixel >> 1) & 0xF", thus saving us a shift in time-critical fill code.// (The shift is done to allow for the 2x2 dither matrix)unsigned short gJitterVals[8][16];// gJitterValsNoDither is a 8x8 dither matrix, but with no columns duplicated.  We do// this because 16 and 32 bit gouraud do not require the shift (as noted above), because// direct-color has no 2x2 dither.unsigned short gJitterValsNoDither[8][8];// gJitterDiffs is a difference matrix between the values in gJitterVals// gJitterDiffs[0][0] is the difference between gJitterVals[0][0] and gJitterVals[0][1],// assuming that gJitterVals were really a 8x8 dither matrix.  Since gJitterVals is 8x16,// gJitterDiffs[0][0] is really the difference between gJitterVals[0][0] and gJitterVals[0][2].// gJitterDiffs is 8x16 instead of 8x8 because the whole matrix is duplicated, // i.e. the columns go 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, etc.  We do this so we can start// in the first half and just do increments -- thus saving us a bit-and in time-critical fill// code (i.e. no need to do a "& 0x7" to make sure we are inside the array; just start in the// first half and we can do up to 8 values in a row with just increments through the array.) long gJitterDiffs[8][16];//#define FRAC_PART(a)	(DblToFixed(a).frac)#define FRAC_PART(a, b) {FFixed tempfixed; tempfixed = DblToFixed(b); a = tempfixed.frac; }static int inited_gouraud = FALSE;V_Offscreen *gOff8 = NULL;voidInitGouraud(){int i, j;Rect r;short tempshort;FFixed tempfixed;	if (inited_gouraud) return;	inited_gouraud = TRUE;	// 	0	32	8	40	2	34	10	42	gJitterVals[0][0] = 0;							// 0	FRAC_PART(gJitterVals[0][2],32.0/64.0);		// 32.0/64	FRAC_PART(gJitterVals[0][4],8.0/64.0);		// 8.0/64	FRAC_PART(gJitterVals[0][6],40.0/64.0);		// 40.0/64	FRAC_PART(gJitterVals[0][8],2.0/64.0);		// 2.0/64	FRAC_PART(gJitterVals[0][10],34.0/64.0);		// 34.0/64	FRAC_PART(gJitterVals[0][12],10.0/64.0);		// 10.0/64	FRAC_PART(gJitterVals[0][14],42.0/64.0);		// 42.0/64	//	48	16	56	24	50	18	58	26	FRAC_PART(gJitterVals[1][0],48.0/64.0);		// 48.0/64	FRAC_PART(gJitterVals[1][2],16.0/64.0);		// 16.0/64	FRAC_PART(gJitterVals[1][4],56.0/64.0);		// 56.0/64	FRAC_PART(gJitterVals[1][6],24.0/64.0);		// 24.0/64	FRAC_PART(gJitterVals[1][8],50.0/64.0);		// 50.0/64	FRAC_PART(gJitterVals[1][10],18.0/64.0);		// 18.0/64	FRAC_PART(gJitterVals[1][12],58.0/64.0);		// 58.0/64	FRAC_PART(gJitterVals[1][14],26.0/64.0);		// 26.0/64	//	12	44	4	36	14	46	6	38	FRAC_PART(gJitterVals[2][0],12.0/64.0);		// 12.0/64	FRAC_PART(gJitterVals[2][2],44.0/64.0);		// 44.0/64	FRAC_PART(gJitterVals[2][4],4.0/64.0);		// 4.0/64	FRAC_PART(gJitterVals[2][6],36.0/64.0);		// 36.0/64	FRAC_PART(gJitterVals[2][8],14.0/64.0);		// 14.0/64	FRAC_PART(gJitterVals[2][10],46.0/64.0);		// 46.0/64	FRAC_PART(gJitterVals[2][12],6.0/64.0);		// 6.0/64	FRAC_PART(gJitterVals[2][14],38.0/64.0);		// 38.0/64	//	60	28	52	20	62	30	54	22	FRAC_PART(gJitterVals[3][0],60.0/64.0);		// 60.0/64	FRAC_PART(gJitterVals[3][2],28.0/64.0);		// 28.0/64	FRAC_PART(gJitterVals[3][4],52.0/64.0);		// 52.0/64	FRAC_PART(gJitterVals[3][6],20.0/64.0);		// 20.0/64	FRAC_PART(gJitterVals[3][8],62.0/64.0);		// 62.0/64	FRAC_PART(gJitterVals[3][10],30.0/64.0);		// 30.0/64	FRAC_PART(gJitterVals[3][12],54.0/64.0);		// 54.0/64	FRAC_PART(gJitterVals[3][14],22.0/64.0);		// 22.0/64	//	3	35	11	43	1	33	9	41	FRAC_PART(gJitterVals[4][0],3.0/64.0);		// 3.0/64	FRAC_PART(gJitterVals[4][2],35.0/64.0);		// 35.0/64	FRAC_PART(gJitterVals[4][4],11.0/64.0);		// 11.0/64	FRAC_PART(gJitterVals[4][6],43.0/64.0);		// 43.0/64	FRAC_PART(gJitterVals[4][8],1.0/64.0);		// 1.0/64	FRAC_PART(gJitterVals[4][10],33.0/64.0);		// 33.0/64	FRAC_PART(gJitterVals[4][12],9.0/64.0);		// 9.0/64	FRAC_PART(gJitterVals[4][14],41.0/64.0);		// 41.0/64	//	51	19	59	27	49	17	57	25	FRAC_PART(gJitterVals[5][0],51.0/64.0);		// 51.0/64	FRAC_PART(gJitterVals[5][2],19.0/64.0);		// 19.0/64	FRAC_PART(gJitterVals[5][4],59.0/64.0);		// 59.0/64	FRAC_PART(gJitterVals[5][6],27.0/64.0);		// 27.0/64	FRAC_PART(gJitterVals[5][8],49.0/64.0);		// 49.0/64	FRAC_PART(gJitterVals[5][10],17.0/64.0);		// 17.0/64	FRAC_PART(gJitterVals[5][12],57.0/64.0);		// 57.0/64	FRAC_PART(gJitterVals[5][14],25.0/64.0);		// 25.0/64	//	15	47	7	39	13	45	5	37	FRAC_PART(gJitterVals[6][0],15.0/64.0);		// 15.0/64	FRAC_PART(gJitterVals[6][2],47.0/64.0);		// 47.0/64	FRAC_PART(gJitterVals[6][4],7.0/64.0);		// 7.0/64	FRAC_PART(gJitterVals[6][6],39.0/64.0);		// 39.0/64	FRAC_PART(gJitterVals[6][8],13.0/64.0);		// 13.0/64	FRAC_PART(gJitterVals[6][10],45.0/64.0);		// 45.0/64	FRAC_PART(gJitterVals[6][12],5.0/64.0);		// 5.0/64	FRAC_PART(gJitterVals[6][14],37.0/64.0);		// 37.0/64	//	63	31	55	23	61	29	53	21	FRAC_PART(gJitterVals[7][0],63.0/64.0);		// 63.0/64	FRAC_PART(gJitterVals[7][2],31.0/64.0);		// 31.0/64	FRAC_PART(gJitterVals[7][4],55.0/64.0);		// 55.0/64	FRAC_PART(gJitterVals[7][6],23.0/64.0);		// 23.0/64	FRAC_PART(gJitterVals[7][8],61.0/64.0);		// 61.0/64	FRAC_PART(gJitterVals[7][10],29.0/64.0);		// 29.0/64	FRAC_PART(gJitterVals[7][12],53.0/64.0);		// 53.0/64	FRAC_PART(gJitterVals[7][14],21.0/64.0);		// 21.0/64#if 0	gJitterVals[0][2] = FRAC_PART(32.0/64.0);		// 32.0/64	gJitterVals[0][4] = FRAC_PART(8.0/64.0);		// 8.0/64	gJitterVals[0][6] = FRAC_PART(40.0/64.0);		// 40.0/64	gJitterVals[0][8] = FRAC_PART(2.0/64.0);		// 2.0/64	gJitterVals[0][10] = FRAC_PART(34.0/64.0);		// 34.0/64	gJitterVals[0][12] = FRAC_PART(10.0/64.0);		// 10.0/64	gJitterVals[0][14] = FRAC_PART(42.0/64.0);		// 42.0/64	//	48	16	56	24	50	18	58	26	gJitterVals[1][0] = FRAC_PART(48.0/64.0);		// 48.0/64	gJitterVals[1][2] = FRAC_PART(16.0/64.0);		// 16.0/64	gJitterVals[1][4] = FRAC_PART(56.0/64.0);		// 56.0/64	gJitterVals[1][6] = FRAC_PART(24.0/64.0);		// 24.0/64	gJitterVals[1][8] = FRAC_PART(50.0/64.0);		// 50.0/64	gJitterVals[1][10] = FRAC_PART(18.0/64.0);		// 18.0/64	gJitterVals[1][12] = FRAC_PART(58.0/64.0);		// 58.0/64	gJitterVals[1][14] = FRAC_PART(26.0/64.0);		// 26.0/64	//	12	44	4	36	14	46	6	38	gJitterVals[2][0] = FRAC_PART(12.0/64.0);		// 12.0/64	gJitterVals[2][2] = FRAC_PART(44.0/64.0);		// 44.0/64	gJitterVals[2][4] = FRAC_PART(4.0/64.0);		// 4.0/64	gJitterVals[2][6] = FRAC_PART(36.0/64.0);		// 36.0/64	gJitterVals[2][8] = FRAC_PART(14.0/64.0);		// 14.0/64	gJitterVals[2][10] = FRAC_PART(46.0/64.0);		// 46.0/64	gJitterVals[2][12] = FRAC_PART(6.0/64.0);		// 6.0/64	gJitterVals[2][14] = FRAC_PART(38.0/64.0);		// 38.0/64	//	60	28	52	20	62	30	54	22	gJitterVals[3][0] = FRAC_PART(60.0/64.0);		// 60.0/64	gJitterVals[3][2] = FRAC_PART(28.0/64.0);		// 28.0/64	gJitterVals[3][4] = FRAC_PART(52.0/64.0);		// 52.0/64	gJitterVals[3][6] = FRAC_PART(20.0/64.0);		// 20.0/64	gJitterVals[3][8] = FRAC_PART(62.0/64.0);		// 62.0/64	gJitterVals[3][10] = FRAC_PART(30.0/64.0);		// 30.0/64	gJitterVals[3][12] = FRAC_PART(54.0/64.0);		// 54.0/64	gJitterVals[3][14] = FRAC_PART(22.0/64.0);		// 22.0/64	//	3	35	11	43	1	33	9	41	gJitterVals[4][0] = FRAC_PART(3.0/64.0);		// 3.0/64	gJitterVals[4][2] = FRAC_PART(35.0/64.0);		// 35.0/64	gJitterVals[4][4] = FRAC_PART(11.0/64.0);		// 11.0/64	gJitterVals[4][6] = FRAC_PART(43.0/64.0);		// 43.0/64	gJitterVals[4][8] = FRAC_PART(1.0/64.0);		// 1.0/64	gJitterVals[4][10] = FRAC_PART(33.0/64.0);		// 33.0/64	gJitterVals[4][12] = FRAC_PART(9.0/64.0);		// 9.0/64	gJitterVals[4][14] = FRAC_PART(41.0/64.0);		// 41.0/64	//	51	19	59	27	49	17	57	25	gJitterVals[5][0] = FRAC_PART(51.0/64.0);		// 51.0/64	gJitterVals[5][2] = FRAC_PART(19.0/64.0);		// 19.0/64	gJitterVals[5][4] = FRAC_PART(59.0/64.0);		// 59.0/64	gJitterVals[5][6] = FRAC_PART(27.0/64.0);		// 27.0/64	gJitterVals[5][8] = FRAC_PART(49.0/64.0);		// 49.0/64	gJitterVals[5][10] = FRAC_PART(17.0/64.0);		// 17.0/64	gJitterVals[5][12] = FRAC_PART(57.0/64.0);		// 57.0/64	gJitterVals[5][14] = FRAC_PART(25.0/64.0);		// 25.0/64	//	15	47	7	39	13	45	5	37	gJitterVals[6][0] = FRAC_PART(15.0/64.0);		// 15.0/64	gJitterVals[6][2] = FRAC_PART(47.0/64.0);		// 47.0/64	gJitterVals[6][4] = FRAC_PART(7.0/64.0);		// 7.0/64	gJitterVals[6][6] = FRAC_PART(39.0/64.0);		// 39.0/64	gJitterVals[6][8] = FRAC_PART(13.0/64.0);		// 13.0/64	gJitterVals[6][10] = FRAC_PART(45.0/64.0);		// 45.0/64	gJitterVals[6][12] = FRAC_PART(5.0/64.0);		// 5.0/64	gJitterVals[6][14] = FRAC_PART(37.0/64.0);		// 37.0/64	//	63	31	55	23	61	29	53	21	gJitterVals[7][0] = FRAC_PART(63.0/64.0);		// 63.0/64	gJitterVals[7][2] = FRAC_PART(31.0/64.0);		// 31.0/64	gJitterVals[7][4] = FRAC_PART(55.0/64.0);		// 55.0/64	gJitterVals[7][6] = FRAC_PART(23.0/64.0);		// 23.0/64	gJitterVals[7][8] = FRAC_PART(61.0/64.0);		// 61.0/64	gJitterVals[7][10] = FRAC_PART(29.0/64.0);		// 29.0/64	gJitterVals[7][12] = FRAC_PART(53.0/64.0);		// 53.0/64	gJitterVals[7][14] = FRAC_PART(21.0/64.0);		// 21.0/64#endif			// compute the odd values in gJitterVals -- duplicate the even columns into the odd columns	for ( i = 0 ; i < 8 ; i++ )		for ( j = 1 ; j < 16 ; j += 2 )		// note j+=2, not j++			gJitterVals[i][j] = gJitterVals[i][j-1];	// compute the values in gJitterValsNoDither -- duplicate the even columns of gJitterVals	for ( i = 0 ; i < 8 ; i++ )		for ( j = 0 ; j < 8 ; j++ )			gJitterValsNoDither[i][j] = gJitterVals[i][j << 1];			// compute the gJitterDiffs	for ( i = 0 ; i < 8 ; i++ )		for ( j = 0 ; j < 7 ; j++ )			// note 7, not 8 (last case done next)			gJitterDiffs[i][j] = (long)gJitterVals[i][(j<<1)+2] - (long)gJitterVals[i][(j<<1)];	// compute the extra value to make gJitterDiffs wrap (gJitterDiffs[i][7] is the difference	// between the 8th column (7) and 1st (0) column in gJitterVals -- note we shift 7 left by	// one to account for the duplicated columns in gJitterVals	for ( i = 0 ; i < 8 ; i++ )		gJitterDiffs[i][7] = (long)gJitterVals[i][0] - (long)gJitterVals[i][7 << 1];	// copy the first half of gJitterDiffs into the second half of gJitterDiffs	for ( i = 0 ; i < 8 ; i++ )		for ( j = 8 ; j < 16 ; j++ )			gJitterDiffs[i][j] = gJitterDiffs[i][j-8];				gOff8 = new(V_Offscreen);	VSetRect(&r, 0, 0, 1, 1);	gOff8->cOffscreen(&r, 8, NULL, NULL);}//JAM 5OCT94 need to delete stuff we createdvoidvoidEndGouraud(){	gOff8->dOffscreen();}