#include "VTypes.h"#include "VRWlkPan.h"#include "WalkPane.h"#include "VwCntrl.h"#include "View.h"#include "AppMssgs.h"#include "AppDeflt.h"#include "AppText.h"#include "BallHelp.h"#include "WMenus.h"/* THIS IS FOR PRIORITY enum */#include "IntfDlog.h"#include "DlogTran.h"#include "QuickTim.h"#include "EPSF.h"#include "imgHandl.h"#include "BMPHandl.h"#include "TIFHandl.h"#include "ToolDef.h"#include "SmthPath.h"#include "Observer.h"#include "Misc.h"#include "WalkMovi.h"#include "AdskAnim.h"#include "QTMovie.h"#include "PICSMovi.h"#include "AVIMovie.h"#include "walkthru.h"#include "VRlbitem.h"	// MERGE20#include "lbvcntrl.h"	// MERGE20#include "list.h"		// MERGE20#include "Vrlblist.h"	// MERGE20#include "Vrlbitem.h"	// MERGE20#include "VMain.h"#include "VGraphic.h"#include "VGUtil.h"#include "VWindow.h"#include "VPrint.h"#include "VMemUtil.h"#include "VError.h"#include <stdio.h>#include <stddef.h>#if VRvoidVRWalkPane::cPane(int flag)	{	V_MenuMgr	*mgr;	V_Pane::cPane(flag);	vcenterX = 1;	vcenterY = -1;	fullScreen = NULL;	aspectH = 0; aspectV = 0;	lastType = 0;	inAnimation = FALSE;	}voidVRWalkPane::dPane()	{	V_Pane::dPane();	}void VRWalkPane::Init(struct ViewController *ctrl, struct View *vw)	{	control = ctrl;	view = vw;	}voidVRWalkPane::CalcSize(Rect *r, Point *p, int type, int warning)	{	VRLibraryItem *item;	// MERGE20		control->GetPlace(r,warning,toolVRPWalk);#if 0	// MERGE20 [[[	item = (VRLibraryItem*)((((LibViewController*)(control))->libraryList)->GetCurrentItem());			if (item)		{		view->boundMin = item->boundMin;		view->boundMax = item->boundMax;		view->SetGoodObserverPosition(r->right - r->left, r->bottom - r->top);		item->obsPoint = view->point;		}	// MERGE20 ]]]#endif	}voidVRWalkPane::Display(int type, int h, int v)	{	Rect copyRect;	int options, tmpOptions;	AppPreference *appPreference;	RenderPreference *renderPref;	SetMetaPort();	copyRect = aspectRect;	switch (type)		{		case PRINT_DRAW:			options = view->GetOptions(-1);			tmpOptions = options;			appPreference = control->GetPreference();			renderPref = (RenderPreference*)appPreference->GetPreference(preferRenderer);			if (renderPref->printWhiteShade)				{				tmpOptions |= DRAW_WHITE_SHADE;				tmpOptions &= ~(DRAW_SHADE|DRAW_NO_SHADE);				}			view->SetOptions(tmpOptions);			view->Draw(FALSE, FALSE);			view->SetOptions(options);			break;		case PICT_DRAW:			view->Draw(FALSE, FALSE); // BILBIL - TRUE);			break;		default:			view->Draw(!inAnimation && FrontApp(), FALSE);			break;		}#if MACINTOSH	if (fullScreen != NULL && theWindow->Active())		{		Rect destRect = copyRect, r;				/* Icky Mac stuff */		fullScreen->GetRect(&r);		destRect.left += r.left; destRect.right += r.left;		destRect.top += r.top; destRect.bottom += r.top;		if (offscreen != NULL)			offscreen->MetaTo(fullScreen, &copyRect, &destRect);		}	else MetaCopy(&copyRect);#else	VFrameRect(&copyRect); 	// jca 5 Oct 93.  Needs frame rect explicitly done under Windows(tm)	MetaCopy(&copyRect);#endif	UnsetMetaPort();	lastType = type;	}voidVRWalkPane::MouseDown(Point pt, long modifier){	//WalkPane::MouseDown(pt, modifier);}voidVRWalkPane::Track(Point pt, long modifier, int inside)	{	//WalkPane::Track(pt, modifier,inside);	}voidVRWalkPane::MouseUp(Point pt, long modifier){	//WalkPane::MouseUp(pt, modifier);}// { DAS-VR-HELP 9/30/93// BILBIL - fix home and level observer for Mac - 12/5/93 {{{intVRWalkPane::GetAction (long action, long modifiers)	{	// don't do the WalkPane::Action stuff so we don't handle	// the HOME_OBSERVER and LEVEL_OBSERVER messages - BG	return (FALSE);	}// BILBIL - fix home and level observer for Mac - 12/5/93 }}}void VRWalkPane::TrackHelp(Point pt, long modifier)	{	Rect rect;	rect=dataRect;	BalloonHotRect(&rect, pt);	Bubble(pt, &rect, TXTB_SHOWGALLERY);	}// } DAS-VR-HELP 9/30/93#endif // VR