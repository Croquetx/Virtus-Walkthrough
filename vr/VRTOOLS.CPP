#include "VTypes.h"#include "VRTools.h"#if VR// DAS-VR-VRTOOLS 8/22/93#include "CVDefs.h"#include "ToolDef.h"#include "CadCntrl.h"#include "WalkDefs.h"#include "AppMssgs.h"#include "AppDeflt.h"#include "AppText.h"#include "WMenus.h"/* THIS IS FOR PRIORITY enum */#include "Observer.h"#include "BallHelp.h"#include "Misc.h"#include "VMain.h"#include "VGraphic.h"#include "VGUtil.h"#include "VWindow.h"#include "VPrint.h"#include "VMemUtil.h"#include "VError.h"#include "VSound.h"#include "Polyhdrn.h"	// MERGE25#include <stdio.h>#include <stddef.h>void VRTools::Init(CadControl *ctrl)	{	controller=ctrl;	onOffState=TRUE;	whichView=bTOPVIEW;	dB=new(DesignButton);	dB->cButtonSet();	dB->Init(ctrl);	SetButton(dB);	}voidVRTools::CalcSize(Rect *r, Point *p, int type, int warning)	{		Rect br;		if(vButton && onOffState)		{		r->right=75;		br=*r;		br.bottom-=br.top;		br.top=0;		br.right-=br.left;		br.left=0;		vButton->CalcSize(&br, NULL);		r->bottom=r->top+br.bottom-br.top; // DAS-VR 8/22/93		}	else r->right=r->left;	}voidVRTools::Display(int type, int h, int v)	{	Rect r;	V_Console::Display(type,h,v);	/* The following is to put a pretty black line to the right of the pane.	 * Needless to say, this is pretty irrelevent under Windows, so we need to	 * think about what else we can do here. DAS 8/13/93	 */	r=dataRect;	r.right++;	VClipRect(&r);	VForeColor(&vBlack);	VMoveTo(r.right,r.top);	VLineTo(r.right,r.bottom);	VClipRect(&dataRect);	}int VRTools::GetState(void)	{	return onOffState;	}	void VRTools::SetState(int state)	{	onOffState=state;	}	// MERGE25 [[[void VRTools::SetSurfSide(int side)	{	if (dB) dB->SetSurfSide(side);	}// MERGE25 ]]]// { DAS-VRTOOL-SETARROW 8/7/93int VRTools::GetAction(long message,long modifier)	{	if(message==MSG_SETARROW)		{		int i;		vButton->SetState(3,OFFSTATE); // the select surface/return button is off		vButton->SetState(5,ONSTATE);  // the arrow tool is on		for(i=6;i<vButton->ALength();i++)			vButton->SetState(i,OFFSTATE);		VDisplay(0);		return TRUE;		}	else return(FALSE);	}// } DAS-VRTOOL-SETARROW 8/7/93// DAS-VR 8/21/93 added some buttonsvoid // DAS-VR 8/23/93DesignButton::cButtonSet()	{	cButton(-3);	controller = NULL;	AppendButton(bTOP);	AppendButton(bFRONT);	AppendButton(bRIGHT);	AppendButton(bSELECTLSURFACE);	// DAS-VR 8/23/93		AppendButton(bVBAR); // DAS-VR 8/17/93		AppendButton(bARROWTOOL);	AppendButton(bZOOMIN);	AppendButton(bZOOMOUT);		AppendButton(bVBAR); //	AppendButton(bSHAPE);	AppendButton(bSCALE);	AppendButton(bROTATE);			AppendButton(bVBAR); 			SetState(0,ONSTATE); // top is selected	SetState(5,ONSTATE);// { DAS-VR-HELP 9/30/93	SetHelp(0,TXTB_TOP);	SetHelp(1,TXTB_FRONT);	SetHelp(2,TXTB_RIGHT);	SetHelp(3,TXTB_SELECTLSURFACE);	SetHelp(4,TXTB_NULL);	SetHelp(5,TXTB_ARROW);	SetHelp(6,TXTB_ZOOMIN);	SetHelp(7,TXTB_ZOOMOUT);	SetHelp(8,TXTB_NULL);	SetHelp(9,TXTB_SCALE);	SetHelp(10,TXTB_ROTATE);	SetHelp(11,TXTB_NULL);// } DAS-VR-HELP 9/30/93	}void DesignButton::Init(CadControl	*ctrl)	{	controller = ctrl;	controller->ControlMessage(bARROWTOOL,0,ONSTATE);// { DAS-VR-SURFACE 9/6/93	if(controller->type == toolCRTLSurface)  		{		SetChar(0,bMAKEOUTSIDE);		SetChar(1,bMAKEINSIDE);		SetChar(2,bMAKEBOTH);		SetChar(3,bGOBACK);// { DAS-VR-HELP 9/30/93		SetHelp(0,TXTB_MAKEOUTSIDE);		SetHelp(1,TXTB_MAKEINSIDE);		SetHelp(2,TXTB_MAKEBOTH);		SetHelp(3,TXTB_GOBACK);// } DAS-VR-HELP 9/30/93		}// } DAS-VR-SURFACE 9/6/93	}	// MERGE25 [[[voidDesignButton::SetSurfSide(int side){	if (side == SURF_INSIDE)	{		SetState(0,OFFSTATE);		SetState(1,ONSTATE);		SetState(2,OFFSTATE);		((VRTools*)thePane)->whichView=1;	}	else	{		SetState(0,ONSTATE);		SetState(1,OFFSTATE);		SetState(2,OFFSTATE);		((VRTools*)thePane)->whichView=0;	}}// MERGE25 ]]]// { DAS-VR-VRTOOLS 8/22/93void DesignButton::MouseDown(int item,long modifiers)	{	int i,state,icon;		if(item<0)return;		thePane->UnsetPane();	icon=GetChar(item); // Convert to character	switch(icon)		{		case bVBAR:			break;// { DAS-VR-SURFEDIT 9/17/93		case bTOP:		case bMAKEOUTSIDE:			SetState(0,ONSTATE);			SetState(1,OFFSTATE);			SetState(2,OFFSTATE);			if(icon==bTOP)VSendMessage(MSG_TOPVIEW);			else VSendMessage(MSG_OUTSIDE);			((VRTools*)thePane)->whichView=item;			break;		case bFRONT:		case bMAKEINSIDE:			SetState(0,OFFSTATE);			SetState(1,ONSTATE);			SetState(2,OFFSTATE);			if(icon==bFRONT)VSendMessage(MSG_FRONTVIEW);			else VSendMessage(MSG_INSIDE);			((VRTools*)thePane)->whichView=item;			break;		case bRIGHT:		case bMAKEBOTH:			SetState(0,OFFSTATE);			SetState(1,OFFSTATE);			SetState(2,ONSTATE);			if(icon==bRIGHT)VSendMessage(MSG_RIGHTVIEW);			else VSendMessage(MSG_BOTH); // DAS-VR-SURFEDIT 10/1/93			((VRTools*)thePane)->whichView=item;			break;// } DAS-VR-SURFEDIT 9/17/93		case bSELECTLSURFACE:			icon=bSURFACE_EDITOR;			break;					case bGOBACK:			return;			break;		case bARROWTOOL: // Arrow Tool			icon=bARROW;			break;		case bSCALE: // Scale Tool			icon=bSCALE_ROOM;			break;		case bROTATE: // Rotate Tool			icon=bROTATE_ROOM;			break;/*		case bSHAPE: // Paint Tool - removed by BG - 9/14			icon=bSHAPE;			break;*/		case bZOOMIN: // Zoom in Tool			icon=bZOOMIN;			break;		case bZOOMOUT: // Zoom out Tool			icon=bZOOMOUT;			break;		}	if(item>2)		for(i=3;i<length;i++) 			{ 			if(i==item) 				{				SetState(i,ONSTATE); 				if(doubleClick&modifiers) 					state = LOCKSTATE; 				else					state = ONSTATE;						controller->ControlMessage(icon,modifiers,state);				}			else  SetState(i,OFFSTATE); 			}	thePane->SetPane();	}	void DesignButton::MouseTrack(int item,int oldItem, long modifiers)	{	int i,state,icon;		if(item<0)return;		thePane->UnsetPane();	for(i=0;i<3;i++)		if(i==((VRTools*)thePane)->whichView)			SetState(i,ONSTATE);		else			SetState(i,OFFSTATE);	if(item>2)				{		icon=GetChar(item); // Convert to character		switch (icon)			{			case bARROWTOOL: // Arrow Tool				icon=bARROW;				break;			case bSCALE: // Scale Tool				icon=bSCALE_ROOM;				break;			case bROTATE: // Rotate Tool				icon=bROTATE_ROOM;				break;/*			case bSHAPE: // Shape Tool - removed by BG - 9/14				icon=bSHAPE;				break;*/			case bZOOMIN: // Zoom in Tool				icon=bZOOMIN;				break;			case bZOOMOUT: // Zoom out Tool				icon=bZOOMOUT;				break;			case bSELECTLSURFACE: 				icon=bSURFACE_EDITOR;				break;			}		for(i=3;i<length;i++) 			{ 			if(i==item) 				{				SetState(i,ONSTATE); 				if(doubleClick&modifiers) 					state = LOCKSTATE; 				else					state = ONSTATE;						if(item!=oldItem)					controller->ControlMessage(icon,modifiers,state);				}			else  SetState(i,OFFSTATE); 			}		}	thePane->SetPane();	}// } DAS-VR-VRTOOLS 8/22/93void DesignButton::MouseUp(int item,int oldItem, long modifiers)	{	int icon;		if(item<0)return;		icon=GetChar(item); // Convert to character	switch(icon)		{		case bGOBACK:			VSendMessage(MSG_GOBACK);			break;		}	}void ExpandPane::Init(CadControl *ctrl)	{	controller=ctrl;		eB=new(ExpandButton);	eB->cButtonSet();	eB->Init(ctrl);	SetButton(eB);	}voidExpandPane::CalcSize(Rect *r, Point *p, int type, int warning)	{	int width,height,l;	Rect br;		controller->GetPlace(r,warning,toolVRExpand);	if(vButton)		{		vButton->bWidth=r->right-r->left;		vButton->bHeight=r->bottom-r->top;		vButton->CalcSize(&br, NULL);// DAS-VBUTTON 8/17/93		}	}voidExpandPane::Display(int type, int h, int v)	{	Rect r;	V_Console::Display(type,h,v);	/* The following is to put a pretty black line around the pane.	 * Needless to say, this is pretty irrelevent under Windows, so we need to	 * think about what else we can do here. DAS 8/13/93	 */	r=dataRect;	r.top--;	r.left--;	r.right++;	r.bottom++;	VClipRect(&r);	VForeColor(&vBlack);	VFrameRect(&r);	VClipRect(&dataRect);	}void ExpandButton::cButtonSet()	{	cButton(1);// There is only one button	controller = NULL;		AppendButton(bEXPAND);	SetState(0,ONSTATE);//turn the expand tool on	SetHelp(0,TXTB_HIDETOOLS);// DAS-VR-HELP 9/30/93	}void ExpandButton::Init(CadControl *cntrl)	{	controller=cntrl;	}	void ExpandButton::MouseDown(int item,long modifiers)	{	// nothing to do here, wait till the mouse button is released	}	void ExpandButton::MouseUp(int item,int oldItem, long modifiers)	{	if(item==0)		{		controller->vrTools->SetState(!controller->vrTools->GetState());// { DAS-VR-HELP 9/30/93		if(controller->vrTools->GetState())			SetHelp(0,TXTB_HIDETOOLS);		else SetHelp(0,TXTB_SHOWTOOLS);// } DAS-VR-HELP 9/30/93		SetState(0,controller->vrTools->GetState());		thePane->theWindow->Resize(FALSE);		thePane->theWindow->Cleanup();		}	}	// DAS-VR 8/21/93void VRColor::CalcSize(Rect *r,Point *p,int type,int warning)	{	controller->GetPlace(r,warning,toolColorVR);	}	// ABD MERGE13 WILLIAMS 9/17/93 removed VRTexture from herevoid VRFiller::SetController(CadControl *ctrl)	{	controller=ctrl;	}	void VRFiller::CalcSize(Rect *r,Point *p,int type,int warning)	{	Rect r2;	r2=*r;	controller->GetPlace(r,warning,toolTextureVR);	// ABD WILLIAMS MERGE12 9/12/93	r->top=r->bottom;	r->bottom=r2.bottom;	}// DAS-VR-FIX 9/11/93 added right line in 1 and 2 bit modesvoid VRFiller::Display(int type, int h, int v)	{	if(depth>=4)		{		ShortColorButton(&dataRect,onColor);		}	else		{		Rect r;				VEraseRect(&dataRect);		r=dataRect;		VMoveTo(r.right-1,r.top);		VLineTo(r.right-1,r.bottom);		}	}#endif //VR