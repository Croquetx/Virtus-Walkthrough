#include "VTypes.h"#if VR#include "VRLBLIST.H"#include "VRLBITEM.H"#include "LIBITEM.H"#include "LIBINDEX.H"#include "LIBDEFS.H"#include "LBVCNTRL.H"#include "POLYHDRN.H"#include "VMDL.H"#include "APPMSSGS.H"#include "APPTEXT.H"#include "TOOLDEF.H"#include "MISC.H"#include "VIEW.H"#include "Observer.h"#include "SHOWTEST.H"#include "VGraphic.h"#include "Drawing.h"#include "Position.h"#include "VMath.h"#include "VSound.h"#include "APPDEFLT.H"#include "VDialog.h"#include "CVEnvirn.h"#include "VFile.h"#include "VRLibs.h"#include "WalkThru.h"#include "WalkBPne.h"#include "Library.h"#include "VMain.h"#include "VRwlkpan.h"#include "VWindow.h"#include "Walkthru.h"#include "BallHelp.h" // DAS-VR-HELP 9/30/93#include "VDebug.h"#include <stdio.h>#include <string.h>#include <math.h>#if WINDOWS#include <ctype.h> // BILBIL - 11/30/93#endif //WINDOWSvoidVRLibraryTitle::cPane(int flag)	{	Rect r;	extern int gNextVRLib3D;	extern int gNextVRLib2D;	controller = NULL;	V_Pane::cPane(flag);	moveSide = FALSE;		button = new(V_BItem);	button->cBItem(0x20);	r = dataRect;	vrLibPopUp = new(LibraryFilesPopUp);	vrLibPopUp->cItem();	vrLibPopUp->SetRect(&r);	//vrLibPopUp->SetText("Basic Shapes");	vrLibPopUp->Install(this);	AddItem(vrLibPopUp);	if (((WalkDocument*)(ActiveDocument()))->currently_3d)	// MERGE26		vrLibPopUp->SetValue(gNextVRLib3D + 1);				// MERGE26	else													// MERGE26		vrLibPopUp->SetValue(gNextVRLib2D + 1);				// MERGE26	}void VRLibraryTitle::dPane()	{	button->dBItem();	V_Pane::dPane();		// will destroy vrLibPopUp (a V_Item)	}void VRLibraryTitle::SetController(struct Controller *c)	{	controller = c;	if (vrLibPopUp) vrLibPopUp->SetController(c);	}void  VRLibraryTitle::CalcSize(Rect *r,Point *p,int type,int warning){ 	controller->GetPlace(r,warning,toolVRPTitle); 	vrLibPopUp->SetRect(r);}void VRLibraryTitle::Display(int type,int h,int v)	{	Rect	r,r2;	RGBColor	color;    VGrafPort   tp;    VGrafDevice gd;    char str[256];    int desired_width;	// MERGE17		VGetPort(&tp, &gd);	SetMetaPort();		r=dataRect;	r.right -= r.left;	r.bottom -= r.top;	r.left = 0;	r.top = 0;	desired_width = (r.right - r.left) - 30;	// MERGE17	button->SetState(OFFSTATE);	button->MoveButton(&r);	color = vBlack;	if(depth>=4)		button->CDraw();	else 		button->MDraw();		VForeColor(&vBlack);	TextSetUp(vAppFont,vAppFontSize,vBold);		VMoveTo(r.left+12,r.top+13);	vrLibPopUp->GetText(str);	// ELVIS#if MACINTOSH	Ellipsis(str, desired_width);	// MERGE17	DrawText(str,0,strlen(str));#elif WINDOWS	r.left += 12;	r.top += 13;	VTextMode(vSrcXor);	Ellipsis(str, desired_width);	// jca 1 Oct 93	VDrawText(str,0,strlen(str), &r);	// ELVIS#endif //WINDOWS	TextSetUp(vSystemFont,vSystemFontSize,vNormal);	r2 = dataRect;#if MACINTOSH	PenNormal();#elif WINDOWS	// ELVIS    VSetPenNormal();#endif // WINDOWS	VMoveTo(r2.right - 15, r2.bottom - 8);	VLineTo(r2.right - 15, r2.bottom - 8);	VMoveTo(r2.right - 16, r2.bottom - 9);	VLineTo(r2.right - 14, r2.bottom - 9);	VMoveTo(r2.right - 17, r2.bottom - 10);	VLineTo(r2.right - 13, r2.bottom - 10);	VMoveTo(r2.right - 18, r2.bottom - 11);	VLineTo(r2.right - 12, r2.bottom - 11);	VMoveTo(r2.right - 19, r2.bottom - 12);	VLineTo(r2.right - 11, r2.bottom - 12);	VMoveTo(r2.right - 20, r2.bottom - 13);	VLineTo(r2.right - 10, r2.bottom - 13);	r = dataRect;	MetaCopy(&r);	UnsetMetaPort();	VSetPort(tp, gd);	}void VRLibraryTitle::MouseDown(Point p,long modifiers){Rect r;int length;int old;long result;	if (!active) return;	if(modifiers&doubleClick)	{	}	else	{		V_Pane::MouseDown(p,modifiers);	}}void VRLibraryTitle::Track(Point p,long modifiers,int lastCall)	{		V_Pane::Track(p,modifiers,lastCall);	}void VRLibraryTitle::MouseUp(Point p,long modifiers) 	{ 		V_Pane::MouseUp(p,modifiers);	}// { DAS-VR-HELP 9/30/93voidVRLibraryTitle::TrackHelp(Point pt, long modifier)// DAS-VWINDOWS 9/30/93	{	Rect r;		r=dataRect;	Bubble(pt,&r,TXTB_SELECTGALLERY);	}// } DAS-VR-HELP 9/30/93			/*========================================================================= * void ViewCameraButton::cButtonSet() *-------------------------------------------------------------------------*/void VRLibraryButton::cButtonSet()	{	cButton(-2);		AppendButton(bORBIT_LEFT);	AppendButton(bORBIT_RIGHT);	SetHelp(0,TXTB_ORBIT_LEFT);	SetHelp(1,TXTB_ORBIT_RIGHT);	}void VRLibraryButton::Orbit(int direction){Angle3D new_angle;Point3D new_point;Point3DFFixed new_point_ff;Angle3DFFixed new_angle_ff, rotate_angle, angle;Point3D center_point;Position *p;LibViewController *cntrl = (LibViewController*)controller;		if (!cntrl) return;	if (!cntrl->libraryList) return;	// determine the item center and default (initial) observer location and angle	center_point = cntrl->libraryList->GetItemCenter();	new_point = cntrl->libraryList->GetObsPoint();	new_point.z = cntrl->view->point.z;		p = new(Position);	p->cPosition();	p->SetOrigin3D(Point3D2FFixed(new_point));		// use a default angle -- we always rotate from initial angle	//new_angle_ff.roll.intg = new_angle_ff.roll.frac = 0;	//new_angle_ff.pitch.intg = new_angle_ff.pitch.frac = 0;	//new_angle_ff.yaw.intg = new_angle_ff.yaw.frac = 0;	//p->SetOrientation3D(new_angle_ff);	// update current_angle_yaw (instance variable)	if (direction == VR_ORBIT_LEFT)		cntrl->libraryList->current_angle_yaw += 4;	else		cntrl->libraryList->current_angle_yaw -= 4;	cntrl->libraryList->current_angle_yaw &= 0xFF;		// clamp to 0..255			rotate_angle.roll.intg = rotate_angle.roll.frac = 0;	rotate_angle.pitch.intg = rotate_angle.pitch.frac = 0;	rotate_angle.yaw = DblToFixed(((cntrl->libraryList->current_angle_yaw / 256.0) * 360.0) / 57.29577951);		p->Rotate3D(rotate_angle, Point3D2FFixed(center_point));	// set the new observer location and angle		new_point_ff = p->GetOrigin3D();	new_point.x = FFRound(new_point_ff.x);	new_point.y = FFRound(new_point_ff.y);	//new_point.z = FFRound(new_point_ff.z);	cntrl->view->SetPoint(new_point);		//angle = p->GetOrientation3D();	new_angle = cntrl->view->angle;	//new_angle.yaw = ((int)(((FixedToDbl(angle.yaw) * 57.29577951) / 360.0) * 256.0)) & 0xFF;	if (direction == VR_ORBIT_LEFT)		new_angle.yaw += 4;	else		new_angle.yaw -= 4;	new_angle.yaw &= 0xFF;	cntrl->view->SetAngle(new_angle);			p->dPosition();	cntrl->Request(NULL, msgUpdate, objObserver, 0);}void VRLibraryButton::MouseDown(int item,long modifiers)	{	int i;		thePane->UnsetPane();	switch(item)		{		case 0: 			Orbit(VR_ORBIT_LEFT);			break;		case 1:			Orbit(VR_ORBIT_RIGHT);			break;		}	thePane->SetPane();	}void VRLibraryButton::MouseUp(int item,int oldItem, long modifiers)	{	int i;		switch(item)		{		case 0:		case 1:			for( i=0 ; i<2 ; i++ )				SetState(i,OFFSTATE);			break;		}	}voidVRLibraryButton::MouseTrack(int item,int olditem,long modifiers)	{	switch(item)		{		case 0:			Orbit(VR_ORBIT_LEFT);			break;		case 1: 			Orbit(VR_ORBIT_RIGHT);			break;		}	}	/*-----------------------------------------------------------------------------------------*/void  VRConsole::CalcSize(Rect *r,Point *p,int type,int warning){ int width,height,l;Rect br;		controller->GetPlace(r,warning,toolVRButtons);/* JAM 11/5/93 if buttons below preview window are moved down   one pixel on Windows, then a row of garbage appears */#if MACINTOSH	r->top++;	r->bottom++;#endif	if(vButton)		{		l=vButton->ALength();		if(l)			vButton->bWidth=(r->right-r->left)/l;		else			vButton->bWidth=18;		vButton->bHeight=(r->bottom-r->top);		br.top=br.left=0;		br.right=r->right-r->left;		br.bottom=r->bottom-r->top;		vButton->CalcSize(&br, NULL);// DAS-VBUTTON 8/17/93		}}voidVRConsole::Init(struct ViewController *ctrl, struct View *vw){	controller = ctrl;		wB = (WalkButton*)new(VRLibraryButton);	wB->cButtonSet();	wB->Init(ctrl,(Observer*)vw);	SetButton(wB);}/*-----------------------------------------------------------------------------------------*/voidLibraryFilesPopUp::AddItems(){struct V_File **fls;extern V_Array *gGalleries3D;extern int gNextVRLib3D;extern V_Array *gGalleries2D;extern int gNextVRLib2D;int i;int j;	if (((WalkDocument*)ActiveDocument())->currently_3d)	{		if (!gGalleries3D) return;			fls = (V_File**)gGalleries3D->Use();		for ( i = 0 ; i < gGalleries3D->ALength() ; i++ )		{		char str[256], temp_str[256];		int  j;#if MACINTOSH			fls[i]->GetFName(str);#elif WINDOWS// This code now displays the filename w/o extensions and appends gallery to each item.// BILBIL - 11/29/93			fls[i]->GetName(temp_str);#if ENGLISH			for (j = 1; j < strlen(temp_str);j++)			// from NAME.WLB to Name				temp_str[j] = (char)tolower(temp_str[j]);	// BILBIL - 11/30/93#endif // ENGLISH			sprintf(str,TXTT_GALLERY3D, temp_str);#endif //MACINTOSH			Append(str);		}		gGalleries3D->Unuse();#if WINDOWS        SetValue(gNextVRLib3D + 1);#endif //WINDOWS	}	else	{		if (!gGalleries2D) return;			fls = (V_File**)gGalleries2D->Use();		for ( i = 0 ; i < gGalleries2D->ALength() ; i++ )		{		char str[256], temp_str[256];		int  j;#if MACINTOSH			fls[i]->GetFName(str);#elif WINDOWS// This code now displays the filename w/o extensions and appends gallery to each item.// BILBIL - 11/29/93			fls[i]->GetName(temp_str);#if ENGLISH			for (j = 1; j < strlen(temp_str);j++)			// from NAME.WLB to Name				temp_str[j] = (char)tolower(temp_str[j]);	// BILBIL - 11/30/93#endif // ENGLISH			sprintf(str,TXTT_GALLERY2D, temp_str);#endif //MACINTOSH			Append(str);		}		gGalleries2D->Unuse();#if WINDOWS		SetValue(gNextVRLib2D + 1);#endif //WINDOWS	}}voidLibraryFilesPopUp::SetController(struct Controller *c){	controller = c;}void LibraryFilesPopUp::Display(void){// do nothing}intLibraryFilesPopUp::MouseDown(Point p,long modifiers){int result;Rect r;	result = V_PopMenu::MouseDown(p,modifiers);	r = thePane->dataRect;	SetRect(&r);	return result;}voidLibraryFilesPopUp::SetRect(Rect *r){	Rect nR;	char *textPtr;	nR = *r;#if MACINTOSH	V_Text::SetRect(&nR);	popRect = bounds;	popRect.top--;	popRect.bottom++;	//popRect.left-=MENUPOP_PAD;	//popRect.right+=MENUPOP_PAD;#elif WINDOWS	nR.bottom += 120;	V_PopMenu::SetRect(&nR);#endif}voidLibraryFilesPopUp::Action()		// MERGE15{	extern V_Array *gGalleries3D;	extern int gNextVRLib3D;	extern V_Array *gGalleries2D;	extern int gNextVRLib2D;	#if WINDOWS	GetValue();#endif //WINDOWS	if (value != 0)	{		if (((WalkDocument*)(ActiveDocument()))->currently_3d)		{			if (value < 1) return;			if (value > gGalleries3D->ALength()) return;						gNextVRLib3D = value - 1;			VSendMessage(OPEN_VR_3D_LIB);		}		else		{			if (value < 1) return;			if (value > gGalleries2D->ALength()) return;						gNextVRLib2D = value - 1;			VSendMessage(OPEN_VR_2D_LIB);		}	}}	#endif //VR