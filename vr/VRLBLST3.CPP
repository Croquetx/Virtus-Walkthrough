#include "VTypes.h"#if VR#include "VRLBLIST.H"#include "VRLBITEM.H"#include "LIBITEM.H"#include "LIBINDEX.H"#include "LIBDEFS.H"#include "LBVCNTRL.H"#include "POLYHDRN.H"#include "VMDL.H"#include "APPMSSGS.H"#include "APPTEXT.H"#include "TOOLDEF.H"#include "MISC.H"#include "VIEW.H"#include "Observer.h"#include "SHOWTEST.H"#include "VGUTIL.H"#include "VGraphic.h"#include "Drawing.h"#include "Position.h"#include "VMath.h"#include "VSound.h"#include "APPDEFLT.H"#include "VDialog.h"#include "CVEnvirn.h"#include "VFile.h"#include "VRLibs.h"#include "WalkThru.h"#include "WalkBPne.h"#include "VWindow.h"#include "VGUtil.h"#include "Vwndutls.h"#include "BALLHELP.H" // DAS-VRHELP 10/14/93#include <stdio.h>#include <string.h>#include <math.h>void VRLibraryItemTitle::cPane(int flag)	{	Rect r;	controller = NULL;	V_Pane::cPane(flag);	moveSide = FALSE;		button = new(V_BItem);	button->cBItem(0x20);	}void VRLibraryItemTitle::dPane()	{	button->dBItem();	V_Pane::dPane();		// will destroy vrLibPopUp (a V_Item)	}void VRLibraryItemTitle::SetController(struct Controller *c)	{	controller = c;	}void  VRLibraryItemTitle::CalcSize(Rect *r,Point *p,int type,int warning){ 	controller->GetPlace(r,warning,toolVRPItem); }void VRLibraryItemTitle::Display(int type,int h,int v)	{	Rect	r;	RGBColor	color;    VGrafPort   tp;    VGrafDevice gd;    char str[256];    VRLibraryItem *li;    int desired_width;		VGetPort(&tp, &gd);	SetMetaPort();		r=dataRect;	r.right -= r.left;	r.bottom -= r.top;	r.left = 0;	r.top = 1;	// MERGE13	desired_width = (r.right - r.left) - 20;	// MERGE17	button->SetState(OFFSTATE);	button->MoveButton(&r);	color = vBlack;	if(depth>=4)		button->CDraw();	else 		button->MDraw();	VForeColor(&vBlack);	TextSetUp(vAppFont,vAppFontSize,vBold);		VMoveTo(r.left+12,r.top+13);		li = (VRLibraryItem *)plc(controller)->libraryList->GetCurrentItem();	if (li)		li->GetName(str);	else		strcpy(str, "");		// MERGE21			// ELVIS#if MACINTOSH	Ellipsis(str, desired_width);		// MERGE17	DrawText(str,0,strlen(str));#elif WINDOWS	{    int alignment;	r.left += 12;	r.top += 3;	VTextMode(vSrcXor);//	alignment = SetTextAlign(GetGraphicContext(), TA_LEFT|TA_CENTER);	VDrawText(str,0,strlen(str), &r);//	SetTextAlign(GetGraphicContext(), alignment);	}	// ELVIS#endif //WINDOWS	TextSetUp(vSystemFont,vSystemFontSize,vNormal);		r = dataRect;	VForeColor(&vBlack);		// MERGE13	VMoveTo(r.left, r.top);		// MERGE13	VLineTo(r.right, r.top);	// MERGE13	MetaCopy(&r);	UnsetMetaPort();	VSetPort(tp, gd);	}void VRLibraryItemTitle::MouseDown(Point p,long modifiers){}void VRLibraryItemTitle::Track(Point p,long modifiers,int lastCall)	{	}void VRLibraryItemTitle::MouseUp(Point p,long modifiers) 	{ 	}// { DAS-VRHELP 10/14/93void VRLibraryItemTitle::TrackHelp(Point pt,long modifier)	{	Rect r;		r=dataRect;	Bubble(pt,&r,TXTB_ITEMTITLE);	}// } DAS-VRHELP 10/14/93void GrowPane::SetController(Controller *c)	{	controller = c;	}void GrowPane::CalcSize(Rect *r,Point *p,int type,int warning)	{#if MACINTOSH         // jca 2 Oct 93 {		r->left = r->right - 16;		r->top = r->bottom - 16;#elif WINDOWS		r->left = r->right = 0;		r->top = r->bottom = 0;#endif // MACINTOSH    // jca 2 Oct 93 }	}void GrowPane::Display(int type,int x,int y)	{	Rect	r;	#if MACINTOSH	r = dataRect;	SetMetaPort();		VEraseRect(&r);	TextSetUp(vButtonFont,vButtonFontSize,vNormal);	VMoveTo(dataRect.right-12,centerY);	DrawChar(58);/* the grow box */	TextSetUp(vSystemFont,vSystemFontSize,vNormal);	VMoveTo(dataRect.right-15,dataRect.top);	VLineTo(dataRect.right-15,dataRect.bottom);	VMoveTo(dataRect.left+1,dataRect.top+1);	VLineTo(dataRect.right,dataRect.top+1);	MetaCopy(&r);	UnsetMetaPort(); #elif WINDOWS	// ELVIS!!!!  No grow box under windows#endif // MACINTOSH	}void  GrowPane::MouseDown(Point p,long modifiers)	{#if MACINTOSH     // jca 2 Oct 93 {	extern Rect gLastLibRect;		// MERGE19	if (!active) return;	LocalToGlobal(&p);	theWindow->Grow(p);	theWindow->GetRect(&gLastLibRect);			// MERGE19	LocalToGlobalRect(&gLastLibRect);          // jca 3 Oct 93#elif WINDOWS	// ELVIS!!!!  No grow box under windows#endif // MACINTOSH   // jca 2 Oct 93 }	}	void  GrowPane::Track(Point p,long modifiers,int lastCall)	{#if MACINTOSH	// jca 2 Oct 93	VSetCursor(vCursorArrow);#elif WINDOWS	// ELVIS!!!!  No grow box under windows#endif // MACINTOSH     // jca 2 OCt 93 }	}#endif // VR