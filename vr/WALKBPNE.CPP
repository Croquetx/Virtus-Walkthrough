#include "VTypes.h"#if VR#include "CVDefs.h"#include "WalkPane.h"#include "WalkBPne.h"#include "ToolDef.h"#include "VwCntrl.h"#include "View.h"#include "WalkDefs.h"#include "AppMssgs.h"#include "AppDeflt.h"#include "AppText.h"#include "WMenus.h"/* THIS IS FOR PRIORITY enum */#include "Observer.h"#include "BallHelp.h"#include "Misc.h"#include "VMain.h"#include "VGraphic.h"#include "VGUtil.h"#include "VWindow.h"#include "VPrint.h"#include "VMemUtil.h"#include "VError.h"#include "VSound.h"#include <stdio.h>#include <stddef.h>// DAS-VR 8/21/93 removed additional crap in this file.// DAS-VR 8/17/93 removed some crap herevoid WalkBPane::Init(ViewController *ctrl, View *vw)	{	controller=ctrl;		wB=new(WalkButton);	wB->cButtonSet();	wB->Init(ctrl,vw);	SetButton(wB);	}voidWalkBPane::CalcSize(Rect *r, Point *p, int type, int warning)	{	int width,height,l;	Rect br;	#if VPLAYER	r->top = r->bottom-(VScrollWidth()-1);	#if MACINTOSH		r->right -= (VScrollWidth()-1);	#endif //MACINTOSH#else	controller->GetPlace(r,warning,toolBWalk);#endif //VPLAYER/* JAM 11/5/93 if buttons below preview window are moved down   one pixel on Windows, then a row of garbage appears */#if MACINTOSH	r->top++;	r->bottom++;#endif	if(vButton)		{		l=vButton->ALength();		if(l)			vButton->bWidth=(r->right-r->left)/l;		else			vButton->bWidth=18;		vButton->bHeight=(r->bottom-r->top);		br.top=br.left=0;		br.right=r->right-r->left;		br.bottom=r->bottom-r->top;		vButton->CalcSize(&br,NULL);// DAS-VBUTTON 8/17/93		}	}voidWalkBPane::Display(int type, int h, int v)	{	Rect r;	V_Console::Display(type,h,v);	/* The following is to put a pretty black line at the top of the pane.	 * Needless to say, this is pretty irrelevent under Windows, so we need to	 * think about what else we can do here. DAS 8/13/93	 */	r=dataRect;	r.top--;	VClipRect(&r);	VForeColor(&vBlack);	VMoveTo(r.left,r.top);	VLineTo(r.right,r.top);	VClipRect(&dataRect);	}	// { DAS-VR-WALKBPNE 8/24/93voidWalkBPane::SetTool(int tnum)	{	tool=tnum;	}	intWalkBPane::GetTool(void)	{	return tool;	}// } DAS-VR-WALKBPNE 8/24/93void WalkButton::cButtonSet()	{// DAS-VBUTTON 8/17/93 changes for resizing buttons	cButton(-12);// This number is big because there is only one row.	controller = NULL;	#if VPLAYER	AppendButton(bWALK_STOP);	AppendButton(bWALK_PLAY);	AppendButton(bWALK_PAUSE);#else	AppendButton(bWALK);	AppendButton(bSELECTSURFACE);	AppendButton(bSELECTPOLY);#endif //VPLAYER		AppendButton(bHBAR); // DAS-VBUTTON 8/17/93	AppendButton(bMOVEFORWARD);	AppendButton(bMOVEBACKWARD);	AppendButton(bROTLEFT);	AppendButton(bROTRIGHT);	AppendButton(bMOVEUP);	AppendButton(bMOVEDOWN);		AppendButton(bHBAR); // BILBIL 9/09/93	AppendButton(bHOME);		SetState(0,ONSTATE);//turn the walking tool on// { DAS-VR-HELP 9/30/93#if VPLAYER	SetHelp(0,TXTB_PLAYERSTOP);	SetHelp(1,TXTB_PLAYERPLAY);	SetHelp(2,TXTB_PLAYERPAUSE);#else	SetHelp(0,TXTB_WALKBUTTON);	SetHelp(1,TXTB_SELECTSURFACE);	SetHelp(2,TXTB_SELECTOBJECT);#endif //VPLAYER	SetHelp(3,TXTB_NULL);	SetHelp(4,TXTB_MOVEFORWARD);	SetHelp(5,TXTB_MOVEBACKWARD);	SetHelp(6,TXTB_ROTLEFT);	SetHelp(7,TXTB_ROTRIGHT);	SetHelp(8,TXTB_MOVEUP);	SetHelp(9,TXTB_MOVEDOWN);	SetHelp(10,TXTB_NULL);	SetHelp(11,TXTB_HOMEBUTTON);// } DAS-VR-HELP 9/30/93	}void WalkButton::Init(Controller	*ctrl, View *vw)	{	controller = ctrl;	view = vw;	}void WalkButton::MouseDown(int item,long modifiers)	{	int i;	if ((item > 3) && (item < 10))		SetState(item,ONSTATE);#if (!VPLAYER)	if(item>3) // DAS-VR-Fix 8/24/93#endif //!VPLAYER		thePane->UnsetPane();	// DAS-VR 8/22/93	switch(item)		{		case 0: /*walk in 3D view*/		case 1: /*select surface*/		case 2: /*select polyhedron*/			for(i=0;i<3;i++)				if(i==item)SetState(i,ONSTATE); 				else SetState(i,OFFSTATE);#if (!VPLAYER)			((WalkBPane*)thePane)->SetTool(item);// DAS-VR 8/24/93#endif //!VPLAYER			break;		case 3: /*blank*/			break;		case 4: /*move forward*/			if (pvc(controller)->walkPane->GetOptions(VIEW_COLLISIONS))	// MERGE26				view->MoveCollision(FSPEED, 0, 0,0, 0, 0);			// MERGE26			else													// MERGE26				view->Move(FSPEED, 0, 0,0, 0, 0);			controller->Request(NULL, msgUpdate, objObserver, 0);			break;		case 5: /*move backward*/			if (pvc(controller)->walkPane->GetOptions(VIEW_COLLISIONS))	// MERGE26				view->MoveCollision(-FSPEED, 0, 0,0, 0, 0);			// MERGE26			else													// MERGE26				view->Move(-FSPEED, 0, 0,0, 0, 0);			controller->Request(NULL, msgUpdate, objObserver, 0);			break;		case 6: /*rotate left*/			if (pvc(controller)->walkPane->GetOptions(VIEW_COLLISIONS))	// MERGE26				view->MoveCollision(0, 0, 0,LRSPEED, 0, 0);			// MERGE26			else													// MERGE26				view->Move(0, 0, 0,LRSPEED, 0, 0);			controller->Request(NULL, msgUpdate, objObserver, 0);			break;		case 7: /*rotate right*/			if (pvc(controller)->walkPane->GetOptions(VIEW_COLLISIONS))	// MERGE26				view->MoveCollision(0, 0, 0,-LRSPEED, 0, 0);		// MERGE26			else													// MERGE26				view->Move(0, 0, 0,-LRSPEED, 0, 0);			controller->Request(NULL, msgUpdate, objObserver, 0);			break;		case 8: /*move up*/			if (pvc(controller)->walkPane->GetOptions(VIEW_COLLISIONS))	// MERGE26				view->MoveCollision(0, 0, UDSPEED,0, 0, 0);			// MERGE26			else													// MERGE26				view->Move(0, 0, UDSPEED,0, 0, 0);			controller->Request(NULL, msgUpdate, objObserver, 0);			break;		case 9: /*move down*/			if (pvc(controller)->walkPane->GetOptions(VIEW_COLLISIONS))	// MERGE26				view->MoveCollision(0, 0, -UDSPEED,0, 0, 0);		// MERGE26			else													// MERGE26				view->Move(0, 0, -UDSPEED,0, 0, 0);			controller->Request(NULL, msgUpdate, objObserver, 0);			break;		case 10: /*blank*/			break;		case 11: /*home*/		// DAS-VR 8/17/93			VSendMessage(MSG_VIEWHOME);		//	((Observer  *)view)->SetPosition(Pt3DFFZero,FFAngleZero);		//	controller->Request(NULL, msgUpdate, objObserver, 0);		//	controller->Request(NULL, msgReset, objAxis, 0);						break;		}#if (!VPLAYER)	if(item>3)// DAS-VR-Fix 8/24/93#endif //!VPLAYER		thePane->SetPane();	}	void WalkButton::MouseUp(int item,int oldItem, long modifiers)	{	int i;		// DAS-VR-Fix 9/3/93	switch(item)		{#if VPLAYER		case 0: /* Stop recording/Playing a path*/			SetState(0,ONSTATE);			SetState(1,OFFSTATE);			SetState(2,OFFSTATE);			thePane->UnsetPane();			((Observer*)view)->Record(FALSE,FALSE);			((Observer*)view)->frame = 0;			controller->Request(NULL, msgUpdate, objObserver, 0);			thePane->SetPane();			break;		case 1: /* Play a path */			SetState(0,OFFSTATE);			SetState(1,ONSTATE);			SetState(2,OFFSTATE);			// MERGE-1/28 [[[			if (((Observer*)view)->path->ALength() == 0)			{				SetState(0,ONSTATE);				SetState(1,OFFSTATE);				SetState(2,OFFSTATE);				VPlaySound(beepSound);			}			else			{				((Observer*)view)->Walk();		// walk until mouse button pressed				thePane->UnsetPane();	// MERGE-1/28				thePane->SetPane();		// MERGE-1/28				SetState(0,OFFSTATE);				SetState(1,OFFSTATE);				SetState(2,ONSTATE);			}			// MERGE-1/28 ]]]			break;		case 2: /* Pause a path */			if (((Observer*)view)->path->ALength() > 0)				{				SetState(0,OFFSTATE);					SetState(1,OFFSTATE);				SetState(2,ONSTATE);	// pause				}			else	// no saved path				{				SetState(0,ONSTATE);				SetState(1,OFFSTATE);				SetState(2,OFFSTATE);				VPlaySound(beepSound);	// MERGE-1/28				}			break;#else		case 0: /*walk in 3D view*/		case 1: /*select surface*/		case 2: /*select polyhedron*/			for(i=0;i<3;i++)				if(i==item)SetState(i,ONSTATE); 				else SetState(i,OFFSTATE);			((WalkBPane*)thePane)->SetTool(item);// DAS-VR 8/24/93			break;#endif //VPLAYER		case 3: /*blank*/			break;		case 10: /*blank*/			break;		case 4: /*move forward*/		case 5: /*move backward*/		case 6: /*rotate left*/		case 7: /*rotate right*/		case 8: /*move up*/		case 9: /*move down*/		case 11: /*home*/		default: /*no button*/ // DAS-VR-BUGFIX 9/3/93			thePane->UnsetPane();			for(i=4;i<10;i++)SetState(i,OFFSTATE); // these are spring-loaded			SetState(11,OFFSTATE); // BILBIL - added bar between move btns and home.			controller->Request(NULL, msgReset, objAxis, 0);						thePane->SetPane();			break;		}	// DAS-VR-Fix 9/3/93	}// DAS-VBUTTON 8/21/93 use MouseTrack instead of VMouseTrackvoidWalkButton::MouseTrack(int item,int olditem,long modifiers)	{	V_BItem *bItem;	Point pt;	int i; // DAS-VR-FIX 9/3/93#if (!VPLAYER)	if(item>3)// DAS-VR-Fix 8/24/93#endif //!VPLAYER		thePane->UnsetPane();	switch(item)		{		case 0: /*walk in 3D view*/		case 1: /*select surface*/		case 2: /*select polyhedron*/			for(i=0;i<3;i++) // DAS-VR-FIX 9/3/93				SetState(i,item==i?ONSTATE:OFFSTATE);#if (!VPLAYER)			((WalkBPane*)thePane)->SetTool(item);#endif //!VPLAYER			break;		case 3: /*blank*/			break;		case 4: /*move forward*/			if (pvc(controller)->walkPane->GetOptions(VIEW_COLLISIONS))	// MERGE26				view->MoveCollision(FSPEED, 0, 0,0, 0, 0);			// MERGE26			else													// MERGE26				view->Move(FSPEED, 0, 0,0, 0, 0);			controller->Request(NULL, msgUpdate, objObserver, 0);			break;		case 5: /*move backward*/			if (pvc(controller)->walkPane->GetOptions(VIEW_COLLISIONS))	// MERGE26				view->MoveCollision(-FSPEED, 0, 0,0, 0, 0);			// MERGE26			else													// MERGE26				view->Move(-FSPEED, 0, 0,0, 0, 0);			controller->Request(NULL, msgUpdate, objObserver, 0);			break;		case 6: /*rotate left*/			if (pvc(controller)->walkPane->GetOptions(VIEW_COLLISIONS))	// MERGE26				view->MoveCollision(0, 0, 0,LRSPEED, 0, 0);			// MERGE26			else													// MERGE26				view->Move(0, 0, 0,LRSPEED, 0, 0);			controller->Request(NULL, msgUpdate, objObserver, 0);			break;		case 7: /*rotate right*/			if (pvc(controller)->walkPane->GetOptions(VIEW_COLLISIONS))	// MERGE26				view->MoveCollision(0, 0, 0,-LRSPEED, 0, 0);		// MERGE26			else													// MERGE26				view->Move(0, 0, 0,-LRSPEED, 0, 0);			controller->Request(NULL, msgUpdate, objObserver, 0);			break;		case 8: /*move up*/			if (pvc(controller)->walkPane->GetOptions(VIEW_COLLISIONS))	// MERGE26				view->MoveCollision(0, 0, UDSPEED,0, 0, 0);			// MERGE26			else													// MERGE26				view->Move(0, 0, UDSPEED,0, 0, 0);			controller->Request(NULL, msgUpdate, objObserver, 0);			break;		case 9: /*move down*/			if (pvc(controller)->walkPane->GetOptions(VIEW_COLLISIONS))	// MERGE26				view->MoveCollision(0, 0, -UDSPEED,0, 0, 0);		// MERGE26			else													// MERGE26				view->Move(0, 0, -UDSPEED,0, 0, 0);			controller->Request(NULL, msgUpdate, objObserver, 0);			break;		case 10: /*blank*/			break;		case 11: /*home*/			break;		default: // DAS-VR-FIX 9/3/93			for(i=0;i<12;i++)SetState(i,OFFSTATE);			SetState(((WalkBPane*)thePane)->GetTool(),ONSTATE);			break;		}#if (!VPLAYER)	if(item>3)// DAS-VR-Fix 8/24/93#endif //!VPLAYER		thePane->SetPane();	}int WalkButton::GetTool(int start)	{/*	int		i,c = FALSE;			for(i=start;i<length;i++) 		if(ONSTATE == GetState(i)) { c = (unsigned char)GetChar(i); break; }	return(c);*/	}void WalkButton::Reset(int item)	{/*	int		c;	int 	i;		c=(unsigned char)GetChar(item);			controller->ControlMessage(c,0L,ONSTATE);		if(item<3)		for(i=0;i<3;i++) { if(i==item) SetState(i,ONSTATE); else  SetState(i,OFFSTATE); }		else		for(i=3;i<length;i++) { if(i==item) SetState(i,ONSTATE); else  SetState(i,OFFSTATE); }*/	}#endif //VR