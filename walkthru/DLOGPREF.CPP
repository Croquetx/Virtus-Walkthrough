/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "DlogPref.h"#include "Layout.h"#include "Cntrl.h"#include "AppText.h"#include "AppDeflt.h"#include "AppFiles.h"#include "Unit.h"#include "VMath.h"#include "VMain.h"#include "VGraphic.h"#include "VFile.h"#include "VDisplay.h"// MERGE-HMD [[[#if USE_HMD#include "HMD.h"#endif // USE_HMD// MERGE-HMD ]]]#include <stdio.h>#include <string.h>intActionText::Action(char c,long modifiers)	{	int result;		if(c != V_ENTER)		result = V_EditText::Action(c,modifiers);	else		{		((PrefDialog*)thePane)->GetResults(updateFlag);		result = TRUE;		}			return result;	}intPrefDialog::cPrefDialog( Controller *ctrl, int initType )	{#if VWT	V_Buffer	*buffer;	AppPreference	*realPref;	V_Array *buttonGroup;	Rect r;	int	result,w,h;	controller = ctrl;	prefObject = NULL;		realPref = controller->GetPreference();	realPref->LoadConfigure();		prefCopy = new(AppPreference);	prefCopy->cAppPreference();	buffer = new(V_Buffer);	buffer->cBuffer(DATA_OUT);	realPref->IO(buffer);	buffer->IOSetDirection(DATA_IN);	buffer->IOSetPosition(0);	prefCopy->IO(buffer);	buffer->dBuffer();	    SetTitle(layoutSpec[prfWindow].title);	r = layoutSpec[prfWindow].destRect;	w = r.right-r.left;    h = r.bottom-r.top;	CenterDialog(&r,w,h,0);	cDialog(&r);	useOffscreen = TRUE;	choiceText = new(V_Text);	choiceText->cItem();	choiceText->SetRect(&layoutSpec[prfTFormat].destRect);	choiceText->SetText(layoutSpec[prfTFormat].title);	choices = new(ChoicePopMenu);	choices->cItem();	choices->SetRect(&layoutSpec[prfPFormat].destRect);	buttonGroup = new(V_Array);	buttonGroup->cArray(0,sizeof(V_CtrlButton_Die*),4);	doneButton = new(V_CtrlButton_Die);	doneButton->cItem();	doneButton->SetRect(&layoutSpec[prfBDone].destRect);	doneButton->SetText(layoutSpec[prfBDone].title);	doneButton->SetFlag(doneBFlag);	doneButton->SetGroup(buttonGroup);#if WINDOWS	doneButton->SetCtrlNumber(IDOK);#endif	SetDefBtn(doneButton);	cancelButton = new(V_CtrlButton_Die);	cancelButton->cItem();	cancelButton->SetRect(&layoutSpec[prfBCancel].destRect);	cancelButton->SetText(layoutSpec[prfBCancel].title);	cancelButton->SetFlag(cancelBFlag);	cancelButton->SetGroup(buttonGroup);#if WINDOWS    cancelButton->SetCtrlNumber(IDCANCEL);#endif	revertButton = new(V_CtrlButton_Die);	revertButton->cItem();	revertButton->SetRect(&layoutSpec[prfBRevert].destRect);	revertButton->SetText(layoutSpec[prfBRevert].title);	revertButton->SetFlag(revertBFlag);	revertButton->SetGroup(buttonGroup);#if WINDOWS    revertButton->SetCtrlNumber(ID_VIRTUS_REVERT);#endif#if !SAVE_DISABLED  // jca 10FEB95	defaultButton = new(V_CtrlButton_Die);	defaultButton->cItem();	defaultButton->SetRect(&layoutSpec[prfBDefault].destRect);	defaultButton->SetText(layoutSpec[prfBDefault].title);	defaultButton->SetFlag(defaultBFlag);	defaultButton->SetGroup(buttonGroup); #if WINDOWS	defaultButton->SetCtrlNumber(ID_VIRTUS_DEFAULT); #endif#endif //!SAVE_DISABLED  // jca 10FEB95	prefType = -1;	if (initType)		SetPrefType(initType);	else		SetPrefType(realPref->lastItem);	Show();#if WINDOWS	choices->FocusOn();	// jca.  set the focus on the first group#endif	/* loop so that the revert and default buttons don't send it away */	while (TRUE)    	{		result = Modal();		if(GetResults(result)) break;		}	prefCopy->dAppPreference();	//JAM 14Feg95 hack--null out prefObject when deleting so we can avoid    //referencing through deleted prefObject in update case in PrefObject::GetResults	if(prefObject)		{		prefObject->dPrefObject();	//vr1.0.1 jam 10/6/94 delete pref object		prefObject = NULL;        }	Delete();	return result;// BILBIL - VWT - you are all done for this method, now VR has a go#elif VR	V_Buffer	*buffer;	AppPreference	*realPref;	V_Array *buttonGroup;	Rect r;	int	result,w,h;	controller = ctrl;	prefs = NULL;		realPref = controller->GetPreference();	realPref->LoadConfigure();		prefCopy = new(AppPreference);	prefCopy->cAppPreference();	buffer = new(V_Buffer);	buffer->cBuffer(DATA_OUT);	realPref->IO(buffer);	buffer->IOSetDirection(DATA_IN);	buffer->IOSetPosition(0);	prefCopy->IO(buffer);	buffer->dBuffer();	    SetTitle(layoutSpec[prfWindow].title);	r = layoutSpec[prfWindow].destRect;	w = r.right-r.left;    h = r.bottom-r.top;	CenterDialog(&r,w,h,0);	cDialog(&r);	useOffscreen = TRUE;	buttonGroup = new(V_Array);	buttonGroup->cArray(0,sizeof(V_CtrlButton_Die*),4);#if !SAVE_DISABLED // jca 22Feb95	makeDefaultBox = new(V_CtrlCheck);	makeDefaultBox->cItem();	makeDefaultBox->SetRect(&layoutSpec[prfCSave].destRect);	makeDefaultBox->SetText(layoutSpec[prfCSave].title); #if WINDOWS	makeDefaultBox->SetCtrlNumber(ID_VIRTUS_DEFAULT); #endif#endif // !SAVE_DISABLED // jca 22Feb95	defaultButton = new(V_CtrlButton_Die);	defaultButton->cItem();	defaultButton->SetRect(&layoutSpec[prfBDefault].destRect);	defaultButton->SetText(layoutSpec[prfBDefault].title);	defaultButton->SetFlag(revertBFlag);	defaultButton->SetGroup(buttonGroup);#if WINDOWS    defaultButton->SetCtrlNumber(ID_VIRTUS_REVERT);#endif	cancelButton = new(V_CtrlButton_Die);	cancelButton->cItem();	cancelButton->SetRect(&layoutSpec[prfBCancel].destRect);	cancelButton->SetText(layoutSpec[prfBCancel].title);	cancelButton->SetFlag(cancelBFlag);	cancelButton->SetGroup(buttonGroup);#if WINDOWS    cancelButton->SetCtrlNumber(IDCANCEL);#endif	doneButton = new(V_CtrlButton_Die);	doneButton->cItem();	doneButton->SetRect(&layoutSpec[prfBDone].destRect);	doneButton->SetText(layoutSpec[prfBDone].title);	doneButton->SetFlag(doneBFlag);	doneButton->SetGroup(buttonGroup);#if WINDOWS	doneButton->SetCtrlNumber(IDOK);#endif	SetDefBtn(doneButton);#if MACINTOSH	divider = new(V_OutlineBox);	divider->cItem();	divider->SetRect(&layoutSpec[prfUBar].destRect);	title = new(V_Text);	title->cItem();	title->SetRect(&layoutSpec[prfTTitle].destRect);	title->SetText(layoutSpec[prfTTitle].title);#endif //MACINTOSH// BILBIL - we need to add the new controls here and create copies of the prefs	Show();	/* loop so that the revert and default buttons don't send it away */	VSetCursor(vCursorArrow);	while (TRUE)    	{		result = Modal();		if(GetResults(result)) break;		}	prefCopy->dAppPreference();	prefs->dPrefObject();     	// jca 16AUG94 VR1.0.1 delete prefobject JAM 10/6/94    prefs = NULL;	//JAM 14Feb95	Delete();	return result;#endif //VWT	}#if VWTvoid PrefDialog::SetPrefType(int pt) 	{ 	oldPrefType = prefType;	prefType = pt; 	}#endif //VWTvoidPrefDialog::Display(int type,int h,int v)	{	V_ItemList	*oldItemList;	Rect	r;		r = dataRect;#if VWT	if(oldPrefType!=prefType)		{		VEraseRect(&r);		SetInterface();		}	oldPrefType = prefType ;	VEraseRect(&r);	choices->SetValue(prefType);#elif VR	if (prefs == NULL) SetInterface();	VEraseRect(&r);#endif //VWT	itemList->Display();	}			intPrefDialog::GetResults(int result)	{	AppPreference	*realPref,*factory;	WindowPreference	*windowPref;	V_Buffer	*buffer;	int			exitFlag;	realPref = controller->GetPreference();	switch(result)		{		case doneBFlag:#if VWT			realPref->lastItem = prefType;			prefObject->GetResults(prefCopy);#elif VR			prefs->GetResults(prefCopy);#endif //VWT			controller->SetPreference(prefCopy,FALSE);					controller->Request(NULL,msgEdit,objPreference,0);			buffer = new(V_Buffer);			buffer->cBuffer(DATA_OUT);			prefCopy->IO(buffer);			buffer->IOSetDirection(DATA_IN);			buffer->IOSetPosition(0);			realPref->IO(buffer);			buffer->dBuffer();            realPref->SaveConfigure();			exitFlag = TRUE;#if VR #if !SAVE_DISABLED // jca 22Feb95			if (makeDefaultBox->GetValue())				{				prefs->GetResults(prefCopy);				buffer = new(V_Buffer);				buffer->cBuffer(DATA_OUT);				controller->LoadWindowPref(prefCopy);				prefCopy->IO(buffer);				buffer->IOSetDirection(DATA_IN);				buffer->IOSetPosition(0);				realPref->IO(buffer);				buffer->dBuffer();				realPref->MakeDefault(SAVE);							} #endif // !SAVE_DISABLED // jca 22Feb95#endif //VR			break;		case cancelBFlag:			exitFlag = TRUE;			break;		case updateFlag:#if VWT			//JAM 14Feg95 hack--if edittext box was active and enter was hit in WINDOWS,			//prefObject was deleted before going through this code.  This IF checks if			//prefObject is NULL, and doesn't reference through it--fixes the problem			//as long as prefObject is nulled after being deleted.			if(prefObject)	            {				prefObject->GetResults(prefCopy);				prefObject->SetPreferences(prefCopy);				}#endif //VWT			VDisplay(DRAW);			break;					case revertBFlag:#if VWT			realPref->lastItem = prefType;#endif //VWT			factory = new(AppPreference);			factory->cAppPreference();#if VWT			factory->MakeDefault(LOAD);			buffer = new(V_Buffer);			buffer->cBuffer(DATA_OUT);			factory->IO(buffer);			buffer->IOSetDirection(DATA_IN);			buffer->IOSetPosition(0);			prefCopy->IO(buffer);			buffer->dBuffer();				factory->dAppPreference();			prefObject->SetPreferences(prefCopy); //BILBIL - need to check this!#elif VR			prefs->SetPreferences(factory);			factory->dAppPreference();			VSetCursor(vCursorArrow);#endif //VWT			VDisplay(DRAW);			exitFlag = FALSE;			break;			#if VWT #if !SAVE_DISABLED // jca 22Feb95		case defaultBFlag:			realPref->lastItem = prefType;			prefObject->GetResults(prefCopy);			buffer = new(V_Buffer);			buffer->cBuffer(DATA_OUT);			controller->LoadWindowPref(prefCopy);			prefCopy->IO(buffer);			buffer->IOSetDirection(DATA_IN);			buffer->IOSetPosition(0);			realPref->IO(buffer);			buffer->dBuffer();			realPref->MakeDefault(SAVE);			#if WINDOWS			VDisplay(DRAW);#endif			exitFlag = FALSE;			break; #endif // !SAVE_DISABLED // jca 22Feb95#endif //VWT		}			return(exitFlag);	}		voidPrefDialog::SetInterface() 	{	int	num;	if (itemList && itemList->thePane)		{   // 3MAY94 JAM put this in to fix the "select a text item and swap dialog pages" crash		itemList->thePane->SetText(NULL);		}#if VWT	if(NULL!=prefObject)		{		prefObject->GetResults(prefCopy);		prefObject->dPrefObject();        prefObject = NULL;	//JAM 14Feb95		}			switch(prefType)		{		case prefEditor: prefObject = new(PrefEditor); break;		case prefRenderer: prefObject = new(PrefRender); break;		case prefNavigate: prefObject = new(PrefNavigate); break;		case prefDefaults: prefObject = new(PrefDefault); break;		case prefUnits: prefObject = new(PrefUnit);  break;		// MERGE-HMD [[[		#if USE_HMD		case prefHMD: prefObject = new(PrefHMD);  break;		#endif // USE_HMD		// MERGE-HMD ]]]		}	prefObject->cPrefObject();#elif VR	if(NULL!=prefs)		{		prefs->GetResults(prefCopy);		prefs->dPrefObject();        prefs = NULL;	//JAM 14Feb95		}	prefs = new(PrefVR);	prefs->cPrefObject();#endif//VWT	/* this is a continuation of the hack that is to come.  Windows orders the	   controls in a window by the order they were created [CreateWindow()	   takes a parent window parameter, and presumably notifies the parent].	   The upshot is that the tab order is determined by the order the controls	   are created.  So the buttons must be created before the choices list box,	   and maintained to get the tab order right.  (I might add that the pref       controls are appended to the list after the choices)	jca 18 june 93	*/	SetDefBtn(NULL);	if ((num = itemList->Find(&doneButton)) >= 0)		itemList->Remove(num);	if ((num = itemList->Find(&cancelButton)) >= 0)		itemList->Remove(num);#if VWT	if ((num = itemList->Find(&revertButton)) >= 0)		itemList->Remove(num);#endif //VWT#if !SAVE_DISABLED // jca 22Feb95	if ((num = itemList->Find(&defaultButton)) >= 0)		itemList->Remove(num);#endif // !SAVE_DISABLED // jca 22Feb95#if VWT	// This is a hack. We can't call RemoveItem(choices) because that would	// delete the control. On Windows, all this work is being done in response	// to an update message from the control, and deleting it makes Windows	// understandably upset. choiceText is handled the same way for good measure.	if ((num = itemList->Find(&choiceText)) >= 0)		itemList->Remove(num);	if ((num = itemList->Find(&choices)) >= 0)		itemList->Remove(num);#endif //VWT	// GJR 08/02/95 wtstereo	// Further hacking: the itemlist is still in use, and must stick around.	// Specifically, we got called via itemlist::findcontrol, and it's "this"	// pointer is the current item list. So, instead of deleting and creating	// a totally new list, just reuse the one we have, being careful not to	// let it get moved else the pointer may become bogus.	// ?Doesn't adding items change its size and cause movement?	// Old style://	itemList->dItemList();		// delete contents and array and itemlist.//	itemList =new(V_ItemList);  // create new one//	itemList->cItemList();      // init it//	itemList->Install(this);    // hook it up	itemList->DeleteItems();    // delete contents but reuse memory	// If we removed the items, then just put them back on the item list.	// Otherwise, this is the first time, so call AddItem() to install them	// for real.#if VWT	if (num >= 0)		{		SetDefBtn(doneButton);		itemList->Append(&doneButton);		itemList->Append(&cancelButton);		itemList->Append(&revertButton); #if !SAVE_DISABLED // jca 22Feb95		itemList->Append(&defaultButton); #endif // !SAVE_DISABLED // jca 22Feb95		itemList->Append(&choiceText);		itemList->Append(&choices);		}	else		{		SetDefBtn(doneButton);		AddItem(doneButton);		AddItem(cancelButton);		AddItem(revertButton); #if !SAVE_DISABLED // jca 22Feb95		AddItem(defaultButton); #endif // !SAVE_DISABLED // jca 22Feb95		AddItem(choiceText);        AddItem(choices);		}#elif VR #if !SAVE_DISABLED // jca 22Feb95	AddItem(makeDefaultBox); #endif // !SAVE_DISABLED // jca 22Feb95	if (num >= 0)		{		SetDefBtn(doneButton);		itemList->Append(&defaultButton);		itemList->Append(&cancelButton);		itemList->Append(&doneButton);		}	else		{		SetDefBtn(doneButton);		AddItem(defaultButton);		AddItem(cancelButton);		AddItem(doneButton);		}#if MACINTOSH	AddItem(divider);	AddItem(title);#endif // MACINTOSH#endif //VWT    /* add the controls for the current preference */#if VWT	prefObject->SetInterface(this);	prefObject->SetPreferences(prefCopy);#if WINDOWS	choices->FocusOn();	// jca.  set the focus on the first group#endif#elif VR	prefs->SetInterface(this);	prefs->SetPreferences(prefCopy);#endif //VWT	}/************************************************************************************* * *		Base Preference Object * ************************************************************************************/void PrefObject::cPrefObject() { }void PrefObject::dPrefObject()  { delete this; }void PrefObject::SetInterface(V_Dialog *dialog) { }void PrefObject::GetResults(AppPreference *masterPref) { }void PrefObject::SetPreferences(AppPreference *masterPref) { }			#if VWT/************************************************************************************* * *		Editor Preference Object * ************************************************************************************/void PrefEditor::SetInterface(V_Dialog *dialog) 	{	V_Text	*statText;	V_Array		*radioGroup;	V_Array		*checkGroup;	PrefObject::SetInterface(dialog);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pedTAids].destRect);	statText->SetText(layoutSpec[pedTAids].title);	dialog->AddItem(statText);	checkGroup = new(V_Array);	checkGroup->cArray(0,sizeof(V_CtrlCheck*),4);	cRuler = new(V_CtrlCheck);	cRuler->cItem();	cRuler->SetRect(&(layoutSpec[pedCRuler].destRect));	cRuler->SetText(layoutSpec[pedCRuler].title);	cRuler->SetGroup(checkGroup);	dialog->AddItem(cRuler);	cGrid = new(V_CtrlCheck);	cGrid->cItem();	cGrid->SetRect(&(layoutSpec[pedCGrid].destRect));	cGrid->SetText(layoutSpec[pedCGrid].title);    cGrid->SetGroup(checkGroup);	dialog->AddItem(cGrid);	cDepth = new(V_CtrlCheck);	cDepth->cItem();	cDepth->SetRect(&(layoutSpec[pedCDepth].destRect));	cDepth->SetText(layoutSpec[pedCDepth].title);	cDepth->SetGroup(checkGroup);	dialog->AddItem(cDepth);	cGuide = new(V_CtrlCheck);	cGuide->cItem();	cGuide->SetRect(&(layoutSpec[pedCGuide].destRect));	cGuide->SetText(layoutSpec[pedCGuide].title);	cGuide->SetGroup(checkGroup);	dialog->AddItem(cGuide);	cOrigin = new(V_CtrlCheck);	cOrigin->cItem();	cOrigin->SetRect(&(layoutSpec[pedCOrigin].destRect));	cOrigin->SetText(layoutSpec[pedCOrigin].title);	cOrigin->SetGroup(checkGroup);	dialog->AddItem(cOrigin);	cSnap = new(V_CtrlCheck);	cSnap->cItem();	cSnap->SetRect(&(layoutSpec[pedCSnap].destRect));	cSnap->SetText(layoutSpec[pedCSnap].title);	cSnap->SetGroup(checkGroup);	dialog->AddItem(cSnap);	#if VRML_ANCHOR	// ABD PRO25 AUG95	cURL = new(V_CtrlCheck);	cURL->cItem();	cURL->SetRect(&(layoutSpec[pedCURL].destRect));	cURL->SetText(layoutSpec[pedCURL].title);	cURL->SetGroup(checkGroup);	dialog->AddItem(cURL);	#endif	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pedTColor].destRect);	statText->SetText(layoutSpec[pedTColor].title);	dialog->AddItem(statText);	clrRuler = new(ColorPop);	clrRuler->cItem();	clrRuler->SetRect(&layoutSpec[pedSRuler].destRect);	clrRuler->SetText(layoutSpec[pedSRuler].title);	dialog->AddItem(clrRuler);		clrGrid = new(ColorPop);	clrGrid->cItem();	clrGrid->SetRect(&layoutSpec[pedSGrid].destRect);	clrGrid->SetText(layoutSpec[pedSGrid].title);	dialog->AddItem(clrGrid);		clrDepth = new(ColorPop);	clrDepth->cItem();	clrDepth->SetRect(&layoutSpec[pedSDepth].destRect);	clrDepth->SetText(layoutSpec[pedSDepth].title);	dialog->AddItem(clrDepth);	clrGuide = new(ColorPop);	clrGuide->cItem();	clrGuide->SetRect(&layoutSpec[pedSGuide].destRect);	clrGuide->SetText(layoutSpec[pedSGuide].title);	dialog->AddItem(clrGuide);	clrHome = new(ColorPop);	clrHome->cItem();	clrHome->SetRect(&layoutSpec[pedSOrigin].destRect);	clrHome->SetText(layoutSpec[pedSOrigin].title);	dialog->AddItem(clrHome);	clrBackground = new(ColorPop);	clrBackground->cItem();	clrBackground->SetRect(&layoutSpec[pedSBackground].destRect);	clrBackground->SetText(layoutSpec[pedSBackground].title);	dialog->AddItem(clrBackground);	/* THESE NEED TO MOVE */	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pedTTrack].destRect);	statText->SetText(layoutSpec[pedTTrack].title);	dialog->AddItem(statText);	radioGroup = new(V_Array);	radioGroup->cArray(0,sizeof(V_CtrlRadio*),4);		rWorld = new(V_CtrlRadio);	rWorld->cItem();	rWorld->SetRect(&layoutSpec[pedRWorld].destRect);	rWorld->SetText(layoutSpec[pedRWorld].title);	rWorld->SetGroup(radioGroup);	dialog->AddItem(rWorld);		rView = new(V_CtrlRadio);	rView->cItem();	rView->SetRect(&layoutSpec[pedRView].destRect);	rView->SetText(layoutSpec[pedRView].title);	rView->SetGroup(radioGroup);	dialog->AddItem(rView);	}void PrefEditor::SetPreferences(AppPreference *masterPref) 	{		EditorPreference	*pref;	DefaultPreference	*defPref;		PrefObject::SetPreferences(masterPref);		pref = (EditorPreference*)masterPref->GetPreference(preferEditor);	defPref = (DefaultPreference*)masterPref->GetPreference(preferDefaults);		cRuler->SetValue(pref->editorState&RULER_DISPLAY ? TRUE : FALSE);	cDepth->SetValue(pref->editorState&TAB_DISPLAY ? TRUE : FALSE);	cGuide->SetValue(pref->editorState&GUIDE_DISPLAY ? TRUE : FALSE); 	cOrigin->SetValue(pref->editorState&ORIGIN_DISPLAY ? TRUE : FALSE); 	cGrid->SetValue(pref->editorState&GRID_DISPLAY ? TRUE : FALSE);		cSnap->SetValue(pref->editorState&RULER_SNAP ? TRUE : FALSE);	#if VRML_ANCHOR		// ABD PRO25 AUG95	cURL->SetValue(pref->editorState&URL_DISPLAY ? TRUE : FALSE);	#endif	rWorld->SetValue(positionWorld==pref->trackState ? TRUE :FALSE);	rView->SetValue(positionView==pref->trackState ? TRUE :FALSE);		clrRuler->SetPopColor(defPref->popColor);	clrGrid->SetPopColor(defPref->popColor);	clrBackground->SetPopColor(defPref->popColor);	clrDepth->SetPopColor(defPref->popColor);	clrHome->SetPopColor(defPref->popColor);	clrGuide->SetPopColor(defPref->popColor);	clrRuler->SetColor(pref->rulerColor);	clrGrid->SetColor(pref->gridColor);	clrBackground->SetColor(pref->backColor);	clrDepth->SetColor(pref->extrRangeColor);	clrHome->SetColor(pref->homeColor);	clrGuide->SetColor(pref->guideColor);	}		voidPrefEditor::GetResults(AppPreference *masterPref)	{	EditorPreference	*pref;	RGBColor	color;	long	state;	int		changed;		PrefObject::GetResults(masterPref);				pref = (EditorPreference*)masterPref->GetPreference(preferEditor);	state = 0;	if(cRuler->GetValue()) state |= RULER_DISPLAY;	if(cDepth->GetValue()) state |= TAB_DISPLAY;	if(cGuide->GetValue()) state |= GUIDE_DISPLAY;	if(cOrigin->GetValue()) state |= ORIGIN_DISPLAY;	if(cGrid->GetValue()) state |= GRID_DISPLAY;		if(cSnap->GetValue()) state |= RULER_SNAP;	#if VRML_ANCHOR		// ABD PRO25 AUG95	if(cURL->GetValue()) state |= URL_DISPLAY;	#endif		if(state != pref->editorState) { pref->editorState = state; changed = TRUE; }	if(rWorld->GetValue()) state = positionWorld;	else state = positionView;	if(state != pref->trackState) { pref->trackState = state; changed = TRUE; }		pref->rulerColor = clrRuler->GetColor();	pref->gridColor = clrGrid->GetColor();	pref->backColor = clrBackground->GetColor();	pref->extrRangeColor = clrDepth->GetColor();	pref->homeColor = clrHome->GetColor();	pref->guideColor = clrGuide->GetColor();		pref->SetChange(TRUE);	}/************************************************************************************* * *		Rendering Preference Object * ************************************************************************************/voidPrefRender::SetInterface(V_Dialog *dialog) 	{	V_Text	*statText;	V_Array	*checkGroup;	PrefObject::SetInterface(dialog);		statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[prdTShade].destRect);	statText->SetText(layoutSpec[prdTShade].title);	dialog->AddItem(statText);	shade = new(ShadePopMenu);	shade->cItem();	shade->SetRect(&layoutSpec[prdPShade].destRect);	dialog->AddItem(shade);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[prdTDraw].destRect);	statText->SetText(layoutSpec[prdTDraw].title);	dialog->AddItem(statText);	draw = new(DrawPopMenu);	draw->cItem();	draw->SetRect(&layoutSpec[prdPDraw].destRect);	dialog->AddItem(draw);		#if WINDOWS	flashFill = new(V_CtrlCheck);	flashFill->cItem();	flashFill->SetRect(&(layoutSpec[prdCFlashFill].destRect));	flashFill->SetText(layoutSpec[prdCFlashFill].title);	dialog->AddItem(flashFill);    if (!VGetFlashAble()) flashFill->Activate(FALSE);#endif	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[prdTOptions].destRect);	statText->SetText(layoutSpec[prdTOptions].title);	dialog->AddItem(statText);	checkGroup = new(V_Array);	checkGroup->cArray(0,sizeof(V_CtrlCheck*),4);	frameBlack = new(V_CtrlCheck);	frameBlack->cItem();	frameBlack->SetRect(&(layoutSpec[prdCFrameBlack].destRect));	frameBlack->SetText(layoutSpec[prdCFrameBlack].title);	frameBlack->SetGroup(checkGroup);	dialog->AddItem(frameBlack);		printWhite = new(V_CtrlCheck);	printWhite->cItem();	printWhite->SetRect(&(layoutSpec[prdCPrintWhite].destRect));	printWhite->SetText(layoutSpec[prdCPrintWhite].title);	printWhite->SetGroup(checkGroup);	dialog->AddItem(printWhite);	dither = new(V_CtrlCheck);	dither->cItem();	dither->SetRect(&(layoutSpec[prdCDither].destRect));	dither->SetText(layoutSpec[prdCDither].title);	dither->SetGroup(checkGroup);	dialog->AddItem(dither);		interpTransp = new(V_CtrlCheck);	interpTransp->cItem();	interpTransp->SetRect(&(layoutSpec[prdCInterpTransp].destRect));	interpTransp->SetText(layoutSpec[prdCInterpTransp].title);	interpTransp->SetGroup(checkGroup);	dialog->AddItem(interpTransp);		statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[prdTOpen].destRect);	statText->SetText(layoutSpec[prdTOpen].title);	dialog->AddItem(statText);		checkGroup = new(V_Array);	checkGroup->cArray(0,sizeof(V_CtrlCheck*),4);	seeIn = new(V_CtrlCheck);	seeIn->cItem();	seeIn->SetRect(&(layoutSpec[prdCSeeIn].destRect));	seeIn->SetText(layoutSpec[prdCSeeIn].title);	seeIn->SetGroup(checkGroup);	dialog->AddItem(seeIn);	seeOut = new(V_CtrlCheck);	seeOut->cItem();	seeOut->SetRect(&(layoutSpec[prdCSeeOut].destRect));	seeOut->SetText(layoutSpec[prdCSeeOut].title);	seeOut->SetGroup(checkGroup);	dialog->AddItem(seeOut);	seeConnect = new(V_CtrlCheck);	seeConnect->cItem();	seeConnect->SetRect(&(layoutSpec[prdCSeeConnect].destRect));	seeConnect->SetText(layoutSpec[prdCSeeConnect].title);	seeConnect->SetGroup(checkGroup);	dialog->AddItem(seeConnect);	}void PrefRender::SetPreferences(AppPreference *prefCopy) 	{		RenderPreference	*pref;	ConfigurePreference	*config;    long userRenderDrawMode;	// ABD JAN95		PrefObject::SetPreferences(prefCopy);		pref = (RenderPreference*)prefCopy->GetPreference(preferRenderer);    config = (ConfigurePreference*)prefCopy->GetPreference(preferConfigure);    // ABD JAN95	userRenderDrawMode = pref->renderDrawMode;	userRenderDrawMode &= ~RENDER_BLACKFRAME;	userRenderDrawMode &= ~RENDER_NOTEXTURES;    userRenderDrawMode &= ~RENDER_NOGOURAUD;	switch(userRenderDrawMode)		{		case RENDER_FRAME|RENDER_FILL:draw->SetValue(renderPopFrameFill);break;		case RENDER_FILL:draw->SetValue(renderPopFill);break;		case RENDER_FRAME:draw->SetValue(renderPopFrame);break;		}#if WINDOWS	flashFill->SetValue(VGetFlashAble()&&config->flashFill ? TRUE : FALSE);#endif	switch(pref->renderShadeMode)		{		case RENDER_WHITESH:shade->SetValue(shadePopWhiteShade);break;		case RENDER_NOSHADE:shade->SetValue(shadePopUnshade);break;		case RENDER_FLATSH:shade->SetValue(shadePopShade); break;		}	frameBlack->SetValue(pref->frameBlack ? TRUE : FALSE);	printWhite->SetValue(pref->printWhiteShade ? FALSE : TRUE);	dither->SetValue(pref->dither ? TRUE : FALSE);	interpTransp->SetValue(pref->interpTransp ? TRUE : FALSE);	seeIn->SetValue(pref->renderOpenMode&RENDER_SEEIN ? TRUE : FALSE);	seeOut->SetValue(pref->renderOpenMode&RENDER_SEEOUT ? TRUE : FALSE); 	seeConnect->SetValue(pref->renderOpenMode&RENDER_SEECONN ? TRUE : FALSE);	}voidPrefRender::GetResults(AppPreference *prefCopy)	{	RenderPreference	*pref;    ConfigurePreference	*config;	long	newMode;	int		changed,state,num,rState;	char	str[256];		PrefObject::GetResults(prefCopy);		changed = FALSE;		pref = (RenderPreference*)prefCopy->GetPreference(preferRenderer);	config = (ConfigurePreference*)prefCopy->GetPreference(preferConfigure);	switch(draw->GetValue())		{		case renderPopFrameFill:newMode = RENDER_FILL|RENDER_FRAME; break;		case renderPopFill:newMode = RENDER_FILL; break;		case renderPopFrame:newMode = RENDER_FRAME; break;		}	if(newMode != (pref->renderDrawMode)){ pref->renderDrawMode = newMode; changed = TRUE; }#if WINDOWS	if(VGetFlashAble())    	{		if(flashFill->GetValue()) newMode=TRUE; else newMode = FALSE;		if(newMode != (config->flashFill)){ config->flashFill = newMode; config->SetChange(TRUE); }		}#endif	if(frameBlack->GetValue()) newMode=TRUE; else newMode = FALSE;	if(newMode != (pref->frameBlack)){ pref->frameBlack = newMode; changed = TRUE; }	if(printWhite->GetValue()) newMode=FALSE; else newMode = TRUE;	if(newMode != (pref->printWhiteShade)){ pref->printWhiteShade = newMode; changed = TRUE; }	if(dither->GetValue()) newMode=TRUE; else newMode = FALSE;    if(newMode != (pref->dither)){ pref->dither = newMode; changed = TRUE; }	if(interpTransp->GetValue()) newMode=TRUE; else newMode = FALSE;    if(newMode != (pref->interpTransp)){ pref->interpTransp = newMode; changed = TRUE; }	switch(shade->GetValue())		{		case shadePopWhiteShade: newMode = RENDER_WHITESH; break;		case shadePopUnshade:newMode = RENDER_NOSHADE; break;		case shadePopShade:newMode = RENDER_FLATSH; break;		}	if(newMode != (pref->renderShadeMode)){ pref->renderShadeMode=newMode; changed = TRUE; }		newMode = 0;	if(seeIn->GetValue()) newMode|=RENDER_SEEIN;	if(seeOut->GetValue()) newMode|=RENDER_SEEOUT;	if(seeConnect->GetValue()) newMode|=RENDER_SEECONN;	if(newMode != pref->renderOpenMode) { pref->renderOpenMode = newMode; changed = TRUE; }	pref->SetChange(changed);	}/************************************************************************************* * *		Navigation Preference Object * ************************************************************************************/void PrefNavigate::SetInterface(V_Dialog *dialog) 	{	V_Text	*statText;	V_Array	*checkGroup;	PrefObject::SetInterface(dialog);		statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pnvTAids].destRect);	statText->SetText(layoutSpec[pnvTAids].title);	dialog->AddItem(statText);	checkGroup = new(V_Array);	checkGroup->cArray(0,sizeof(V_CtrlCheck*),4);	mouseDown = new(V_CtrlCheck);	mouseDown->cItem();	mouseDown->SetRect(&(layoutSpec[pnvCButton].destRect));	mouseDown->SetText(layoutSpec[pnvCButton].title);	mouseDown->SetGroup(checkGroup);	dialog->AddItem(mouseDown);	crossHair = new(V_CtrlCheck);	crossHair->cItem();	crossHair->SetRect(&(layoutSpec[pnvCCross].destRect));	crossHair->SetText(layoutSpec[pnvCCross].title);	crossHair->SetGroup(checkGroup);	dialog->AddItem(crossHair);	grid = new(V_CtrlCheck);	grid->cItem();	grid->SetRect(&(layoutSpec[pnvCGrid].destRect));	grid->SetText(layoutSpec[pnvCGrid].title);	grid->SetGroup(checkGroup);	dialog->AddItem(grid);	// MERGE-GOURAUD-PRO-2 [[[	#if VPRO	colldet = new(V_CtrlCheck);	colldet->cItem();	colldet->SetRect(&(layoutSpec[pnvCCollision].destRect));	colldet->SetText(layoutSpec[pnvCCollision].title);	dialog->AddItem(colldet);	#endif 	// MERGE-GOURAUD-PRO-2 [[[		statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pnvTCamera].destRect);	statText->SetText(layoutSpec[pnvTCamera].title);	dialog->AddItem(statText);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pnvSFilm].destRect);	statText->SetText(layoutSpec[pnvSFilm].title);	dialog->AddItem(statText);	film = new(ActionText);	film->cItem();	film->SetRect(&(layoutSpec[pnvEFilm].destRect));	dialog->AddItem(film);	dialog->itemList->AddTabItem(film);	filmUnit = new(V_Text);	filmUnit->cItem();	filmUnit->SetRect(&layoutSpec[pnvSFilmUnit].destRect);	filmUnit->SetText(layoutSpec[pnvSFilmUnit].title);	dialog->AddItem(filmUnit);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pnvSFocal].destRect);	statText->SetText(layoutSpec[pnvSFocal].title);	dialog->AddItem(statText);	focal = new(ActionText);	focal->cItem();	focal->SetRect(&(layoutSpec[pnvEFocal].destRect));	dialog->AddItem(focal);	dialog->itemList->AddTabItem(focal);	focalUnit = new(V_Text);	focalUnit->cItem();	focalUnit->SetRect(&layoutSpec[pnvSFocalUnit].destRect);	focalUnit->SetText(layoutSpec[pnvSFocalUnit].title);	dialog->AddItem(focalUnit);	aspectCheck = new(ActionCheck);	aspectCheck->cItem();	aspectCheck->SetRect(&layoutSpec[pnvCAspect].destRect);	aspectCheck->SetText(layoutSpec[pnvCAspect].title);	dialog->AddItem(aspectCheck);		aspectPop = new(AspectPopMenu);	aspectPop->cItem();	aspectPop->SetRect(&layoutSpec[pnvPAspect].destRect);	aspectPop->SetCheck(aspectCheck);	dialog->AddItem(aspectPop);	aspectH = new(ActionText);	aspectH->cItem();	aspectH->SetRect(&layoutSpec[pnvEAspectH].destRect);	dialog->AddItem(aspectH);	dialog->itemList->AddTabItem(aspectH);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pnvSColon].destRect);	statText->SetText(layoutSpec[pnvSColon].title);	dialog->AddItem(statText);	aspectV = new(ActionText);	aspectV->cItem();	aspectV->SetRect(&layoutSpec[pnvEAspectV].destRect);	dialog->AddItem(aspectV);	dialog->itemList->AddTabItem(aspectV);		((AspectPopMenu*)aspectPop)->LinkText(aspectH,aspectV);	}void PrefNavigate::SetPreferences(AppPreference *prefCopy) 	{		NavigatePreference	*pref;	ModelPreference		*model;	char str[256];		PrefObject::SetPreferences(prefCopy);	pref = (NavigatePreference*)prefCopy->GetPreference(preferNavigate);	model = (ModelPreference*)prefCopy->GetPreference(preferModeler);	sprintf(str,"%i",pref->filmWidth);	film->SetText(str);	sprintf(str,"%i",pref->focalLength);	focal->SetText(str);	aspectPop->SetColor(model->skyColor);	aspectPop->SetRatio(pref->aspectType);	sprintf(str,"%i",pref->aspectRatio.h);	aspectH->SetText(str);	sprintf(str,"%i",pref->aspectRatio.v);	aspectV->SetText(str);	aspectPop->SetRatio(pref->aspectType);		mouseDown->SetValue((pref->navigateMode&NAVIG_BUTTON) ? TRUE : FALSE);	crossHair->SetValue((pref->navigateMode&NAVIG_CROSS) ? TRUE : FALSE);	grid->SetValue((pref->navigateMode&NAVIG_GRID) ? TRUE : FALSE); 	aspectCheck->SetValue(pref->aspectState ? TRUE : FALSE ); 		#if VPRO	colldet->SetValue(pref->navigateMode&NAVIG_COLLISION ? TRUE : FALSE);	// MERGE-GOURAUD-PRO-2	#endif	}voidPrefNavigate::GetResults(AppPreference *prefCopy)	{	NavigatePreference	*pref;	double	size;	long	newMode;	int		changed,num;	Point	aspectByType,aspectByText;	short	state,newType;	char	str[256];	long tmp_long;		// ABD JAN95		PrefObject::GetResults(prefCopy);		changed = FALSE;		pref = (NavigatePreference*)prefCopy->GetPreference(preferNavigate);		newMode = 0;	if(mouseDown->GetValue()) newMode|=NAVIG_BUTTON;	if(crossHair->GetValue()) newMode|=NAVIG_CROSS;	if(grid->GetValue()) newMode|=NAVIG_GRID;	if(newMode != pref->navigateMode) { pref->navigateMode = newMode; changed = TRUE; }	film->GetText(str);	sscanf(str,"%i",&num);	if(num != pref->filmWidth) { pref->filmWidth = num; changed = TRUE; }	focal->GetText(str);	sscanf(str,"%i",&num);	if(num != pref->focalLength) { pref->focalLength = num; changed = TRUE; }		// MERGE-GOURAUD-PRO-2 [[[	#if VPRO	if (colldet->GetValue() != (pref->navigateMode&NAVIG_COLLISION ? TRUE : FALSE))		{		if (colldet->GetValue())			pref->navigateMode |= NAVIG_COLLISION;		else			pref->navigateMode &= ~NAVIG_COLLISION;		changed = TRUE;		}	#endif // VPRO	// MERGE-GOURAUD-PRO-2 ]]]	state = aspectCheck->GetValue();	if(state != pref->aspectState) { pref->aspectState = state; changed = TRUE; }	newType = aspectPop->GetRatio(&aspectByType);	aspectH->GetText(str);	sscanf(str,"%ld",&tmp_long);        	// ABD JAN95	aspectByText.h = (short)tmp_long;	// ABD JAN95	aspectV->GetText(str);	sscanf(str,"%ld",&tmp_long);			// ABD JAN95	aspectByText.v = (short)tmp_long;	// ABD JAN95		if(aspectByText.h!=aspectByType.h || aspectByText.v!=aspectByType.v)		newType = aspectCustom;	if(newType != pref->aspectType) { pref->aspectType = newType; changed = TRUE; }	if(aspectByText.h != pref->aspectRatio.h || aspectByText.v != pref->aspectRatio.v) 		{ pref->aspectRatio = aspectByText; changed = TRUE; }		pref->SetChange(changed);	}	/************************************************************************************* * *		Defaults Preference Object * ************************************************************************************/void PrefDefault::SetInterface(V_Dialog *dialog) 	{	V_Text	*statText;	VStyleRec	style;		PrefObject::SetInterface(dialog);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pdfSDx].destRect);	statText->SetText(layoutSpec[pdfSDx].title);	dialog->AddItem(statText);		statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pdfSDy].destRect);	statText->SetText(layoutSpec[pdfSDy].title);	dialog->AddItem(statText);		statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pdfSDz].destRect);	statText->SetText(layoutSpec[pdfSDz].title);	dialog->AddItem(statText);		depthFromX = new(ActionText);	depthFromX->cItem();	depthFromX->SetRect(&(layoutSpec[pdfSDxFrom].destRect));	dialog->AddItem(depthFromX);	dialog->itemList->AddTabItem(depthFromX);	depthToX = new(ActionText);	depthToX->cItem();	depthToX->SetRect(&(layoutSpec[pdfSDxTo].destRect));	dialog->AddItem(depthToX);	dialog->itemList->AddTabItem(depthToX);	depthFromY = new(ActionText);	depthFromY->cItem();	depthFromY->SetRect(&(layoutSpec[pdfSDyFrom].destRect));	dialog->AddItem(depthFromY);	dialog->itemList->AddTabItem(depthFromY);	depthToY = new(ActionText);	depthToY->cItem();	depthToY->SetRect(&(layoutSpec[pdfSDyTo].destRect));	dialog->AddItem(depthToY);	dialog->itemList->AddTabItem(depthToY);	depthFromZ = new(ActionText);	depthFromZ->cItem();	depthFromZ->SetRect(&(layoutSpec[pdfSDzFrom].destRect));	dialog->AddItem(depthFromZ);	dialog->itemList->AddTabItem(depthFromZ);	depthToZ = new(ActionText);	depthToZ->cItem();	depthToZ->SetRect(&(layoutSpec[pdfSDzTo].destRect));	dialog->AddItem(depthToZ);	dialog->itemList->AddTabItem(depthToZ);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pdfTFrom].destRect);	statText->SetText(layoutSpec[pdfTFrom].title);	statText->GetStyle(&style);	style.just = vJustCenter;	statText->SetStyle(&style);	dialog->AddItem(statText);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pdfTTo].destRect);	statText->SetText(layoutSpec[pdfTTo].title);	statText->SetStyle(&style);	dialog->AddItem(statText);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pdfTDepth].destRect);	statText->SetText(layoutSpec[pdfTDepth].title);	dialog->AddItem(statText);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pdfSHx].destRect);	statText->SetText(layoutSpec[pdfSHx].title);	dialog->AddItem(statText);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pdfSHy].destRect);	statText->SetText(layoutSpec[pdfSHy].title);	dialog->AddItem(statText);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pdfSHz].destRect);	statText->SetText(layoutSpec[pdfSHz].title);	dialog->AddItem(statText);	homeX = new(ActionText);	homeX->cItem();	homeX->SetRect(&(layoutSpec[pdfEHx].destRect));	dialog->AddItem(homeX);	dialog->itemList->AddTabItem(homeX);	homeY = new(ActionText);	homeY->cItem();	homeY->SetRect(&(layoutSpec[pdfEHy].destRect));	dialog->AddItem(homeY);	dialog->itemList->AddTabItem(homeY);	homeZ = new(ActionText);	homeZ->cItem();	homeZ->SetRect(&(layoutSpec[pdfEHz].destRect));	dialog->AddItem(homeZ);	dialog->itemList->AddTabItem(homeZ);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pdfTHome].destRect);	statText->SetText(layoutSpec[pdfTHome].title);	statText->SetStyle(&style);	dialog->AddItem(statText);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pdfTNSides].destRect);	statText->SetText(layoutSpec[pdfTNSides].title);	dialog->AddItem(statText);	nSides = new(ActionText);	nSides->cItem();	nSides->SetRect(&(layoutSpec[pdfENSides].destRect));	dialog->AddItem(nSides);	dialog->itemList->AddTabItem(nSides);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[pdfTNLevels].destRect);	statText->SetText(layoutSpec[pdfTNLevels].title);	dialog->AddItem(statText);	nLevels = new(ActionText);	nLevels->cItem();	nLevels->SetRect(&(layoutSpec[pdfENLevels].destRect));	dialog->AddItem(nLevels);		dialog->itemList->AddTabItem(nLevels);	}void PrefDefault::SetPreferences(AppPreference *prefCopy) 	{		DefaultPreference	*pref;	char str[256];	double	size;		PrefObject::SetPreferences(prefCopy);	pref = (DefaultPreference*)prefCopy->GetPreference(preferDefaults);	size = FixedToDbl(pref->extrusionMin.x);	sprintf(str,"%.2lf",size);	depthFromX->SetText(str);	size = FixedToDbl(pref->extrusionMax.x);	sprintf(str,"%.2lf",size);	depthToX->SetText(str);	size = FixedToDbl(pref->extrusionMin.y);	sprintf(str,"%.2lf",size);	depthFromY->SetText(str);	size = FixedToDbl(pref->extrusionMax.y);	sprintf(str,"%.2lf",size);	depthToY->SetText(str);	size = FixedToDbl(pref->extrusionMin.z);	sprintf(str,"%.2lf",size);	depthFromZ->SetText(str);	size = FixedToDbl(pref->extrusionMax.z);	sprintf(str,"%.2lf",size);	depthToZ->SetText(str);	size = FixedToDbl(pref->homePosition.x);	sprintf(str,"%.2lf",size);	homeX->SetText(str);	size = FixedToDbl(pref->homePosition.y);	sprintf(str,"%.2lf",size);	homeY->SetText(str);	size = FixedToDbl(pref->homePosition.z);	sprintf(str,"%.2lf",size);	homeZ->SetText(str);	sprintf(str,"%i",pref->regularSides);	nSides->SetText(str);	sprintf(str,"%i",pref->ellipseLevels);	nLevels->SetText(str);	}	voidPrefDefault::GetResults(AppPreference *prefCopy)	{	DefaultPreference	*pref;	FFixed	value;	double	size;	int		changed,num;	char	str[256];		PrefObject::GetResults(prefCopy);		changed = FALSE;		pref = (DefaultPreference*)prefCopy->GetPreference(preferDefaults);		depthFromX->GetText(str);	sscanf(str,"%lf",&size);	value = DblToFixed(size);	if(!FFEqual(pref->extrusionMin.x,value)) { pref->extrusionMin.x = value; changed = TRUE; }	depthToX->GetText(str);	sscanf(str,"%lf",&size);	value = DblToFixed(size);	if(!FFEqual(pref->extrusionMax.x,value)) { pref->extrusionMax.x = value; changed = TRUE; }	depthFromY->GetText(str);	sscanf(str,"%lf",&size);	value = DblToFixed(size);	if(!FFEqual(pref->extrusionMin.y,value)) { pref->extrusionMin.y = value; changed = TRUE; }	depthToY->GetText(str);	sscanf(str,"%lf",&size);	value = DblToFixed(size);	if(!FFEqual(pref->extrusionMax.y,value)) { pref->extrusionMax.y = value; changed = TRUE; }	depthFromZ->GetText(str);	sscanf(str,"%lf",&size);	value = DblToFixed(size);	if(!FFEqual(pref->extrusionMin.z,value)) { pref->extrusionMin.z = value; changed = TRUE; }	depthToZ->GetText(str);	sscanf(str,"%lf",&size);	value = DblToFixed(size);	if(!FFEqual(pref->extrusionMax.z,value)) { pref->extrusionMax.z = value; changed = TRUE; }	homeX->GetText(str);	sscanf(str,"%lf",&size);	value = DblToFixed(size);	if(!FFEqual(pref->homePosition.x,value)) { pref->homePosition.x = value; changed = TRUE; }	homeY->GetText(str);	sscanf(str,"%lf",&size);	value = DblToFixed(size);	if(!FFEqual(pref->homePosition.y,value)) { pref->homePosition.y = value; changed = TRUE; }	homeZ->GetText(str);	sscanf(str,"%lf",&size);	value = DblToFixed(size);	if(!FFEqual(pref->homePosition.z,value)) { pref->homePosition.z = value; changed = TRUE; }	nSides->GetText(str);	sscanf(str,"%i",&num);	if( pref->regularSides != num) { pref->regularSides = num; changed = TRUE; }	nLevels->GetText(str);	sscanf(str,"%i",&num);	if( pref->ellipseLevels != num) { pref->ellipseLevels = num; changed = TRUE; }	pref->SetChange(changed);	}/************************************************************************************* * *		Units Preference Object * ************************************************************************************/void PrefUnit::SetInterface(V_Dialog *dialog) 	{	V_Text	*statText;		PrefObject::SetInterface(dialog);		oldUnitType = -1;		unit = new(UnitPopMenu);	unit->cItem();	unit->SetRect(&layoutSpec[punPRuler].destRect);	dialog->AddItem(unit);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[punTRuler].destRect);	statText->SetText(layoutSpec[punTRuler].title);	dialog->AddItem(statText);	promote = new(V_CtrlCheck);	promote->cItem();	promote->SetRect(&(layoutSpec[punCPromote].destRect));	promote->SetText(layoutSpec[punCPromote].title);	dialog->AddItem(promote);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[punTModel].destRect);	statText->SetText(layoutSpec[punTModel].title);	dialog->AddItem(statText);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[punSSize].destRect);	statText->SetText(layoutSpec[punSSize].title);	dialog->AddItem(statText);	modelSize = new(ActionText);	modelSize->cItem();	modelSize->SetRect(&(layoutSpec[punESize].destRect));	dialog->AddItem(modelSize);	sizeUnit = new(V_Text);	sizeUnit->cItem();	sizeUnit->SetRect(&layoutSpec[punSSizeUnit].destRect);	dialog->AddItem(sizeUnit);	statText = new(V_Text);	statText->cItem();	statText->SetRect(&layoutSpec[punSWorld].destRect);	statText->SetText(layoutSpec[punSWorld].title);	dialog->AddItem(statText);	modelWorld = new(ActionText);	modelWorld->cItem();	modelWorld->SetRect(&(layoutSpec[punEWorld].destRect));	dialog->AddItem(modelWorld);	worldUnit = new(V_Text);	worldUnit->cItem();	worldUnit->SetRect(&layoutSpec[punSWorldUnit].destRect);	dialog->AddItem(worldUnit);	/* Although we list the custom symbols, we will not add them to	the dialog yet.  The custom unit controls will be added when they	are appropriate (when the user selects custom units)  If any regular	controls followed the custom controls (if we were to rearrange the controls,	for example) then we would have to remove the items that were to	follow the custom  symbols, add the custom symbols, then add the other	controls back before display..  We have to create the controls in the order	they should be tab-ed, or the tab order will be wrong */	customTitle = new(V_Text);	customTitle->cItem();	customTitle->SetRect(&layoutSpec[punTCustom].destRect);	customTitle->SetText(layoutSpec[punTCustom].title);	customName = new(ActionText);	customName->cItem();	customName->SetRect(&(layoutSpec[punECustom].destRect));	customSym = new(V_Text);	customSym->cItem();	customSym->SetRect(&layoutSpec[punSSymbol].destRect);	customSym->SetText(layoutSpec[punSSymbol].title);	customSymbol = new(ActionText);	customSymbol->cItem();	customSymbol->SetRect(&(layoutSpec[punESymbol].destRect));	customSz = new(V_Text);	customSz->cItem();	customSz->SetRect(&layoutSpec[punSCustomSize].destRect);	customSz->SetText(layoutSpec[punSCustomSize].title);	customSize = new(ActionText);	customSize->cItem();	customSize->SetRect(&(layoutSpec[punECustomSize].destRect));	customSzUn = new(V_Text);	customSzUn->cItem();	customSzUn->SetRect(&layoutSpec[punSCustomSizeUnit].destRect);	customSzUn->SetText(layoutSpec[punSCustomSizeUnit].title);	#if WINDOWS	// as a postscript to the above...	// I am adding them in here because otherwise only the action_text items	// get added.  The custom items will get ripped out when we set	// preferences anyway in the next routine, so it really doesn't matter.	// jca 22APR95	dialog->AddItem(customTitle);	dialog->AddItem(customName);	dialog->AddItem(customSym);	dialog->AddItem(customSymbol);	dialog->AddItem(customSz);	dialog->AddItem(customSize);	dialog->AddItem(customSzUn);	dialog->itemList->AddTabItem(customName);	dialog->itemList->AddTabItem(customSymbol);	dialog->itemList->AddTabItem(customSize);#endif // WINDOWS}void PrefUnit::SetPreferences(AppPreference *prefCopy) 	{		V_Pane	*thePane;	UnitPreference	*pref;	double	size;	int		unitType;	char	str[256],unitStr[256],*namePtr;		PrefObject::SetPreferences(prefCopy);	pref = (UnitPreference*)prefCopy->GetPreference(preferUnits);	unit->SetSystem(pref->unitSystem);	unitType = unit->GetUnitSystem(str,unitStr);	thePane = modelSize->thePane;	if ( unitCustom != unitType && customTitle->thePane)		{		thePane->RemoveItem(customTitle);		thePane->RemoveItem(customName);		thePane->RemoveItem(customSym);		thePane->RemoveItem(customSymbol);		thePane->RemoveItem(customSz);		thePane->RemoveItem(customSize);		thePane->RemoveItem(customSzUn);		thePane->itemList->RemoveTabItem(customName);		thePane->itemList->RemoveTabItem(customSymbol);		thePane->itemList->RemoveTabItem(customSize);        }	if( unitCustom == unitType && !customTitle->thePane)		{		/* append the custom symbols to the list.  If any regular controls		followed the custom controls (if we were to rearrange the controls,		for example) then we would have to remove the items that were to		follow the custom  symbols, add the custom symbols, then add the other		controls back.  We have to create the controls in the order they shold        be tab-ed, or the tab order will be wrong */		thePane->AddItem(customTitle);		thePane->AddItem(customName);		thePane->AddItem(customSym);		thePane->AddItem(customSymbol);		thePane->AddItem(customSz);		thePane->AddItem(customSize);		thePane->AddItem(customSzUn);		thePane->itemList->AddTabItem(customName);		thePane->itemList->AddTabItem(customSymbol);		thePane->itemList->AddTabItem(customSize);		}	if(unitCustom == pref->unitSystem)		{		HLock(pref->customName);		namePtr = (char *)HDeref(pref->customName);		customName->SetText(namePtr);		HUnlock(pref->customName);		HLock(pref->customSym);		namePtr = (char *)HDeref(pref->customSym);		customSymbol->SetText(namePtr);		strncpy(unitStr,namePtr,256);unitStr[255] = 0;		HUnlock(pref->customSym);		sprintf(str,"%lf",pref->customSize);		customSize->SetText(str);		}	sprintf(str,"%lf",pref->baseSize);	modelSize->SetText(str);	sizeUnit->SetText(unitStr);		sprintf(str,"%lf",65536.0*pref->baseSize);	modelWorld->SetText(str);	worldUnit->SetText(unitStr);	promote->SetValue( pref->promoteFlag ? TRUE : FALSE);	}		voidPrefUnit::GetResults(AppPreference *prefCopy)	{	UnitPreference	*pref;	double	size;	int		current,state,changed,unitType;	char	str[256],unitStr[256];		PrefObject::GetResults(prefCopy);	changed = FALSE;		pref = (UnitPreference*)prefCopy->GetPreference(preferUnits);	unitType = unit->GetUnitSystem(str,unitStr);	if(unitType!=pref->unitSystem || TRUE)		{		changed = TRUE;		pref->unitSystem = unitType;		pref->unitSize = GetSIUnit(unitType);		}	if( unitCustom == oldUnitType)		{		if(customSize)			{			customSize->GetText(str);			sscanf(str,"%lf",&size);			if(pref->customSize != size) { pref->customSize = size; changed = TRUE; }			changed = TRUE;			}					if(customName)			{			customName->GetText(str);			DisposHandle((Handle)pref->customName);			pref->SetName(&(pref->customName),str);			changed = TRUE;			}					if(customSymbol)			{			customSymbol->GetText(str);			DisposHandle((Handle)pref->customSym);			pref->SetName(&(pref->customSym),str);			changed = TRUE;			}		}			modelSize->GetText(str);	sscanf(str,"%lf",&size);	if(pref->baseSize != size) { pref->baseSize = size; changed = TRUE; }	else		{		pref->worldSize = pref->baseSize*65536.0;		modelWorld->GetText(str);		sscanf(str,"%lf",&size);		if(pref->worldSize != size) { pref->baseSize = size/65536.0; changed = TRUE; }		}	pref->unitSize *= pref->baseSize;		state = promote->GetValue();	if(pref->promoteFlag != state) { pref->promoteFlag = state; changed = TRUE; }		pref->SetChange(changed);	oldUnitType = unitType;	}#elif VR/************************************************************************************* * *		VR Preference Object * ************************************************************************************/void PrefVR::SetInterface(V_Dialog *dialog) 	{	V_Text	*statText;		PrefObject::SetInterface(dialog);	unitsLabel = new(V_Text);	unitsLabel->cItem();	unitsLabel->SetRect(&(layoutSpec[pvrTUnits].destRect));	unitsLabel->SetText(layoutSpec[pvrTUnits].title);	dialog->AddItem(unitsLabel);	radioGroup = new(V_Array);	radioGroup->cArray(0,sizeof(V_CtrlRadio*),4);		centimeters = new(V_CtrlRadio);	centimeters->cItem();	centimeters->SetRect(&(layoutSpec[pvrRCentimeter].destRect));	centimeters->SetText(layoutSpec[pvrRCentimeter].title);	centimeters->SetGroup(radioGroup);	dialog->AddItem(centimeters);		inches = new(V_CtrlRadio);	inches->cItem();	inches->SetRect(&(layoutSpec[pvrRInches].destRect));	inches->SetText(layoutSpec[pvrRInches].title);	inches->SetGroup(radioGroup);	dialog->AddItem(inches);	dithering = new(V_CtrlCheck);	dithering->cItem();	dithering->SetRect(&(layoutSpec[pvrCDithering].destRect));	dithering->SetText(layoutSpec[pvrCDithering].title);	dialog->AddItem(dithering);	snaptogrid = new(V_CtrlCheck);	snaptogrid->cItem();	snaptogrid->SetRect(&(layoutSpec[pvrCSnaptogrid].destRect));	snaptogrid->SetText(layoutSpec[pvrCSnaptogrid].title);	dialog->AddItem(snaptogrid);#if WINDOWS	flash = new(V_CtrlCheck);	flash->cItem();	flash->SetRect(&(layoutSpec[pvrCFlash].destRect));	flash->SetText(layoutSpec[pvrCFlash].title);	dialog->AddItem(flash);	if (!VGetFlashAble()) flash->Activate(FALSE);#endif //WINDOWS	frames = new(V_CtrlCheck);	frames->cItem();	frames->SetRect(&(layoutSpec[pvrCFrames].destRect));	frames->SetText(layoutSpec[pvrCFrames].title);	dialog->AddItem(frames);		colldet = new(V_CtrlCheck);	colldet->cItem();	colldet->SetRect(&(layoutSpec[pvrCCollision].destRect));	colldet->SetText(layoutSpec[pvrCCollision].title);	dialog->AddItem(colldet);	}void PrefVR::SetPreferences(AppPreference *prefCopy) 	{		RenderPreference	*renderP;    EditorPreference	*editP;	UnitPreference		*unitP;    ConfigurePreference	*configP;    NavigatePreference	*navP;		PrefObject::SetPreferences(prefCopy);	renderP = (RenderPreference*)prefCopy->GetPreference(preferRenderer);    editP = (EditorPreference*)prefCopy->GetPreference(preferEditor);	unitP = (UnitPreference*)prefCopy->GetPreference(preferUnits);    configP = (ConfigurePreference*)prefCopy->GetPreference(preferConfigure);	navP = (NavigatePreference*)prefCopy->GetPreference(preferNavigate);#if WINDOWS	flash->SetValue(VGetFlashAble()&&configP->flashFill ? TRUE : FALSE);#endif	centimeters->SetValue((unitP->unitSystem == unitCentimeter) ? TRUE : FALSE);	inches->SetValue((unitP->unitSystem == unitInch) ? TRUE : FALSE);		dithering->SetValue(renderP->dither);	snaptogrid->SetValue(editP->editorState&RULER_SNAP ? TRUE : FALSE);	frames->SetValue(((renderP->renderShadeMode==RENDER_WHITESH) && (renderP->frameBlack)) ? TRUE : FALSE);	colldet->SetValue(navP->navigateMode&NAVIG_COLLISION ? TRUE : FALSE);	}		voidPrefVR::GetResults(AppPreference *prefCopy)	{	RenderPreference	*renderP;    EditorPreference	*editP;	UnitPreference		*unitP;    ConfigurePreference	*configP;    NavigatePreference	*navP;	long			   	newMode;	short				changed;		PrefObject::SetPreferences(prefCopy);	renderP = (RenderPreference*)prefCopy->GetPreference(preferRenderer);    editP = (EditorPreference*)prefCopy->GetPreference(preferEditor);	unitP = (UnitPreference*)prefCopy->GetPreference(preferUnits);    configP = (ConfigurePreference*)prefCopy->GetPreference(preferConfigure);	navP = (NavigatePreference*)prefCopy->GetPreference(preferNavigate);#if WINDOWS	if (VGetFlashAble() && flash->GetValue() != (configP->flashFill ? TRUE : FALSE))		{		configP->flashFill = flash->GetValue() ? TRUE : FALSE;		configP->SetChange(TRUE);		}#endif	if(inches->GetValue() != ((unitP->unitSystem == unitInch) ? TRUE : FALSE))		{		if (inches->GetValue())			unitP->unitSystem = unitInch;		else			unitP->unitSystem = unitCentimeter;		unitP->SetChange(TRUE);		unitP->unitSize = GetSIUnit(unitP->unitSystem);		}		if (snaptogrid->GetValue() != (editP->editorState&RULER_SNAP ? TRUE : FALSE))		{		if (snaptogrid->GetValue())			editP->editorState |= RULER_SNAP;		else			editP->editorState &= ~RULER_SNAP;		editP->SetChange(TRUE);		}	if (colldet->GetValue() != (navP->navigateMode&NAVIG_COLLISION ? TRUE : FALSE))		{		if (colldet->GetValue())			navP->navigateMode |= NAVIG_COLLISION;		else			navP->navigateMode &= ~NAVIG_COLLISION;		navP->SetChange(TRUE);		}	changed = FALSE;	if (dithering->GetValue() != renderP->dither) changed = TRUE;	if (frames->GetValue() != (((renderP->renderShadeMode==(RENDER_WHITESH))&&			(renderP->frameBlack)) ? TRUE : FALSE)) changed = TRUE;		if (changed)		{		if (frames->GetValue())			{			renderP->frameBlack = TRUE;			renderP->renderShadeMode = RENDER_WHITESH;			renderP->renderDrawMode |= RENDER_NOTEXTURES;			}		else			{			renderP->frameBlack = FALSE;			renderP->renderShadeMode = RENDER_FLATSH;			renderP->renderDrawMode &= ~RENDER_NOTEXTURES;			}		renderP->dither = dithering->GetValue();		renderP->SetChange(TRUE);		}	}#endif //VWT// MERGE-HMD [[[/************************************************************************************* * *		HMD Preference Object * ************************************************************************************/#if USE_HMDvoid PrefHMD::SetInterface(V_Dialog *dialog) {Rect r;int	success;short new_yblank;char str[256];double d;// ABD HMD MAR95 massive changes in this routine// ABD HMD JUL95	PrefObject::SetInterface(dialog);		the_dialog = (PrefDialog *)dialog;		// ABD HMD JUL95		//title = new(V_Text);	//title->cItem();	//VSetRect(&r, 10, 33, 370, 64);	//title->SetRect(&r);	//title->SetText(TXTI_HMD_SETTINGS);	//dialog->AddItem(title);	ipd = new(V_EditText);	ipd->cItem();	VSetRect(&r, 220, 67, 280, 83);	#if WINDOWS	r.bottom += 5;    #endif // WINDOWS	ipd->SetRect(&r);	dialog->AddItem(ipd);	iod = new(V_EditText);	iod->cItem();	VSetRect(&r, 220, 91, 280, 107);	#if WINDOWS	r.bottom += 5;    #endif // WINDOWS	iod->SetRect(&r);	dialog->AddItem(iod);	wp = new(V_EditText);	wp->cItem();	VSetRect(&r, 220, 115, 280, 131);	#if WINDOWS	r.bottom += 5;    #endif // WINDOWS	wp->SetRect(&r);	dialog->AddItem(wp);	yb = new(V_EditText);	yb->cItem();	VSetRect(&r, 220, 139, 280, 155);	#if WINDOWS	r.bottom += 5;    #endif // WINDOWS	yb->SetRect(&r);	dialog->AddItem(yb);	statText = new(V_Text);		// ABD HMD JUL95	statText->cItem();	VSetRect(&r, 10, 38, 100, 53);	statText->SetRect(&r);	statText->SetText("Display Type:");	dialog->AddItem(statText);		pop = new(HMDPopMenu);		// ABD HMD JUL95	pop->cItem();	VSetRect(&r, 130, 38, 300, 54);	#if WINDOWS	r.bottom += 100;    #endif // WINDOWS	pop->SetRect(&r);	dialog->AddItem(pop);	pop->SetValue(1);	statText = new(V_Text);	statText->cItem();	VSetRect(&r, 10, 67, 219, 83);	statText->SetRect(&r);	statText->SetText(TXTI_IPD);		// ABD HMD MAR95	dialog->AddItem(statText);		statText = new(V_Text);	statText->cItem();	VSetRect(&r, 10, 91, 219, 107);	statText->SetRect(&r);	statText->SetText(TXTI_IOD);		// ABD HMD MAR95	dialog->AddItem(statText);	statText = new(V_Text);	statText->cItem();	VSetRect(&r, 10, 115, 219, 131);	statText->SetRect(&r);	statText->SetText(TXTI_WP);		// ABD HMD MAR95	dialog->AddItem(statText);	statText = new(V_Text);	statText->cItem();	VSetRect(&r, 10, 139, 219, 155);	statText->SetRect(&r);	statText->SetText(TXTI_YBLANK);		// ABD HMD MAR95	dialog->AddItem(statText);}void PrefHMD::SetPreferences(struct AppPreference *prefCopy) {FFixed ff_ipd, ff_iod, ff_wp;		// ABD HMD MAR95short yblank;HMDPreference	*pref;double d;char str[256];	PrefObject::SetPreferences(prefCopy);	pref = (HMDPreference*)prefCopy->GetPreference(preferHMD);	if (!pref)		DEBUGGER();	ff_ipd = pref->ipd;	ff_iod = pref->iod;	ff_wp = pref->wp;	yblank = pref->yblank;	d = FixedToDbl(ff_ipd);	sprintf(str, "%.2f", d);	ipd->SetText(str);	d = FixedToDbl(ff_iod);	sprintf(str, "%.2f", d);	iod->SetText(str);	d = FixedToDbl(ff_wp);	sprintf(str, "%.2f", d);	wp->SetText(str);	sprintf(str, "%d", yblank);	yb->SetText(str);	pop->SetValue(pref->hmd_type+1);	// ABD HMD JUL95}void PrefHMD::GetResults(struct AppPreference *masterPref) {int val;char str[256];double d;short new_yblank, yblank;FFixed ff_ipd, ff_iod, ff_wp;HMDPreference *hmdPref;AppPreference *appPref;	PrefObject::GetResults(masterPref);	hmdPref = (HMDPreference*)masterPref->GetPreference(preferHMD);	ff_ipd = hmdPref->ipd;	ff_iod = hmdPref->iod;	ff_wp = hmdPref->wp;	yblank = hmdPref->yblank;	ipd->GetText(str);    d = FixedToDbl(hmdPref->ipd);	val = sscanf(str, "%lf", &d);	if (d < 0.0) d = 0.0;    if (d > 5.0) d = 5.0;	if (val == 1)		ff_ipd = DblToFixed(d);	iod->GetText(str);    d = FixedToDbl(hmdPref->iod);	val = sscanf(str, "%lf", &d);	if (d < 1.0) d = 1.0;    if (d > 1000.0) d = 1000.0;	if (val == 1)		ff_iod = DblToFixed(d);	wp->GetText(str);	d = FixedToDbl(hmdPref->wp);	val = sscanf(str, "%lf", &d);	if (d < 0.1) d = 0.1;	if (d > 100.0) d = 100.0;	if (val == 1)		ff_wp = DblToFixed(d);		yb->GetText(str);	d = (double)hmdPref->yblank;	val = sscanf(str, "%lf", &d);	if (d < 0.0) d = 0.0;	if (d > 1000.0) d = 1000.0;	if (val == 1)		yblank = (short)d;	// set the settings	// ABD HMD MAR95	hmdPref->hmd_type = pop->GetValue() - 1;	hmdPref->ipd = ff_ipd;	hmdPref->iod = ff_iod;	hmdPref->wp = ff_wp;	hmdPref->yblank = yblank;		hmdPref->SetChange(TRUE);	the_dialog->controller->Request(NULL, msgEdit, objHMD, hmdPref->hmd_type);	if (gHMD != NULL)		gHMD->ComputeIODandFOV();}voidHMDPopMenu::AddItems()	// ABD HMD JUL95	{	// NOTE THESE MUST BE IN THE SAME ORDER AS HMD TYPES IN HMD.H !!!	Append(TXTI_STEREO_PAIRS);	Append(TXTI_CYBERSCOPE);	Append(TXTI_VREX);	Append(TXTI_CRYSTALEYES);	}	#endif // USE_HMD// MERGE-HMD ]]]#if VWT/************************************************************************************* * *		Popup Definition * ************************************************************************************/voidChoicePopMenu::Action()	{	((PrefDialog*)thePane)->SetPrefType(GetValue());    V_PopMenu::Action();	}voidChoicePopMenu::AddItems()	{	Append(TXTDE_TITLE);	Append(TXTDR_TITLE);	Append(TXTDN_TITLE);	Append(TXTDD_TITLE);	Append(TXTDU_TITLE);	#if USE_HMD 			// MERGE-HMD	Append(TXTDS_TITLE);	// MERGE-HMD	#endif // USE_HMD 		// MERGE-HMD	}voidDrawPopMenu::AddItems()	{	char str[256];	sprintf(str,"%s",TXTDR_FILL_AND_FRAME);		// PRO-JAP	Append(str);	Append(TXTDR_FILL);	Append(TXTDR_FRAME);	}voidShadePopMenu::AddItems()	{	Append(TXTM_SHADE);	Append(TXTM_NOSHADE);	Append(TXTM_WSHADE);	}	voidAspectPopMenu::LinkText(ActionText *horz,ActionText *vert)	{ h = horz; v = vert; }voidAspectPopMenu::SetColor(RGBColor col)	{ skyColor = col; }voidAspectPopMenu::SetCheck(V_CtrlCheck *c)	{ check = c; }voidAspectPopMenu::Action()	{	Point	p;	char	str[256];	GetRatio(&p);	sprintf(str,"%i",p.h);	if(h)h->SetText(str);	sprintf(str,"%i",p.v);	if(v)v->SetText(str);    V_PopMenu::Action();	}intAspectPopMenu::GetRatio(Point *p)	{	char str[256];	int ratio;    long tmp_long;		// ABD JAN95		switch(GetValue())		{		case aspPop35Horz: ratio = aspect35Horz;break;		case aspPop35Vert: ratio = aspect35Vert;break;		case aspPop225Square: ratio = aspect225Square;break;		case aspPop4x5Horz: ratio = aspect4x5Horz;break;		case aspPop4x5Vert: ratio = aspect4x5Vert;break;		case aspPopTelevision: ratio = aspectTelevision;break;#if JAPANESE  // jca 18APR95		case aspPopJapaneseHiVision: ratio = aspectJapaneseHiVision;break;#endif // JAPANESE		case aspPopAcademyAperture: ratio = aspectAcademyAperture;break;		case aspPopEuroWideScreen: ratio = aspectEuroWideScreen;break;		case aspPopUSWideScreen: ratio = aspectUSWideScreen;break;		case aspPopAnamorphicAperture: ratio = aspectAnamorphicAperture; break;		case aspPopCustom: 			ratio = aspectCustom;			str[0]=0;			*p=PtZero; 				if(h)h->GetText(str);			sscanf(str,"%ld",&tmp_long);		// ABD JAN95			p->h = (short)tmp_long;			// ABD JAN95			if(v)v->GetText(str);			sscanf(str,"%ld",&tmp_long);		// ABD JAN95			p->v = (short)tmp_long;			// ABD JAN95			break;		}		AspectRatio(ratio,p);	return ratio;	}voidAspectPopMenu::SetRatio(int ratio)	{	switch(ratio)		{		case aspect35Horz: SetValue(aspPop35Horz); break;		case aspect35Vert: SetValue(aspPop35Vert); break;		case aspect225Square: SetValue(aspPop225Square); break;		case aspect4x5Horz: SetValue(aspPop4x5Horz); break;		case aspect4x5Vert: SetValue(aspPop4x5Vert); break;		case aspectTelevision: SetValue(aspPopTelevision); break;#if JAPANESE		case aspectJapaneseHiVision: SetValue(aspPopJapaneseHiVision); break;#endif // JAPANESE		case aspectAcademyAperture: SetValue(aspPopAcademyAperture); break;		case aspectEuroWideScreen: SetValue(aspPopEuroWideScreen); break;		case aspectUSWideScreen: SetValue(aspPopUSWideScreen); break;		case aspectAnamorphicAperture: SetValue(aspPopAnamorphicAperture); break;		case aspectCustom: SetValue(aspPopCustom); break;		}	}voidAspectPopMenu::Display()	{	Rect	r;	Point	p;	V_PopMenu::Display();	/* DO THE ASPECT BOX HERE */	GetRatio(&p);	r=layoutSpec[pnvOAspectBox].destRect;	VForeColor(&vColorSlateM);	VPaintRect(&r);	VForeColor(&vBlack);	VFrameRect(&r);	r.top+=2;	r.left+=2;	r.bottom-=2;	r.right-=2;	VForeColor(&vBlack);	VPaintRect(&r);	if(check->GetValue())		{		long width, height;		int	centerX,centerY;					width = (long)p.h * (r.bottom - r.top);		height = (long)p.v * (r.right- r.left);		centerX = r.left + ((r.right - r.left)>>1);		centerY = r.top + ((r.bottom - r.top)>>1);		if (width < height)			{			width = (width + (p.v >> 1)) / p.v;			r.left = centerX - (width >> 1);			r.right = r.left + width;			}		else			{			height = (height + (p.h >> 1)) / p.h;			r.top = centerY - (height >> 1);			r.bottom = r.top + height;			}		}	r.top++;	r.left++;	r.bottom--;	r.right--;	VForeColor(&skyColor);	VPaintRect(&r);	VForeColor(&vBlack);	}voidAspectPopMenu::AddItems()	{	Append(TXTDN_35HORZ);	Append(TXTDN_35VERT);	Append(TXTDN_225SQ);	Append(TXTDN_4x5HORZ);	Append(TXTDN_4x5VERT);#if MACINTOSH	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93#endif //MACINTOSH	Append(TXTDN_TV);#if JAPANESE	Append(TXTDN_HIVISION);#endif // JAPANESE	Append(TXTDN_ACADEMY);	Append(TXTDN_EUROWIDESCR);	Append(TXTDN_USWIDESCR);	Append(TXTDN_ANOMORPHIC);#if MACINTOSH	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93#endif //MACINTOSH	Append(TXTDN_CUSTOM);	}	voidUnitPopMenu::SetSystem(int unitSystem)	{	switch(unitSystem)		{		case unitInch: SetValue(menuUnitInch); break;		case unitFoot: SetValue(menuUnitFoot); break;		case unitYard: SetValue(menuUnitYard); break;		case unitMile: SetValue(menuUnitMile); break;		case unitMillimeter: SetValue(menuUnitMMeter); break;		case unitCentimeter: SetValue(menuUnitCMeter);break;		case unitMeter: SetValue(menuUnitMeter); break;		case unitKilometer: SetValue(menuUnitKMeter); break;		case unitPica: SetValue(menuUnitPica); break;		case unitPoint: SetValue(menuUnitPoint); break;		case unitAngstrom: SetValue(menuUnitAngstrom); break;		case unitParsec:SetValue(menuUnitParsec); break;		case unitCustom: 		default: SetValue(menuUnitCustom); break;		}	}intUnitPopMenu::GetUnitSystem(char *str,char *unitStr)	{	int result;	switch(GetValue())		{		case menuUnitInch:	strcpy(str,TXTC_INCH); strcpy(unitStr,TXTC_AINCH); result = unitInch; break;		case menuUnitFoot:	strcpy(str,TXTC_FOOT); strcpy(unitStr,TXTC_AFOOT); result = unitFoot; break;		case menuUnitYard:	strcpy(str,TXTC_YARD); strcpy(unitStr,TXTC_AYARD); result = unitYard; break;		case menuUnitMile:	strcpy(str,TXTC_MILE); strcpy(unitStr,TXTC_AMILE); result = unitMile; break;		case menuUnitMMeter:strcpy(str,TXTC_MMET); strcpy(unitStr,TXTC_AMMET); result = unitMillimeter; break;		case menuUnitCMeter:strcpy(str,TXTC_CMET); strcpy(unitStr,TXTC_ACMET); result = unitCentimeter; break;		case menuUnitMeter:	strcpy(str,TXTC_METER);strcpy(unitStr,TXTC_AMETER); result = unitMeter; break;		case menuUnitKMeter:strcpy(str,TXTC_KMETER);strcpy(unitStr,TXTC_AKMETER); result = unitKilometer; break;		case menuUnitPoint:	strcpy(str,TXTC_POINT);strcpy(unitStr,TXTC_APOINT); result = unitPoint; break;		case menuUnitPica:	strcpy(str,TXTC_PICA); strcpy(unitStr,TXTC_APICA); result = unitPica; break;		case menuUnitAngstrom:strcpy(str,TXTC_ANGSTROM);strcpy(unitStr,TXTC_AANGSTROM); result = unitAngstrom; break;		case menuUnitParsec:strcpy(str,TXTC_PARSEC);strcpy(unitStr,TXTC_APARSEC); result = unitParsec; break;		case menuUnitCustom:strcpy(str,TXTC_CUSTOM); strcpy(unitStr,TXTC_CUSTOM); result = unitCustom; break;		}	return result;	}voidUnitPopMenu::Action()	{	((PrefDialog*)thePane)->GetResults(updateFlag);	V_PopMenu::Action();	}voidUnitPopMenu::AddItems()	{	Append(TXTC_INCH);	Append(TXTC_FOOT);	Append(TXTC_YARD);	Append(TXTC_MILE);#if MACINTOSH	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93#endif //MACINTOSH	Append(TXTC_MMET);	Append(TXTC_CMET);	Append(TXTC_METER);	Append(TXTC_KMETER);#if MACINTOSH	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93#endif //MACINTOSH	Append(TXTC_POINT);	Append(TXTC_PICA);#if MACINTOSH	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93#endif //MACINTOSH	Append(TXTC_ANGSTROM);	Append(TXTC_PARSEC);#if MACINTOSH	AppendSeparator();		// ABD WILLIAMS MERGE11 9/11/93#endif //MACINTOSH	Append(TXTC_CUSTOM);	}#endif //VWT