/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History: *------------------------------------------------------------------------------ */#include "VTypes.h"#include "Library.h"#include "LbWCntrl.h"#include "LibDefs.h"#include "AppText.h"#include "AppFiles.h"#include "ToolDef.h"#include "DlogPref.h"#include "WMenus.h"#include "VFile.h"#include "VGraphic.h"#include "VGUtil.h"#include "VPrint.h"	// JCA 3 sept 93#include "VWindow.h"	// JCA 3 Sept 93#include <stdio.h>#include <string.h>#if (WINDOWS && VWT) || (SPECIAL_EDITION)		// ABD-VRML3// jca 18MAY94 flag so we won't open too many libsint gIsALibraryLoaded = 0;// jam 21SEPT94 changed so we can open any number again--visible// menu manager stuff fix fixed this problem.#endifintLibrary::cDocument(int query,V_File *file)	{		char str[256];	int result, fileUntitled;#if (WINDOWS && VWT) || (SPECIAL_EDITION)		// ABD-VRML3	// jca 18MAY94 if there's more than one lib, the menus start going funky and	// we have been known to crash.  Don't open more than one lib at a time.	if (gIsALibraryLoaded)		return(FALSE);	else		#if !SPECIAL_EDITION		// ABD-VRML3		gIsALibraryLoaded = FALSE; //jam 21SEPT94 we can do more than one lib now.		#else		// ABD-VRML3		gIsALibraryLoaded = TRUE;  //jam 21SEPT94		// ABD-VRML3		#endif		// ABD-VRML3#endif // WINDOWS#if VR	vr_doc = NULL;		// ABD WILLIAMS MERGE7 9/2/93	vis = TRUE;#endif // VR	result = WalkDocumentStub::cDocument(query,file);		walkFile = file;    fileUntitled = Untitled();		sprintf(str, "%s %s", TXT_APPNAME, TXT_LIBRARY);	SetTitlePrefix(str);		if(result)		{		type = libraryDocument;				if(file)			{			walkFile = file;			walkFile->GetFName(str);			strcpy(title,str);			}		else			{			walkFile = new(V_File);			walkFile->cFile(query,appFileTypeLibrary,appFileCreator,appFilterDescriptorWALKLIB,TXTGF_LIBRARY);			}				strcpy(str,title);		SetTitle(str);#if WINDOWS		if ((fileUntitled) && (!file)) // jca.  make the filename untitled, if it is an untitled file			walkFile->Untitle();#endif		LaunchController(toolCRTLWalk);			fileMenu->SetController(walkController);		editMenu->SetController(walkController);				if(Load(query))				result = FALSE;			}	return(result);	}voidLibrary::dDocument()	{#if (WINDOWS && VWT) || (SPECIAL_EDITION)		// ABD-VRML3	// jca 18MAY94 if there's more than one lib, the menus start going funky and    // we have been known to crash.	gIsALibraryLoaded = FALSE;#endif // WINDOWS	WalkDocumentStub::dDocument();	walkController->dController();	walkController = NULL;	}	voidVSendMessageNow(long message);intLibrary::Load(int query) 	{	WalkDocumentStub	*doc;	int result,newFlag,err, oldUntitled;	char str[256],oldTitle[256];	err = 0;	walkFile->SetQuery(query,TXTGF_LIBRARY);	strcpy(oldTitle,title);#if WINDOWS	oldUntitled = Untitled();	if (oldUntitled) // jca.  make the filename untitled, if it is an untitled file		walkFile->Untitle();#endif	switch(query)		{		case LOADOVER:			query = LOADAS;			walkFile->SetQuery(query,TXTGF_LIBRARY);			doc = new(WalkDocument);			doc->OpenDocument(query,NULL, NewMDI);			result = modelFine;			break;					case LOAD: 			break;						case LOADAS:			if(!Empty())				{ LoadNew(LOADAS); return(FALSE); }						#if !SAVE_DISABLED	// ABD-SAVE-DISABLED			walkFile->SetNewFlag(TRUE);			#endif			result = walkFile->Find();			newFlag = walkFile->GetNewFlag();			if(newFlag)            	{				result = Save(SAVEAS);                /* jca.  result will be a true-or-false value */                if (result)	result = modelCancel;                }			else				{				if(!result)					{					doc = GlbSameDocument(this,walkFile);					if(!doc)						result = IOFile(query);					else						{						doc->Activate(NULL);						result = modelCancel; 						}					}				else					result = modelCancel; //DUDE PORT				}			break;		case LOADSTART:				result = walkFile->Find();			if(result) result = modelCancel;			else result = IOFile(query);					break;		default:			result = modelCancel;			break;			}		switch(result)		{		case modelNone:			walkController->Activate(msgInit) ;			untitled = TRUE;			err = FALSE;			break;					case modelReadOnly:		case modelFine:			/* vRefNum=walkFile->GetVolume();/* DAS 11/12/90 */			walkFile->GetFName(str);			SetTitle(str);			walkController->Activate(msgInit) ;			err = FALSE;			break;				case modelToBig:			walkFile->GetFName(title);			sprintf(str,TXTW_LOADMEMERR,title);			AlertMessage(str);			SetTitle(oldTitle) ;			walkController->SetChange(FALSE);			untitled = TRUE;			walkController->Activate(msgInit) ;			err = TRUE;			break;		case modelError:			walkFile->GetFName(title);			sprintf(str,TXTW_LOADERR,title);			AlertMessage(str);			walkController->Activate(msgInit) ;			SetTitle(oldTitle);			walkController->SetChange(FALSE);			untitled = TRUE;			err = TRUE;			break;				case modelStationery:			walkController->Activate(msgInit) ;			SetTitle(oldTitle);			walkController->SetChange(FALSE);			untitled = TRUE;			err = FALSE;			break;		case modelCancel:			SetTitle(oldTitle);			walkController->SetChange(FALSE);			untitled = TRUE;			err = TRUE;			break;		}#if WINDOWS	if (oldUntitled) // jca.  make the filename untitled, if it is an untitled file		walkFile->Untitle();#endif	return(err);		}int Library::Save(int query) 	{	char	oldTitle[256],str[256];	int err,result, oldUntitled;		strcpy(oldTitle,title);	err = 0;#if WINDOWS	oldUntitled = Untitled();	if (oldUntitled) // jca.  make the filename untitled, if it is an untitled file		walkFile->Untitle();#endif	switch(query)		{		case SAVE: 			if(!Changed()) return(FALSE);			if(Untitled())query=SAVEAS;						case SAVEAS:		case SAVECOPYAS:				walkFile->SetQuery(query,TXTPF_LIBRARY);			result = walkFile->Find();			if(result) result = modelCancel;			else result = IOFile(query);				break;			}				switch(result)		{// BILBIL		case modelReadOnly:		case modelFine:			err = FALSE;			break;						case modelError:			sprintf(str,TXTW_SAVEERR,title);			AlertMessage(str);					default:			err = TRUE;			walkController->SetChange(FALSE);					SetTitle(oldTitle);#if WINDOWS			if (oldUntitled) // jca.  make the filename untitled, if it is an untitled file				walkFile->Untitle();#endif			break;		}			return(err);		}	Rect gLastLibRect = {0,0,0,0};		// MERGE19intLibrary::IOFile(int	query)	{	LaunchInit	launchInit;	Rect	r;	char    str[256];	int		err,middle,offset,result;		/* dude	walkFile->SetQuery(LOADAS,TXTGF_LIBRARY);	if(0==walkFile->OpenApplication())duddette */		  	err = walkFile->Open(TRUE);	if(err)		result = modelError;	else		{// ABD MERGE2 WILLIAMS 8/17/93 v#if VR#if MACINTOSH		if (EmptyRect(&gLastLibRect))		// MERGE19		{			GetLimitedScreen(&r);//{ DAS-VR-FIX 9/28/93			r.left += 2;			r.right = r.left + VRLIB_DEFWIDTH;         // jca 3 Oct 93			r.top += 38;				// ABD MERGE20			r.bottom -= 24;				// ABD MERGE20// } DAS-VR-FIX 9/28/93		}		else		{			r = gLastLibRect;		// MERGE19		}#elif WINDOWS        Rect	iRect={0,0,0,0};		V_Document	*doc = GetCurrentDocument();		r = doc->GetFrameRect();		iRect = doc->GetInfoWinRect();		r.right = r.left + 204;		r.bottom = iRect.top;#endif#elif VWT#if MACINTOSH		GetLimitedScreen(&r);		middle = (r.right - r.left) >> 1;		offset =  (r.right - r.left) / 3; 		r.left = middle - offset; 		r.right = offset + middle;		middle = (r.bottom - r.top) >> 1;		offset =  (r.bottom - r.top) / 3; 		r.top =  middle - offset; 		r.bottom = offset + middle;#elif WINDOWS		// jca 29APR94 Unlike the mac, where we want to take up as little		// space as possible on the user's screen, the Windows(tm) libraries		// currently come up in their own MDIs (which have been sized by this		// point). We're just setting the size of the view window before it		// is maximized.  So make it the size of the doc, so things won't		// flash so much.		V_Document	*doc = GetCurrentDocument();		r = doc->GetFrameRect();		// remove the frame, so the window will just fit.		r.left += GetSystemMetrics(SM_CXFRAME);		r.right -= GetSystemMetrics(SM_CXFRAME);		r.top += (GetSystemMetrics(SM_CYFRAME) + GetSystemMetrics(SM_CYCAPTION));    	r.bottom -= GetSystemMetrics(SM_CYFRAME);#endif // MACINTOSH#endif // VR// ABD MERGE2 WILLIAMS 8/17/93 ^		launchInit.location = r;			walkController->LaunchController(launchInit,toolCRTLLibrary);#if WINDOWS// jca 18MAY94 commented this out and moved it down because the menus// were turning peculiar on the 2nd, 3rd, ... nth libs and you could crash// if you touched them.  Moved the maximize down a bit.// JOEBOB -- window positioning hack//HWND mdi, walk;//mdi=GetMDIClient();//if(mdi)walk=GetWindow(mdi,GW_CHILD);//if(mdi&&walk)SendMessage(mdi,WM_MDIMAXIMIZE,walk,0L);#endif //WINDOWS		err = walkController->IO(walkFile);		if(err)result = modelError;		else result = modelFine;		}			#if MACINTOSH	walkFile->IOSetDirection(DATA_OUT);	walkFile->create = appFileCreator;#endif //MACINTOSH	walkFile->Close();		if(modelFine == result)		{#if WINDOWS		// jca 18MAY94 moved this down here, and changed the		// SendMessage to a PostMessage (the other could cause		// crashes).  This should be fixed sometime.		// JOEBOB -- window positioning hack		HWND mdi, walk;		mdi=GetMDIClient();		if(mdi)walk=GetWindow(mdi,GW_CHILD);//		if(mdi&&walk)PostMessage(mdi,WM_MDIMAXIMIZE,walk,0L);		if(walk) PostMessage(walk, WM_SYSCOMMAND, SC_MAXIMIZE, 0L);#endif //WINDOWS		walkFile->GetFName(str);		walkController->Request(NULL,msgInit,objIO,0);		SetTitle(str);		}		return(result);	}	voidLibrary::LaunchController(int	type)	{	LaunchInit	launchInit;	FFixed		scale;		switch(type)		{		case toolCRTLWalk:			walkController = new(LIBWalkController);			walkController->cController(this);			walkController->SetDocument(this);			pLc(walkController)->SetLibrary(walkFile);				break;				default:			walkController->LaunchController(launchInit,type);			break;		}	}voidLibrary::TransferControl()	{#if !VR	// jca 20APR94 this should only be done in VWT or PRO	if (stub && (1 == theSuper->ALength()))		TransferDocumentControl(stub);#endif // !VR    }#if VRvoidLibrary::MoveVRLib(int swap) { }#if WINDOWSvoidLibrary::SetupDocumentInternals(int flag){	V_Document *doc;	doc = GetCurrentDocument();	title[0] = 0;	titlePrefix[0] = 0;	untitled = 0;	frameRect.left = frameRect.top = frameRect.right = frameRect.bottom = 0;	frameConcealed = 0;    hwndActive = NULL;	hwndMDIClient = NULL;    hwndFrame= NULL;	theWindowMenu = NULL;}voidLibrary::InitInfoWindow(){// do nothing}#endif // WINDOWS#endif //VR