#if DLLMOVESOBSERVER#include "worldDLL.h"//#include "usersDLL.h"#include "vtypes.h"#include "wtypes.h"#include "vmain.h"#include "appmssgs.h"#include "vdocumnt.h"#include "vfile.h"typedef int (far pascal *DLLPROT1)(void);typedef void (far pascal *DLLPROT2)(double *x, double *y, double *z,									double *yaw, double *pitch, double *roll);typedef void (far pascal *DLLPROT3)(void);typedef int (far pascal *DLLPROT4)(char far *);//typedef int (far *DLLPROT1)(void);//typedef int (far *DLLPROT2)(double *x, double *y, double *z,//							double *yaw, double *pitch, double *roll);DLLPROT1 GExternalDLLHasNewViewPoint;DLLPROT2 GExternalDLLGetObserver;DLLPROT3 GExternalDLLBegin;DLLPROT3 GExternalDLLEnd;DLLPROT4 GExternalDLLHasFileToLoad;HINSTANCE hLib;int ThereIsExternalDLL = FALSE;void InitDLLToMoveObserver(){	hLib = LoadLibrary("VIEWCTRL.DLL");	if (hLib >= 32)		{		GExternalDLLBegin = (DLLPROT3) GetProcAddress(hLib, "ExternalDLLBegin");		GExternalDLLEnd = (DLLPROT3) GetProcAddress(hLib, "ExternalDLLEnd");		GExternalDLLHasNewViewPoint = (DLLPROT1) GetProcAddress(hLib, "ExternalDLLHasNewViewPoint");		GExternalDLLGetObserver = (DLLPROT2) GetProcAddress(hLib, "ExternalDLLGetObserver");		GExternalDLLHasFileToLoad = (DLLPROT4) GetProcAddress(hLib, "ExternalDLLHasFileToLoad");//		GExternalDLLHasNewViewPoint = (DLLPROT1) GetProcAddress(hLib, "_ExternalDLLHasNewViewPoint");//		GExternalDLLGetObserver = (DLLPROT2) GetProcAddress(hLib, "_ExternalDLLGetObserver");		if((GExternalDLLHasNewViewPoint == ((DLLPROT1) NULL)) ||		   (GExternalDLLGetObserver == ((DLLPROT2) NULL)) ||		   (GExternalDLLBegin == ((DLLPROT3) NULL)) ||		   (GExternalDLLEnd == ((DLLPROT3) NULL)) ||		   (GExternalDLLHasFileToLoad == ((DLLPROT4) NULL)))			{			ThereIsExternalDLL = FALSE;			FreeLibrary(hLib);			}		else			{			ThereIsExternalDLL = TRUE;			GExternalDLLBegin();			}		}	else		{        ThereIsExternalDLL = FALSE;        }}void EndDLLToMoveObserver(){	if(ThereIsExternalDLL)		{		GExternalDLLEnd();		FreeLibrary(hLib);        }}int entrycounter = 0;	//onlywant to actually go out to dll every third messagevoid DLLMainEventLoopEntry(){	MSG testMsg;    char path[1024];	if(ThereIsExternalDLL)	{		if((entrycounter == 2) && GExternalDLLHasNewViewPoint())		{			VSendMessage(MSG_VIEWDLLSPOT);		}		else if((entrycounter == 2) && GExternalDLLHasFileToLoad(path))		{			V_File *file;			VfsLocation *vfs;			long length,i;			vfs = new(VfsLocation);			vfs->cVfsLocation();			length = strlen(path);			strcpy(vfs->extension, &(path[length-3]));			path[length-4] = '\0';			length = strlen(path);			for(i=length-1;(i>=0) && (path[i] != '\\');i--);			if(i==-1) return;			strcpy(vfs->name, &(path[i+1]));            path[i] = '\0';			strcpy(vfs->path, path);			file = new(V_File);			file->cFile(LOADSTART,MakeID('?','?','?','?'),MakeID('?','?','?','?'), "", "");			file->VSetLocation(vfs);			vfs->dVfsLocation();			NewDocument(file,LOADSTART);			VSendMessage(MSG_DONOTHING);		}	//	else if(!PeekMessage(&testMsg,NULL,VIRTUS_MESSAGE,VIRTUS_MESSAGE,PM_NOYIELD|PM_NOREMOVE))		#if 0		else if(!PeekMessage(&testMsg,NULL,0,0,PM_NOREMOVE))		{    		VSendMessage(MSG_DONOTHING);	//make sure messages keep flowing		}        #endif		entrycounter++;		if(entrycounter == 3) entrycounter = 0;    }}#if 0void DLLGetObserver(Point3DFFixed *pt){Point3Ddouble ptdbl;	ptdbl.x = FixedToDbl(pt->x);	ptdbl.y = FixedToDbl(pt->y);	ptdbl.z = FixedToDbl(pt->z);	ExternalDLLGetObserver(&(ptdbl.x),&(ptdbl.y),&(ptdbl.z));	pt->x = DblToFixed(ptdbl.x);	pt->y = DblToFixed(ptdbl.y);	pt->z = DblToFixed(ptdbl.z);}#endif#include <math.h>#define USTORADIANS M_PI/128.0#define RADIANSTOUS 128.0/M_PIvoid DLLGetObserver(Point3DFFixed *pt, Angle3DFFixed *ang){	double x,y,z,roll,pitch,yaw;	if(ThereIsExternalDLL)	{		x = FixedToDbl(pt->x);		y = FixedToDbl(pt->y);		z = FixedToDbl(pt->z);		roll = FixedToDbl(ang->roll)*USTORADIANS;		pitch = FixedToDbl(ang->pitch)*USTORADIANS;		yaw = FixedToDbl(ang->yaw)*USTORADIANS;		GExternalDLLGetObserver(&x,&y,&z,&yaw,&pitch,&roll);		pt->x = DblToFixed(x);		pt->y = DblToFixed(y);		pt->z = DblToFixed(z);		ang->roll = DblToFixed(roll*RADIANSTOUS);		ang->pitch = DblToFixed(pitch*RADIANSTOUS);		ang->yaw = DblToFixed(yaw*RADIANSTOUS);	}}#endif DLLMOVESOBSERVER