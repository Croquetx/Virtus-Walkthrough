/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  *------------------------------------------------------------------------------ */#include "VTypes.h"#include "Trace.h"#include "AppDeflt.h"#include "AppFiles.h"#include "AppText.h"#include "CVPolyh.h"#include "Position.h"#include "WalkBuff.h"#include "CVLItem.h"#include "VDialog.h"#include "VFile.h"#include "VError.h"#include "VTextDef.h"#include <stdio.h>void Trace::cTrace()	{	polyhedron = NULL;	file = NULL;	layer = NULL;	viewVector = topViewVector;	scale = FFOne;	}void Trace::dTrace() 	{ 	file->dFile();	delete this; 	}	voidTrace::SetLayer(LayerItem *lyr) 	{ 	layer = lyr;	}LayerItem *Trace::GetLayer() 	{ 	return layer;	}void Trace::SetView(Point3DFFixed pt3D) { viewVector = pt3D; }Point3DFFixed Trace::GetView() { return viewVector; }void Trace::SetPolyhedron(Polyhedron *poly) { polyhedron = poly; }CAVPolyhedron *Trace::GetPolyhedron() { return ((CAVPolyhedron *)polyhedron); }void Trace::SetFile(V_File *f) { file = f; }V_File *Trace::GetFile() { return file; }void Trace::SetScale(FFixed sc) { scale = sc; }FFixed Trace::GetScale() { return scale; }int Trace::IO(V_Buffer *buf) 	{	V_File	*modelFile,*traceFile;	Position	*posn;	char fileName[256],str[256];	char defAxis;	long chunkID;	int err;		err = 0;	modelFile = (V_File	*)buf;		if(0 != (err = IOType(buf,&viewVector,IO_POINT3D_FFIXED))) return err;				if (buf->IODirection() == DATA_IN)		{		while (!err)			{			chunkID = buf->OpenChunkR();			if (chunkID == 0 || err) break;			switch(chunkID)				{				case IFF_POSN: 					posn = new(Position);					posn->cPosition();					err = posn->IO_3D(buf);					posn->Copy(polyhedron->rPosn);					posn->dPosition();					polyhedron->Update();					break;									case IFF_FILE: 					file = new(V_File);					file->cFile(REFERENCE,0,0,"","");					file->SetRelative(modelFile);					err = file->IO(buf);					if(fileNotFoundErr == err)						{						file->GetFName(fileName);						sprintf(str,TXT_TRACE_MISSING,fileName);		// PRO-JAP						if(WarningMessage(str,TXTC_FORGET,TXTC_LOCATE,POSITIVE_BUTTON_TWO|DEFAULT_BUTTON_TWO))							{							file->GetFName(fileName);							sprintf(str,TXT_LOCATE_TRACE,fileName);		// PRO-JAP							file->SetQuery(LOADAS,str);#if MACINTOSH							file->AddFType(appFileTypePICT,"");							file->AddFType(appFileTypeMDII,"");							file->AddFType(appFileTypeCLARISCAD,"");#elif WINDOWS							file->AddFType(appFileTypeBMP,appFilterDescriptorBMP);							file->AddFType(appFileTypeDXF,appFilterDescriptorDXF);							file->AddFType(appFileTypeTIFF,appFilterDescriptorTIFF);#endif							err = file->Find();							file->SetQuery(REFERENCE,fileName);							if(err)err = fileNotFoundErr;							}						}#if WINDOWS					if (err != fileNotFoundErr)   /* set the filetype info */						{						ULong	extension;						extension = file->GetFType();						switch (extension)							{							case appFileTypeTIFF:							case appFileTypeBMP:							case appFileTypeDXF:                            	// All ok!								break;							default:    // We don't recognize this file type								file->GetFName(fileName);								sprintf(str,TXTW_BADTYPE,fileName);								AlertMessage(str);								/* !!!!!!!!!!! need a better error */								err = fileNotFoundErr;								break;							}						}#endif					break;				}			buf->CloseChunk();			}					}	else		{		posn = polyhedron->rPosn;		buf->OpenChunkW(IFF_POSN);		err = posn->IO_3D(buf);		buf->CloseChunk();		file->SetRelative(modelFile);		buf->OpenChunkW(IFF_FILE);		err = file->IO(buf);		buf->CloseChunk();		}					return err;	}	