#include "VTypes.h"#include "VPane.h"#include "HelpPane.h"#include "VItem.h"#include "Types.h"#include "AppText.h"#include "BallHelp.h"#include "Misc.h"voidHelpPane::cPane(int flag)	{	int pictID = HELP_PANEPICT;	V_Picture *pict;	Rect prevRect = InitRect (-30, -166, -10, -93);	Rect nextRect = InitRect(-30, -83, -10, -10);	Rect r;	V_Pane::cPane(flag);	helpPICTs = new(V_Array);	helpPICTs->cArray(0, sizeof(V_Picture *), 4);	screen = 0;	while (TRUE)		{		pict = new(V_Picture);		pict->cPicture(TRUE);		if (pict->GetPictNum(pictID) != 0)			{			pict->dPicture();			break;			}		if (pictID == HELP_PANEPICT)			{			pict->GetRect(&r);			paneSize = r;			}		helpPICTs->Append(&pict);		pictID++;		}	prevRect.top += paneSize.bottom; prevRect.bottom += paneSize.bottom;	prevRect.left += paneSize.right; prevRect.right += paneSize.right;	previous = new(HelpButton);	previous->cItem();	previous->SetRect(&prevRect);	previous->SetText(TXTC_PREVIOUS);	AddItem(previous);	nextRect.top += paneSize.bottom; nextRect.bottom += paneSize.bottom;	nextRect.left += paneSize.right; nextRect.right += paneSize.right;	next = new(HelpButton);	next->cItem();	next->SetRect(&nextRect);	next->SetText(TXTC_NEXT);	AddItem(next);	}voidHelpPane::dPane()	{	V_Picture **pict;	int length, i;	length = helpPICTs->ALength();	pict = (V_Picture**)helpPICTs->Use();	for (i = 0; i < length; i++)		(*pict++)->dPicture();	helpPICTs->Unuse();	helpPICTs->dArray();	V_Pane::dPane();	}voidHelpPane::ButtonAction(HelpButton *btn)	{	int max = helpPICTs->ALength() - 1;	if (btn == previous && screen > 0) screen--;	if (btn == next && screen < max) screen++;	VDisplay(DRAW);	}voidHelpPane::Display(int type, int h, int v)	{	V_Picture *pict;	Rect r = dataRect;	int max = helpPICTs->ALength() - 1;	int oldState, newState;	if (screen < helpPICTs->ALength())		{		helpPICTs->Get(screen, &pict);		pict->Draw(&r);		}	oldState = ((previous->GetActiveState()) ? FALSE : TRUE);	newState = ((screen != 0) ? TRUE : FALSE);	if (oldState != newState) previous->Activate(newState);	oldState = ((next->GetActiveState()) ? FALSE : TRUE);	newState = ((screen != max) ? TRUE : FALSE);	if (oldState != newState) next->Activate(newState);		V_Pane::Display(type, h, v);	}voidHelpPane::MouseDown(Point pt, long modifier)	{	}voidHelpPane::GetSize(Rect *r)	{	*r = paneSize;	}voidHelpPane::Activate()	{	int max = helpPICTs->ALength() - 1;	int oldState, newState;	V_Pane::Activate();	oldState = ((previous->GetActiveState()) ? FALSE : TRUE);	newState = ((screen != 0) ? TRUE : FALSE);	if (oldState != newState) previous->Activate(newState);	oldState = ((next->GetActiveState()) ? FALSE : TRUE);	newState = ((screen != max) ? TRUE : FALSE);	if (oldState != newState) next->Activate(newState);	}voidHelpPane::TrackHelp(Point pt,long modifier)	{	Rect rect;		rect = dataRect;	BalloonHotRect(&rect, pt);	Bubble(pt, &rect, TXTB_PLAYERHELP);	}	voidHelpButton::Action()	{	((HelpPane *)thePane)->ButtonAction(this);	}