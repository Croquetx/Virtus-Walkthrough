/*  THIS IS THE SPOT TO DEFINE APPLICATION DEFAULTS  	RIGHT NOW I"M ALSO USING IT FOR SOME APPLICATION DEFINES	TILL I FIGURE OUT A BETTER WAY */#ifndef APP_DEFAULTS#define APP_DEFAULTS#include "VTypes.h"#include "WTypes.h"#include "VMDL.h"#include "VIO.h"#define IFF_EDITOR		MakeID('P', 'E', 'D', 'T')#define IFF_RENDER		MakeID('P', 'R', 'N', 'D')#define IFF_NAVIGATE	MakeID('P', 'N', 'A', 'V')#define IFF_DEFAULTS	MakeID('P', 'D', 'E', 'F')#define IFF_UNITS		MakeID('P', 'U', 'N', 'T')#define IFF_MODEL		MakeID('P', 'M', 'O', 'D')#define IFF_WINDOW		MakeID('P', 'W', 'I', 'N')#define IFF_WINDOWREC	MakeID('W', 'I', 'N', 'R')#define IFF_TRACELAYER	MakeID('T', 'R', 'A', 'C')#define IFF_TRANSLATOR	MakeID('T', 'R', 'N', 'S')#define IFF_TRANSVOYAGER MakeID('V', 'G', 'E', 'R')#define IFF_VGERSIMPLE	MakeID('V', 'G', 'R', 'S')#define IFF_VGERPICT	MakeID('V', 'G', 'R', 'P')#define IFF_VGERTEXT	MakeID('V', 'G', 'R', 'T')#define IFF_CONFIGURE	MakeID('C', 'N', 'F', 'G')// MERGE-HMD [[[#if USE_HMD#define IFF_HMDPREF		MakeID('P', 'H', 'M', 'D')#endif // USE_HMD// MERGE-HMD ]]]#define IFF_EDITSTATE	MakeID('P', 'E', 'S', 'T')#define IFF_EDITDRAFT	MakeID('P', 'E', 'D', 'R')#define IFF_EDITRULER	MakeID('P', 'E', 'R', 'U')#define IFF_RENDDRAW	MakeID('P', 'R', 'D', 'R')#define IFF_RENDSHADE	MakeID('P', 'R', 'S', 'H')#define IFF_RENDOPEN	MakeID('P', 'R', 'O', 'P')#define IFF_RENDCAMERA	MakeID('P', 'R', 'C', 'M')#define RULER_DISPLAY	0x01#define	GRID_DISPLAY	0x02	#define	TAB_DISPLAY		0x04	#define	ORIGIN_DISPLAY	0x08	#define	GUIDE_DISPLAY	0x10#define	RULER_SNAP		0x20	#if VRML_ANCHOR		// ABD PRO25 AUG95#define	URL_DISPLAY		0x40	#endif#define	TRACK_DISPLAY	(ORIGIN_DISPLAY|GUIDE_DISPLAY|TAB_DISPLAY)#define	DESIGN_DISPLAY	(ORIGIN_DISPLAY|GUIDE_DISPLAY|GRID_DISPLAY)enum aspectRatioTypes	{	aspectCustom = 0,	aspect35Horz = 1,	aspect35Vert,	aspect225Square,	aspect4x5Horz,	aspect4x5Vert,	aspectTelevision,#if JAPANESE	aspectJapaneseHiVision,#endif // JAPANESE	aspectAcademyAperture,	aspectEuroWideScreen,	aspectUSWideScreen,	aspectAnamorphicAperture,	aspectMaxValue	};enum positionSystem	{	positionWorld = 1,	positionView	};	#define RENDER_FILL			0x01#define	RENDER_FRAME		0x02	#define	RENDER_BLACKFRAME	0x04#define	RENDER_NOTEXTURES	0x08#define	RENDER_NOGOURAUD	0x10	// MERGE-GOURAUD-PRO-7// MERGE-HMD [[[#if USE_HMD#define	RENDER_HMD			0x20#endif // USE_HMD// MERGE-HMD ]]]#define RENDER_NOSHADE	0x01	/* no shade */#define	RENDER_WHITESH	0x02	/* white shade */#define	RENDER_FLATSH	0x04	/* flat shade */#define RENDER_SEEIN	0x01	/* see inside */#define	RENDER_SEEOUT	0x02	/* see outside */#define	RENDER_SEECONN	0x04	/* See through connections */#define NAVIG_BUTTON	0x01	/* button down to walk 	*/#define	NAVIG_CROSS		0x02	/* show cross hair 		*/#define	NAVIG_GRID		0x04	/* show velocity ticks 	*/#define	MASK_NVDISPLAY	0x06	#define	NAVIG_COLLISION	0x08	/* collision detection on */#define EVENT_AUTONAME	0x01	#define	EVENT_COLLIDE	0x02	#define	EVENT_POSITION	0x04	enum preferenceTypes	{	preferApplication,	preferEditor,	preferNavigate,	preferRenderer,	preferDefaults,	preferUnits,	preferWindows,	preferModeler,	preferTranslator,	preferEvents,    preferConfigure	// MERGE-HMD [[[	#if USE_HMD	,	preferHMD	#endif // USE_HMD	// MERGE-HMD ]]]	};	#define	PREF_NOCHANGE	-1struct	Preference:V_IO	{		int 	changeFlag;	virtual void	cPreference(void);	virtual void	dPreference(void);	void	SetName(Handle*,char*);	void	SetChange(int);	int		GetChange(void);	virtual int	IO(struct V_Buffer *);	int		IO_PREF(struct V_Buffer *);	};struct	AppPreference:V_IO	{	struct	EditorPreference	*editor;	struct	NavigatePreference	*navigate;	struct	RenderPreference	*render;	struct	DefaultPreference	*deflt;	struct	UnitPreference		*unit;	struct	ModelPreference		*model;	struct	EventPreference		*event;	struct	WindowPreference	*window;	struct	TranslatorPreference *translator;    struct	ConfigurePreference	*configure;	// MERGE-HMD [[[	#if USE_HMD		struct	HMDPreference		*hmd;	#endif // USE_HMD	// MERGE-HMD ]]]	int		lastItem;		void	cAppPreference(void);	void	dAppPreference(void);	int		MakeDefault(int);	struct Preference *GetPreference(short);	int		IO(struct V_Buffer *);	int		IO_FORM(struct V_Buffer *);	int		OLD_IO(struct V_Buffer *);	void	LoadConfigure(void);    void	SaveConfigure(void);	};struct	EditorPreference:Preference	{	RGBColor	backColor;		/* color of the design view background 	*/	RGBColor	gridColor;		/* color of the design view grid lines 	*/	RGBColor	rulerColor;		/* color of the design view rulers  	*/	RGBColor	homeColor;		/* color of the home position 			*/	RGBColor	guideColor;		/* color of the guides				 	*/	RGBColor	extrRangeColor;	/* color of the design view ruler range */	long		editorState;	/* app's default design state			*/	long		trackState;		/* app's default track state			*/		void	cPreference(void);	int		IO(struct V_Buffer *);	};struct	NavigatePreference:Preference	{	long		navigateMode;	/* app's navigation options				*/	Point		aspectRatio;	/* app's aspectRatio					*/	short		aspectState;	/* app's aspect ratio state				*/	short		aspectType;		/* app's aspect ratio type				*/	short		focalLength;	/* app's default focal length			*/	short		filmWidth;		/* app's default film width				*/		void	cPreference(void);	int		IO(struct V_Buffer *);	};struct	RenderPreference:Preference	{	long		renderDrawMode;		/* app's rendering drawing options		*/	long		renderShadeMode;	/* app's rendering shading options		*/	long		renderOpenMode;		/* app's rendering opening options		*/	char		frameBlack;	char		printWhiteShade;	// New for v1.1 for Windows	char		dither;				/* dither polygons */    char		interpTransp;		/* use interpolative transparency for holes */	void	cPreference(void);	int		IO(struct V_Buffer *);	};struct	DefaultPreference:Preference	{	struct V_Array	*guideLines;/* the application guide lines			*/	Point3DFFixed	localOrigin;/* the local origin of the design views */	Point3DFFixed	homePosition;	/* app's default home position	*/	Point3DFFixed	extrusionMin;	/* app's default extrusion height min	*/	Point3DFFixed	extrusionMax;	/* app's default extrusion height max 	*/	RGBColor		objColor;		/* color of app's default creation color*/	struct PopColor	*popColor;	Handle			objectName;	/* app's default object name			*/	Handle			objectDesc;	/* app's default object description		*/	Handle			layerName;	/* app's default layer name				*/		short			regularSides;	short			ellipseLevels;		void	cPreference(void);	void	dPreference(void);	void	UnitConversion(int);	int		IO(struct V_Buffer *);	};struct	UnitPreference:Preference	{	short			unitSystem;	/* app's default unit system			*/	double			unitSize;	/* app's default unit system			*/	double			baseSize;	/* app's default base rendering size	*/	double			worldSize;	/* app's default world rendering size	*/	double			customSize;	/* app's default world rendering size	*/	Handle			customName;	/* app's default object name			*/	Handle			customSym;	/* app's default object description		*/	short			promoteFlag;		void	cPreference(void);	void	dPreference(void);	int		IO(struct V_Buffer *);	};struct	ModelPreference:Preference	{	struct  LightModel	*lights;	Point3DFFixed	viewPoint;	/* app's default view point 			*/	Angle3DFFixed	viewAngle;	/* app's default view angle			 	*/	RGBColor		skyColor;	/* color of app's sky 					*/		void	cPreference(void);	void	dPreference(void);	int		IO(struct V_Buffer *);	};struct	EventPreference:Preference	{	long	eventTypes;		/* types of events accepted 				*/	char	resolveFlag;	/* resolve model at startup automatically	*/		void	cPreference(void);	int		IO(struct V_Buffer *);	};struct	WindowPreference:Preference	{	struct	V_Array	*windows;		void	cPreference(void);	void	dPreference(void);	void	BuildDefault(void);	void	AddRecord(Rect *,FFixed,Point,int);	void	ClearRecords(void);	int		CheckWindows(void);	int		Compare(struct	V_Array *);	int		IO(struct V_Buffer *);	};//	Configuration Preferences are values associated with the entire//	application and not with individual models. These values are not//	saved in files with the other preferences. On Windows they are saved//	in the WIN.INI file. On the Mac, they should be saved as a resource//	in the application. The Mac part isn't implemented yet.struct	ConfigurePreference:Preference	{	char	flashFill;				/* use Flash Fill */	void	cPreference(void);	int		IO(struct V_Buffer *);	void	LoadConfigure(void);	void	SaveConfigure(void);    };    // MERGE-HMD [[[#if USE_HMDstruct	HMDPreference:Preference	{	// ABD HMD MAR95 moved several variables from HMD.h to here	short hmd_type;		// default hmd type (HMD_STEREO_PAIR, HMD_CYBERSCOPE, etc.)	FFixed ipd;			// inter-pupilary distance (in inches) 	FFixed iod;			// inter-observer distance (in inches)   //	FFixed dp;			// the distance to the physical screen (in inches)   //	FFixed dv;			// the distance to the virtual screen (in inches)	FFixed wp;			// the width of the physical screen (in inches) 	short cross_eyed;		// display cross eyed?	short yblank;		// CrystalEyes YBLANK value	void	cPreference(void);	void	dPreference(void);	int		IO(struct V_Buffer *);    };#endif // USE_HMD// MERGE-HMD ]]]enum translatorSurfaceType	{	exportFace = 1,	exportLine		};enum translatorLineTermination	{	lineTermMac = 1,	lineTermPC,	lineTermUNIX		};enum formatTypes	{	formatSameSnap = 0,	format3DDXF = 1,	format2DDXF,	formatPICT,	formatPICS,	formatQuickTime,	formatClarisCAD,	formatMacDraw,		formatEPS,	formatVoyager,	formatPlayer,	// MERGE-GOURAUD-PRO-11	#if VRML_ANCHOR				// VRML-ABD 23JUN95	formatVRML,	#endif // VRML_ANCHOR	formatBMP,	formatTIFF,	formatFLIC,	formatIllustrator,	formatAVI,	formatMaxValue	};enum screenTypes	{	screenCustom = 0,	screen9 = 1,	screen12,	screen13,	screenFull,	screenWindow,	screen320x200,	screen640x480,	screen800x600,    screen1024x768,	screenMaxValue	};#define IMPORT_PATCH	 	0x01#define IMPORT_NONCONVEX	0x02#define IMPORT_DEGENERATE	0x04#define IMPORT_ORPHANS		0x08enum CLARISFillTypes{	CLARISFillNone = 1,	CLARISFillObject,	CLARISFillWhite	};enum creditTypes	{	creditNone = 1,	creditForm,	creditPICT	};enum EPSForTheType	{	EPSForTheMac = 1,	EPSForThePC,	EPSFMaxValue	};enum TIFFCompressionTypes	{	TIFFLZW = 1,	TIFFPackBits,	TIFFMaxValue	};#if MACINTOSH#define FORMAT_DEFAULT		formatPICT#define LINETERM_DEFAULT	lineTermMac#define EPSFOR_DEFAULT		EPSForTheMac#elif WINDOWS#define FORMAT_DEFAULT		formatBMP#define LINETERM_DEFAULT	lineTermPC#define EPSFOR_DEFAULT		EPSForThePC#endif //WINDOWS//JAM added 18JULY94 for texture embedding/not embedding [[[#if VPRO#define EMBED_TEXTURES_DEFAULT	FALSE#endif//JAM added 18JULY94 for texture embedding/not embedding ]]]struct	TranslatorPreference:Preference	{	short			DXFobjColor;	short			DXFextr;	short			DXFsurf;	Point3DFFixed	exportView;	short			exportType;	short			exportLineMode;	Rect			outputRect;	short			outputColorDepth;	short			startFrame,endFrame;	char			bitmapFlag;	short			smoothFlag;	short			frameBlack;	short			importFlag;	short			screenSize;	short			lastTranslator;	short 		CLARISFillType;	char	 		EPSColorFlag; /* JOEBOB -- change name; not only for EPS */	// New for v1.1 for Windows	short			EPSPreviewFlag;	short			EPSFDevice;	short			TIFFCompression;	short			frameRate;	#if VRML_ANCHOR				// VRML-ABD 23JUN95	short two_sided_polys;		// use 2-sided polygons	short use_cr;				// use carriage returns (CR)	short use_lf;				// use linefeeds (LF)	FFixed surffeature_z_offset;		// surface feature z offset amount	char texture_ext[256];		// VRML texture extension PRO25	short export_textures;			// export textures PRO25	#endif // VRML_ANCHOR	// jca 8 Nov 93 New for WinVR -- not IO'd!!!	ULong			AVICompressorId;        // jca 8 Nov 93 	short			AVICompressorQuality;	// jca 8 Nov 93 	/* I/O'd as a separate chunk using IOVoyager() */	short noviceMode;	short creditType;	struct V_File *pictFile;	struct V_Array *text;	//JAM added 18JULY94 for texture embedding/not embedding [[[	#if VPRO	short EmbedTexturesFlag;	#endif	//JAM added 18JULY94 for texture embedding/not embedding ]]]	void	cPreference(void);	void	dPreference(void);	int		IO(struct V_Buffer *);	int		IOVoyager(struct V_Buffer *);	int		IO_VSimple(struct V_Buffer *);	int		IO_VPICT(struct V_Buffer *);	int		IO_VText(struct V_Buffer *);	void	VerifyPictFile(void);	//JAM added 18JULY94 for texture embedding/not embedding [[[	#if VPRO	short	GetEmbedTextures(void);	void	SetEmbedTextures(short);	#endif	//JAM added 18JULY94 for texture embedding/not embedding ]]]	};#define	PREF_VIEW_NONE		0x00#define	PREF_VIEW_TOP		0x01#define	PREF_VIEW_BOTTOM	0x02#define	PREF_VIEW_LEFT		0x03#define	PREF_VIEW_RIGHT		0x04#define	PREF_VIEW_FRONT		0x05#define	PREF_VIEW_BACK		0x06#define	PREF_VIEW_WALK		0x07#define	PREF_VIEW_TOOLSET	0x08#define	PREF_VIEW_DEPTH		0x09#define	PREF_VIEW_INFO		0x0A#define	PREF_VIEW_POSITION	0x0B// Document window on Windows; ignored on Mac#define PREF_VIEW_DOCUMENT	0x0C#if VPRO#define	PREF_VIEW_TEXTURE	0x0D  //JAM changed from 0x0c to 0x0d#define	PREF_VIEW_COORD		0x0E  //ABD MERGE-GOURAUD-PRO#endif // VPRO#define	PREF_VIEW_SURF_OUTSIDE		0x0F  //ABD MERGE-GOURAUD-PRO-3#define	PREF_VIEW_SURF_INSIDE		0x10  //ABD MERGE-GOURAUD-PRO-3#define	PREF_VIEW_TUMBLE			0x11  //ABD MERGE-GOURAUD-PRO-3#define	PREF_VIEW_LIGHT				0x12  //ABD MERGE-GOURAUD-PRO-3struct	WindowPreRec:indirect{	Rect	where;	Point	scrollPosition;	FFixed	scale;	short	type;		void cWindowRec(void);	void dWindowRec(void);	void SetRect(Rect *);	void SetType(int);	void SetScale(FFixed);	int  Compare(struct WindowPreRec *);	int	 IO(struct V_Buffer *);	}; 	extern RGBColor	vColorSlateL;extern RGBColor	vColorSlateM;extern RGBColor	vColorSlateD;extern RGBColor	vColorSlateLine;extern Point3DFFixed topViewVector;extern Point3DFFixed bottomViewVector;extern Point3DFFixed frontViewVector;extern Point3DFFixed backViewVector;extern Point3DFFixed leftViewVector;extern Point3DFFixed rightViewVector;extern Point3DFFixed defBoundMin;extern Point3DFFixed defBoundMax;extern long appDelayTime;enum	unitTypes	{	unitCustom = 0,	unitInch = 1,	unitFoot,	unitYard,	unitMile,	unitMillimeter,	unitCentimeter,	unitMeter,	unitKilometer,	unitPica,	unitPoint,	unitAngstrom,	unitParsec,	unitMaxValue	};	#define	SI_INCH				0.0254#define	SI_FOOT				0.3048#define	SI_YARD				0.9144#define	SI_MILE				1609.344#define	SI_MILLIMETER		0.001#define	SI_CENTIMETER		0.01#define	SI_METER			1.00#define	SI_KILOMETER		1000.0#define	SI_PICA				2.116667e-3#define	SI_POINT			3.52778e-4#define	SI_ANGSTROM			1e-10#define	SI_PARSEC			3.084e16double	GetSIUnit(int flag);int		ScreenSize(int,Point*,struct V_Window *);int		AspectRatio(int,Point*);#endif //APP_DEFAULTS