#ifndef TRANSLATE_DIALOG#define TRANSLATE_DIALOG#include "IntfDlog.h"#include "WTypes.h"#define TRANS_WIDTH		270#define TRANS_HEIGHT	207struct TransText:V_EditText { virtual int Action(char,long); };	struct TranslateDialog:V_Dialog	{	struct Controller *controller;	struct TranslateObject *translateObject;	int	cTranslateDialog(struct Controller *,int,int);	void Update(void);	};struct TranslateObject:indirect	{	struct V_Text	*formatTitle;		virtual void cTranslateObject(void);	virtual void dTranslateObject(void);	virtual void GetRect(Rect *);    virtual char *GetTitle(void);	virtual void SetInterface(struct V_Dialog *);	virtual void SetOptions(struct TranslatorPreference *);	virtual void GetResults(struct TranslatorPreference *);	};enum	{	snapSize = 			0x0001,	snapColor2 =		0x0002,	snapColor3 =		0x0004,	snapColorPopUp =	0x0008,	snapColorPopBMP =	0x0010,	snapCompression =	0x0020,	snapPreview =		0x0040,	snapPICTFormat =	0x0080,	snapFrames =		0x0100,	snapRate =			0x0200,	snapTIFFCompression=0x0400,	snapGrayscale = 	0x0800,	snapAVI = 			0x1000	// jca 9 Nov 93	};struct Snap2D:TranslateObject	{		int contents;	/* Size Items */	struct	SizePopMenu	*sizePopUp;	struct	TransText	*aspectH,*aspectV;    /* Colors Items */	struct	ColorDepthMenu *colorDepth;	struct	V_CtrlCheck	*grayscale;	struct	V_CtrlRadio	*radioColor,*radioGrayscale,*radioBW;    /* Compression Items */	struct	V_CtrlRadio	*radioCmpOn,*radioCmpOff;	/*TIFF Compression Items */          // jca 8 aug 93	struct 	V_CtrlRadio *radioCmpLZW, *radioCmpPackBits, *radioCmpNone;    /* Preview Items */	struct	V_CtrlCheck	*previewCheck;    /* PICT Format Items */	struct	V_CtrlRadio *radioBitmap,*radioObject;	void	SetContents(int);	virtual void cTranslateObject(void);	virtual void SetInterface(struct V_Dialog *);	virtual void SetOptions(struct TranslatorPreference *);	virtual void GetResults(struct TranslatorPreference *);	};struct PICTSnap:Snap2D	{	void SetInterface(struct V_Dialog *);	void GetRect(Rect *);    char *GetTitle(void);	};struct BMPSnap:Snap2D	{		void SetInterface(struct V_Dialog *);	void GetRect(Rect *);    char *GetTitle(void);	};struct TIFFSnap:Snap2D	{	void SetInterface(struct V_Dialog *);	void GetRect(Rect *);    char *GetTitle(void);	};struct EPSFSnap:Snap2D	{		void SetInterface(struct V_Dialog *);	void GetRect(Rect *);    char *GetTitle(void);	};struct IllustratorSnap:EPSFSnap	{	void SetInterface(struct V_Dialog *);    };struct Snap2DTime:Snap2D	{			struct  Observer	*observer;    /* Frames Items */	struct  TransText	*fromFrame,*toFrame;	struct  V_CtrlCheck	*smoothCheck;    /* Rate Items */	struct	TransText	*rate;	struct	V_Text		*duration;   // AVI items#if WINDOWS && V_AVI	struct AVICompressorMenu	*compressionOps;             // jca 8 Nov 93#endif // WINDOWS && V_AVI	virtual void cTranslateObject(void);	virtual void SetInterface(struct V_Dialog *);	virtual void SetOptions(struct TranslatorPreference *);	virtual void GetResults(struct TranslatorPreference *);	};struct PICSSnap:Snap2DTime	{	void SetInterface(struct V_Dialog *);	void GetRect(Rect *);	char *GetTitle(void);	};struct QuickTimeSnap:Snap2DTime	{	void SetInterface(struct V_Dialog *);	void GetRect(Rect *);	char *GetTitle(void);	};struct ADeskAnimatorSnap:Snap2DTime	{	void SetInterface(struct V_Dialog *);	void GetRect(Rect *);	char *GetTitle(void);	};struct AVISnap:Snap2DTime	{	void SetInterface(struct V_Dialog *);	void GetRect(Rect *);	char *GetTitle(void);	};struct Export2D:TranslateObject	{	struct  ViewPopMenu	*view;	virtual void SetInterface(struct V_Dialog *);	virtual void SetOptions(struct TranslatorPreference *);	virtual void GetResults(struct TranslatorPreference *);	};struct ClarisExport:Export2D	{	struct  FillPopMenu	*fillPop;	struct  V_CtrlCheck *frameBlack;		virtual void SetInterface(struct V_Dialog *);	void SetOptions(struct TranslatorPreference *);	void GetResults(struct TranslatorPreference *);	void GetRect(Rect *);	char *GetTitle(void);	};struct MacDrawExport:ClarisExport	{ void	SetInterface(struct V_Dialog *); };struct ClarisCADExport:ClarisExport	{ void	SetInterface(struct V_Dialog *); };struct DXFExport:TranslateObject	{	struct  V_CtrlRadio *radioCLRObject,*radioCLRLayer;		struct  V_CtrlRadio *radioLTMac,*radioLTPC,*radioLTUnix;		virtual void SetInterface(struct V_Dialog *);	virtual void SetOptions(struct TranslatorPreference *);	virtual void GetResults(struct TranslatorPreference *);	};struct DXF2DExport:DXFExport	{	struct  ViewPopMenu	*view;		void SetInterface(struct V_Dialog *);	void SetOptions(struct TranslatorPreference *);	void GetResults(struct TranslatorPreference *);	void GetRect(Rect *);	char *GetTitle(void);	};struct DXF3DExport:DXFExport	{		struct  V_CtrlRadio *radioSTLine,*radioSTFace;	struct  V_CtrlCheck *extrudeBox;	void SetInterface(struct V_Dialog *);	void SetOptions(struct TranslatorPreference *);	void GetResults(struct TranslatorPreference *);	void GetRect(Rect *);	char *GetTitle(void);	};struct DXF3DImport:TranslateObject	{	struct  V_CtrlCheck *patch;	struct  V_CtrlCheck *nonConvex;	struct  V_CtrlCheck *degenerate;	struct  V_CtrlCheck *orphan;		void SetInterface(struct V_Dialog *);	void SetOptions(struct TranslatorPreference *);	void GetResults(struct TranslatorPreference *);	void GetRect(Rect *);	char *GetTitle(void);	};struct VoyagerExport:TranslateObject	{#if 0	struct	CreditsPopMenu *credits;	struct 	CreditsPreviewButton *preview;	struct	V_CtrlRadio *novice, *pro;	void SetInterface(struct V_Dialog *);	void SetOptions(struct TranslatorPreference *);	void GetResults(struct TranslatorPreference *);#endif		void GetRect(Rect *);	char *GetTitle(void);	};#if VRML_ANCHOR				// VRML-ABD 23JUN95struct VRMLExport:TranslateObject	{	#if 0		// PRO25	struct  V_CtrlCheck *two_sided;	struct  V_CtrlRadio *line_feeds, *carriage_returns, *crlf;	struct	TransText	*z_offset;	#endif		// PRO25	struct	TransText	*texture_ext;	struct V_CtrlCheck *exp_tex;		void SetInterface(struct V_Dialog *);	void SetOptions(struct TranslatorPreference *);	void GetResults(struct TranslatorPreference *);	void GetRect(Rect *);	char *GetTitle(void);	};#endif // VRML_ANCHORenum colorDepthMenu	{	colorDepth1Bit = 1,	colorDepth2Bit,	colorDepth4Bit,	colorDepth8Bit,	colorDepth16Bit,	colorDepth32Bit	};struct ColorDepthMenu:V_PopMenu{	virtual void	AddItems(void);	virtual void	SetColorDepth(int);	virtual int		GetColorDepth(void);	};struct ColorDepthMenuBMP:ColorDepthMenu{	void	AddItems(void);	void	SetColorDepth(int);	int		GetColorDepth(void);	};enum menuScreenType	{#if MACINTOSH	menuScreen9 = 1,	menuScreen12,	menuScreen13,	menuScreenFull,	menuScreenWindow,	menuScreenCustom = menuScreenWindow+2#elif WINDOWS	menuScreen320x200 = 1,	menuScreen640x480,	menuScreen800x600,    menuScreen1024x768,	menuScreenFull,	menuScreenWindow,	menuScreenCustom#endif //WINDOWS	};struct SizePopMenu:V_PopMenu {	struct TransText *horzSize,*vertSize;	struct V_Window *window;	void	AddItems(void);	void	Action(void);	int		GetScreenSize(Point*);	void	SetScreenType(int);	void	LinkText(struct TransText *,struct TransText *);	void	SetWindow(struct V_Window *);	};enum viewMenuPopUp	{	viewPopTop = 1,	viewPopBottom,	viewPopFront,	viewPopBack,	viewPopLeft,	viewPopRight	};struct ViewPopMenu:V_PopMenu {	void	AddItems(void);	Point3DFFixed 	GetViewVector(void);	void	SetViewVector(Point3DFFixed); 	};enum fillMenuPopUp	{	menuFillNone = 1,	menuFillObject,	menuFillWhite	};struct FillPopMenu:V_PopMenu {	void	AddItems(void);	void 	SetFillType(int);	int  	GetFillType(void); 	};// jca 9 Nov 93 {  avi compression stuff#if WINDOWS && V_AVIstruct AVISizeMenu:SizePopMenu {   // this popup has a link to the compression details	struct AVICompressorMenu *aviMenu;	void 	cItem(void);	void	Action(void);	void	SetCompressorLink(AVICompressorMenu *);	};struct AVICompressorMenu:V_PopMenu {	V_Array *compressorList;	void 	cItem(void);	void 	dItem(void);	void 	AddItems(void);    void	SetSizeLink(SizePopMenu *);	ULong	GetCompressorId(void);	int		SetCompressorId(ULong);	int		GetCompressorQuality(void);	void	EnablePossibleCompressors(Rect *, int);	};#endif // WINDOWS && V_AVI// jca 9 Nov 93 }#if 0enum creditsMenuPopUp	{	menuCreditNone,	menuCreditForm,	menuCreditPICT	};struct CreditsPopMenu:V_PopMenu{	struct V_File *file;	struct V_Array *text;	int fileOwned, textOwned;	/* --- */	void	ctheMenu(int,int,int);	void	dArray(void);	void	Display(int);	void	Action(int, long);	void SetCreditType(int); 	int GetCreditType(void); 	void SetFile(struct V_File *,int);	struct V_File *GetFile(int);	void SetText(struct V_Array *, int);	struct V_Array *GetText(int);	};struct CreditsPreviewButton:V_CtrlButton{	struct CreditsPopMenu *menu;	/* --- */	void	SetMenu(struct CreditsPopMenu *);	void	Display(void);	void	Action(void);	};/* Voyaager Standard credits font */#define	DV_TEXT_FONT	geneva#define DV_TEXT_SIZE	10#define DV_TEXT_FACE	0#define DV_TEXT_JUST	teJustLeftstruct CreditsPreview:V_Dialog{	struct V_Picture *creditPICT;	struct V_StatText *creditText;	Rect pictRect;	/* --- */	struct V_Dialog *cCreditsPreview(Rect *, struct V_File *, struct V_Array *, int);	void dPane(void);	void Display(int, int, int);	void MouseDown(Point, long);	int KeyAction(char, long);	};struct CreditsForm:V_Dialog{	int cCreditsForm(Rect *, struct V_Array *);	};struct CreditsTextBox:V_TextBox{	int Action(char, long);	};#endif#endif //TRANSLATE_DIALOG