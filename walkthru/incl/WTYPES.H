#ifndef TYPES#define TYPES#include "VMath.h"#if MACINTOSH/* this is defined in vmath.h now - BIL 8/25/93typedef union FFixed	{	struct		{		short intg;		unsigned short frac;		}f;	long l;	}FFixed;*/#define INITFIXXED(i,f) {i,f}#define InitRect(t,l,b,r) {t,l,b,r}#define InitPt(v,h) { v,h }#elif WINDOWS/* ditto the above commenttypedef union FFixed	{	struct		{		unsigned short frac;		short intg;		}f;	long l;	}FFixed;*/#define INITFIXXED(i,f) {f,i}#define InitRect(t,l,b,r) {l,t,r,b}#define InitPt(v,h) {h,v}#endif //WINDOWS#define intg f.intg#define frac f.frac	// ABD MERGE-TEXTURE 9/13/93 [[[typedef struct Point3DNoPersp		// JAM TEXTURE	{	short x;	short y;	short z;	unsigned long perspecD;	short noperspx;	short noperspy;	} Point3DNoPersp;// ABD MERGE-TEXTURE 9/13/93 ]]]// JAM Oject precision clipping 2/23/94 [[[typedef struct Point3DAllInfo	{	FFixed ScreenX;	FFixed ScreenY;	unsigned long perspecD;	} Point3DAllInfo;// JAM Oject precision clipping 2/23/94 ]]]typedef struct PointFFixed	{	FFixed h;	FFixed v;	} PointFFixed;typedef struct PointLong	{	long h;	long v;	} PointLong;typedef struct Point3DLong	{	long x;	long y;	long z;	long pad; // DAS-HIRES this can also be a short, whichever is faster	} Point3DLong;typedef struct Point3D	{	short x;	short y;	short z;	} Point3D;typedef struct Angle3D	{	short roll;	short pitch;	short yaw;	} Angle3D;typedef struct Point3DFast	{	short x;	short y;	short z;	short pad;	} Point3DFast;typedef struct Point3DFFixed	{	FFixed x;	FFixed y;	FFixed z;	} Point3DFFixed;typedef struct Angle3DFFixed	{	FFixed roll;	FFixed pitch;	FFixed yaw;	} Angle3DFFixed;typedef struct Shear3DFFixed	{	FFixed xy;	FFixed xz;	FFixed yz;	} Shear3DFFixed;typedef struct Point3Ddouble	{	double x;	double y;	double z;	} Point3Ddouble;typedef struct RGBAColor	{	unsigned short red;	unsigned short green;	unsigned short blue;	unsigned short alpha;	} RGBAColor;extern PointFFixed FFPointZero;extern Point3DFFixed FFPoint3DZero;extern Angle3DFFixed FFAngleZero;extern Point PtZero;extern Point3D Pt3DZero;extern Angle3D Ang3DZero;extern PointFFixed PtFFZero;extern Point3DFFixed Pt3DFFZero;extern Angle3DFFixed Ang3DFFZero;extern Shear3DFFixed Shr3DFFZero;extern Rect VZeroRect;extern FFixed FFOne;extern PointFFixed PtFFOne;extern Point3DFFixed Pt3DFFOne;extern FFixed FFPi;extern FFixed FFHalfPi;extern FFixed FFTwoPi;extern FFixed radian2Degree;extern FFixed degree2Radian;extern int VMin;extern int VMax;extern FFixed VFFMin;extern FFixed VFFMax;extern Point PtMax;extern Point PtMin;extern Point3D Pt3DMax;extern Point3D Pt3DMin;extern PointFFixed PtFFMax;extern PointFFixed PtFFMin;extern Point3DFFixed Pt3DFFMax;extern Point3DFFixed Pt3DFFMin;extern Point3DFFixed Ang3DFFMax;extern Point3DFFixed Ang3DFFMin;extern Rect VMaxRect;extern Rect VMinRect;#define PtZero(pt) ((pt).h == 0 && (pt).v == 0)#define Pt3DZero(pt) ((pt).x == 0 && (pt).y == 0 && (pt).z == 0)#define Ang3DZero(ang) ((ang).roll == 0 && (ang).pitch == 0 && (ang).yaw == 0)#define PtFFZero(pt) (FFZero((pt).h) && FFZero((pt).v))#define Pt3DFFZero(pt) (FFZero((pt).x) && FFZero((pt).y) && FFZero((pt).z))#define Ang3DFFZero(ang) (FFZero((ang).roll) && FFZero((ang).pitch) && FFZero((ang).yaw))#define Shr3DFFZero(shr) (FFZero((shr).xy) && FFZero((shr).xz) && FFZero((shr).yz))//#define FFOne(f) ((f).intg == 1 && (f).frac == 0) jca#define FFOne(f) ((f).l == FFOne.l)#define PtFFOne(pt) (FFOne((pt).h) && FFOne((pt).v))#define Pt3DFFOne(pt) (FFOne((pt).x) && FFOne((pt).y) && FFOne((pt).z))#endif //TYPES