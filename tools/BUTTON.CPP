/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  * Platform: 	MACINTOSH 	X *				WINDOWS		 *------------------------------------------------------------------------------ */#include "VTypes.h"#include "Button.h"#include "BallHelp.h"#include "CVDefs.h"#include "Cntrl.h"#include "Space.h"#include "ToolDef.h"	// MERGE-GOURAUD-PRO-10void ToolButton::cButtonSet()	{	controller = NULL;	toggleButton = 0;	defaultButton = 0;	}void ToolButton::SetController(Controller	*ctrl)	{	V_BItem **pBtnItem;    int i;	controller = ctrl;    pBtnItem = (V_BItem**)Use();	for(i=0; i<length;i++,pBtnItem++)		if((*pBtnItem)->heirButton)    		((ToolButton*)(*pBtnItem)->heirButton)->SetController(ctrl);    Unuse();	}void ToolButton::MouseDown(int item,long modifiers)	{	int		c,i,state;			c=(unsigned char)GetChar(item);	toggleButton = defaultButton;		if(doubleClick&modifiers) 		state = LOCKSTATE; 	else		state = ONSTATE;			controller->ControlMessage(c,modifiers,state);	thePane->SetPane();	for(i=0;i<length;i++) { if(i==item) SetState(i,ONSTATE); else  SetState(i,OFFSTATE); }	}int ToolButton::GetTool(int start)	{	int		i,c = FALSE;			for(i=start;i<length;i++) 		if(ONSTATE == GetState(i)) { c = (unsigned char)GetChar(i); break; }	return(c);	}void ToolButton::Reset(int item,int toggle)	{	V_BItem *bItem;	int		c,i;		switch(toggle)		{		case _NO_TOGGLE:			c=(unsigned char)GetChar(item);					controller->ControlMessage(c,0L,ONSTATE);				for(i=0;i<length;i++) 				{ 				if(ONSTATE==GetState(i))toggleButton = i;				if(i==item) SetState(i,ONSTATE); else  SetState(i,OFFSTATE); 				}			break;		case _STEP_TOGGLE:			for(i=0;i<length;i++)if(ONSTATE==GetState(i))break;			Get(i,&bItem);			if(bItem->heirButton)				{				bItem->NextHeir();				thePane->VDisplay(DRAW);				/* Toggle(i);*/				c=(unsigned char)GetChar(i);				controller->ControlMessage(c,0L,ONSTATE);					break;				}		case _TOGGLE:			for(i=0;i<length;i++)if(ONSTATE==GetState(i))break;			Toggle(toggleButton);			c=(unsigned char)GetChar(toggleButton);					controller->ControlMessage(c,0L,ONSTATE);				toggleButton = i;			break;		}			}	void ModButton::cButtonSet()	{	cButton(3);	controller = NULL;		AppendButton(bOPAQUE);	AppendButton(bTRANSLUCENT);	AppendButton(bTRANSPARENT);	}void ModButton::SetController(Controller	*ctrl)	{	V_BItem **pBtnItem;	int i;	controller = ctrl;    pBtnItem = (V_BItem**)Use();	for(i=0; i<length;i++,pBtnItem++)		if((*pBtnItem)->heirButton)    		((ToolButton*)(*pBtnItem)->heirButton)->SetController(ctrl);    Unuse();	}void ModButton::MouseDown(int item,long modifiers)	{	int		c,i,state;			c=(unsigned char)GetChar(item);	if(doubleClick&modifiers) state = LOCKSTATE; else state = ONSTATE;					controller->ControlMessage(c,modifiers,state);	thePane->SetPane();	if(item<3)		for(i=0;i<3;i++) { if(i==item) SetState(i,ONSTATE); else  SetState(i,OFFSTATE); }		else		for(i=3;i<length;i++) { if(i==item) SetState(i,ONSTATE); else  SetState(i,OFFSTATE); }	}	int ModButton::GetTool(int start)	{	int		i,c = FALSE;			for(i=start;i<length;i++) 		if(ONSTATE == GetState(i)) { c = (unsigned char)GetChar(i); break; }	return(c);	}void ModButton::Reset(int item)	{	int		c;	int 	i;		c=(unsigned char)GetChar(item);			controller->ControlMessage(c,0L,ONSTATE);		if(item<3)		for(i=0;i<3;i++) { if(i==item) SetState(i,ONSTATE); else  SetState(i,OFFSTATE); }		else		for(i=3;i<length;i++) { if(i==item) SetState(i,ONSTATE); else  SetState(i,OFFSTATE); }	}void RegPolyButton::cButtonSet()	{	ToolButton::cButtonSet();		cButton(5);		AppendButton(bREGPOLY_ROOM8);	AppendButton(bREGPOLY_ROOM6);	AppendButton(bREGPOLY_ROOM4);	AppendButton(bREGPOLY_ROOM3);	AppendButton(bREGPOLY_ROOM);		SetState(0,ONSTATE);// { DAS-VR-HELP 9/30/93#if VWT	SetHelp(0,TXTB_CR8SIDEDOBJ);	SetHelp(1,TXTB_CR6SIDEDOBJ);	SetHelp(2,TXTB_CRSQUAREOBJ);	SetHelp(3,TXTB_CRTRIANGLEOBJ);	SetHelp(4,TXTB_CRNSIDEDOBJ);#endif// } DAS-VR-HELP 9/30/93	}void SelectToolButton::cButtonSet()	{	ToolButton::cButtonSet();		cButton(2);	/*	AppendButton(bARROW);*/	AppendButton(bLOCK);	AppendButton(bHIDE);		SetState(0,ONSTATE);	// { DAS-VR-HELP 9/30/93#if VWT/*	SetHelp(0,helpSelectDesign);/* NEEDS BALLOON HELP */	SetHelp(0,TXTB_LOCKOBJECT);	SetHelp(1,TXTB_HIDEOBJECT);#endif// } DAS-VR-HELP 9/30/93	}void UtilityToolButton::cButtonSet()	{	ToolButton::cButtonSet();		cButton(2);		AppendButton(bDROPPER);	AppendButton(bMEASURE_TOOL);		SetState(0,ONSTATE);	// { DAS-VR-HELP 9/30/93#if VWT	SetHelp(0,TXTB_COLORLIFT);	SetHelp(1,TXTB_TAPEMEASURE);#endif// } DAS-VR-HELP 9/30/93	}void PinButton::cButtonSet()	{			ToolButton::cButtonSet();		cButton(3);		AppendButton(bROLL);	AppendButton(bPITCH);	AppendButton(bYAW);		pin = PIN_R|PIN_P|PIN_Y;		SetState(0,(PIN_R&pin) ? TRUE : FALSE );	SetState(1,(PIN_P&pin) ? TRUE : FALSE );	SetState(2,(PIN_Y&pin) ? TRUE : FALSE );	// { DAS-VR-HELP 9/30/93#if VWT	SetHelp(0,TXTB_XZCONSTRAIN);	SetHelp(1,TXTB_YZCONSTRAIN);	SetHelp(2,TXTB_XYCONSTRAIN);#endif// } DAS-VR-HELP 9/30/93	}void PinButton::MouseDown(int item,long modifiers)	{	char			c;		switch(c=GetChar(item))		{		case bROLL:		case bPITCH:		case bYAW:			while (TRUE)				{				pin = 0;				if(GetState(0))pin|=PIN_Y;				if(GetState(1))pin|=PIN_P;				if(GetState(2))pin|=PIN_R;				if (pin) break;				SetState(item,ONSTATE);				}			controller->Request(this,msgEdit,objPin,0);			break;		}	}	int  PinButton::GetPin() { 	return(pin); }