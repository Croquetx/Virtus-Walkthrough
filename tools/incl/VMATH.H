#ifndef _VMATH_#define _VMATH_#include "VTypes.h"#include "VAsm.h"// the asm only works or real macs, not power pc's// from header vasm.h:// #define MAC_ASMABLE		(MACINTOSH && !__powerc)#define PI				3.14159265358979323846#define PI2				(PI*2)#define LIMIT(x, min, max) \	((x) < (min) ? (min) : ((x) > (max) ? (max) : (x)))double Vsqrt(double num);/*#define LongMULT(r,s1,s2)	\	asm { 					\		move.w	s1, d0		\		muls.w	s2, d0		\		move.l	d0, r		\		}#define UnLongMULT(r,s1,s2) \	asm { 					\		move.w 	s1,d0 		\		mulu.w	s2,d0 		\		move.l	d0,r 		\		}			#define LongSQUARE(r,s)		\	asm {					\		move.w s,d0			\		muls.w d0,d0			\		move.l d0,r			\		}*/#define BIT_WIDTH(a, w) 				\	{ 									\	register ULong b = (a); 	\	register int width = 0; 			\	do { width++; } while (b >>= 1); 	\	(w) = width; 						\	}int BitWidth(ULong);int LSqrt(long);/*------------------------------------------------------------------------------ * FFixed library *------------------------------------------------------------------------------*/#define ENGLISH_FORM	0x01#define METRIC_FORM		0x02#define RADIAN_FORM		0x04#define DEGREE_FORM		0x08#define PRECISE			0x10/*typedef struct FFixed	{	short intg;	unsigned short frac;	} FFixed;*/#if MACINTOSHtypedef union FFixed	{	struct		{		short intg;		unsigned short frac;		}f;	long l;	}FFixed;#elif WINDOWStypedef union FFixed	{	struct		{		unsigned short frac;		short intg;		}f;	long l;	}FFixed;#endif#define intg f.intg#define frac f.fracextern FFixed FFZero;extern FFixed inchToMeter;extern FFixed degreeToRadian;extern long FFOver;extern int FFErr;#define FFERR_OVERFLOW	1#define FFERR_DIVZERO	2#define FFOverflow() FFOver#define FFError()	FFErr;#define LESS	-1#define GRTR	1#define EQUL	0#define FFZero(f) (f.l==0)//#define FFPositive(f) (f.intg>0 || (f.intg==0 && f.frac!=0))		// (?? gjr081993)#define FFPositive(f) (f.l>0)#define FFNegative(f) (f.intg<0)#define FFEqual(x,y) (x.l==y.l)#define FFMin(t,x,y) if(x.l<y.l)t=x; else t=y;#define FFMax(t,x,y) if(x.l>y.l)t=x; else t=y;	#define FFFShift(val,shift) ((shift<0)?(val.l>>=-shift):(val.l<<=shift))#define FFFNeg(x) x.l=-x.l#define FFRound(f) ((f).frac < 0x8000 ? (f).intg : (f).intg+1)// Install cpu-sensitive routines //gjr082093void InitVMathAsm(void);extern FFixed (* FFMult)(FFixed,FFixed);FFixed FFMult_C(FFixed,FFixed);#if MAC_ASMABLEFFixed FFMult_M000(FFixed,FFixed);FFixed FFMult_M020(FFixed,FFixed);#endif // MACINTOSHextern FFixed (* FFDiv)(FFixed,FFixed);FFixed FFDiv_C(FFixed,FFixed);#if MAC_ASMABLEFFixed FFDiv_M000(FFixed,FFixed);FFixed FFDiv_M020(FFixed,FFixed);#endif // MACINTOSH//-------------------------------//gjr082093long   FFLongMult(FFixed,FFixed);FFixed FFMultIntShift(FFixed, short, short);FFixed FFAdd(FFixed,FFixed);FFixed FFSub(FFixed,FFixed);int	   FFLogic(FFixed,FFixed);FFixed FFNeg(FFixed);FFixed FFShift(FFixed,int);FFixed DblToFixed(double);double FixedToDbl(FFixed);void FixedToString(FFixed,strPtr,int);int FFixed2String(strPtr string,FFixed fnum,int type);int String2FFixed(strPtr string,FFixed *fnum,int type);extern FFixed FixedPointFive;	//JAM ABD MERGE-TEXTURE 9/13/93#endif //_VMATH_