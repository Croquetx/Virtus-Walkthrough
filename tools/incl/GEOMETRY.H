/*------------------------------------------------------------------------------ * VWINDOWS_ - the window object toolbox * * Copyright _ 1989 by Virtus Corporation * All Rights Reserved * Written by David A. Smith * 111 Gold Meadow Drive * Cary, North Carolina    27513 * (919) 469-8485 *------------------------------------------------------------------------------ * Geometry.h *------------------------------------------------------------------------------*/#ifndef GEOMETRY#define GEOMETRY#include "WTypes.h"#define COUNTERCLOCKWISE	0#define CLOCKWISE			1#define LINEAR				2#define UNKNOWN				3#define NO_INTERSECT		0#define INTERSECT			1#define END_INTERSECT		2#define CCW_ERR				-1#define NONE		 		0#define INTERIOR_OK	 		1int PtOnLine(Point,Point,Point);int LPtOnLine(PointLong, PointLong, PointLong);int Clockwise(Point,Point,Point);int ClockwiseStrict(Point,Point,Point);int FFClockwise(PointFFixed,PointFFixed,PointFFixed);int PolyClockwise(struct V_Array *pnts);int Intersect(Point,Point,Point,Point);int FFIntersect(PointFFixed,PointFFixed,PointFFixed,PointFFixed);Point	ExactPtOnLine(Point,Point,Point);PointFFixed	 FFPtToLine(PointFFixed,PointFFixed,PointFFixed);int PointConvex(Point, Point,Point,Point, Point);// Send in a connection and an empty V_Array of PointFFixed and get a list of the// surface points projected onto the least significant (x-y-z) plane if plane is 0// else it uses plane to project onto. BG 3/23/94void Fast2DFromConnection(struct Connection*, struct V_Array*, short* plane);#define MClockwise(rval,p0,p1,p2) 			\{											\int dx, dz, dxp, dzp;						\long b1, b2;								\											\dx = p2.h - p1.h;							\dz = p2.v - p1.v;							\dxp = p0.h - p1.h;							\dzp = p0.v - p1.v;							\if(dx==0 && dz==0)rval= UNKNOWN;			\else if(dxp==0 && dzp==0)rval= UNKNOWN;		\else										\	{										\	b1=(long)dz*dxp;								\	b2=(long)dx*dzp;								\	if (b1 > b2) rval= CLOCKWISE;			\	else if (b1 < b2) rval= COUNTERCLOCKWISE;\	else rval= LINEAR;						\	}										\}#endif // GEOMETRY