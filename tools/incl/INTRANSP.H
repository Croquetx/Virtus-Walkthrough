#ifndef INTERPTRANSP_H#define INTERPTRANSP_H/* 	TRANSPARENCY_INTERP_INIT contains the variables used in the macros and 	must be declared in the procedure's declaration section. The macros 	must be called in the same order _WITHOUT_FAIL_ to ensure that they work.	ALWAYS call InterpolateAlphaFrontToBack before calling 	InterpolateColorFrontToBack, because InterpolateColorFrontToBack uses the	results of InterpolateAlphaFrontToBack.		*/#define ROUNDOFF_HELPER		0x7FFF#define TRANSPARENCY_INTERP_INIT \ULong t_i_opacity_, t_i_tmp_long_/* the calculation is:  opacity = localOp * (MAX_OP - inheritedOp) + inheritedOp */#define InterpolateAlphaFrontToBack(localOp, inheritedOp, return_val) \	t_i_opacity_ = (((ULong) localOp * (OPAQUE_NOM ^ inheritedOp)) + ROUNDOFF_HELPER) >> 16; \	t_i_tmp_long_ = t_i_opacity_ + inheritedOp;\	return_val = (t_i_tmp_long_ > OPAQUE_NOM)?OPAQUE_NOM:(unsigned short) t_i_tmp_long_;/* the calculation is:  color = inheritColor + localOp*(MAX_OP-inheritedOp) * localColor	"localOp*(MAX_OP-inheritedOp)" can be reused (and is reused) from the 	alpha calculation */#define InterpolateColorFrontToBack(localColor,inheritColor,return_val)\	t_i_tmp_long_ = t_i_opacity_ * (ULong) localColor;\	t_i_tmp_long_ = (ULong) ((t_i_tmp_long_ + (ULong) ROUNDOFF_HELPER) >> 16) + inheritColor;\	return_val = (t_i_tmp_long_ > OPAQUE_NOM)?OPAQUE_NOM:(unsigned short) t_i_tmp_long_;	/* this is a simplification of the InterpolateColorFrontToBack routine to	take advantage of the initialization case, which can be easier than the	regular one (since you don't have to initialize the transparency vars) */#define InterpolateColorFirstTime(color, opacity, return_val) \	t_i_tmp_long_ = (ULong) color * opacity; \	return_val = (unsigned short) ((t_i_tmp_long_ + (ULong) ROUNDOFF_HELPER) >> 16);		#endif