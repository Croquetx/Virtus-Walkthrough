#ifndef MISC_MARK#define MISC_MARK#include "WTypes.h"#include "VItem.h"#define MoveToPt(pt) MoveTo((pt).h,(pt).v)#define LineToPt(pt) LineTo((pt).h,(pt).v)#define CursorMove(p,o) (o.h==p.h&&o.v==p.v?FALSE:TRUE)#define CursorMoveMore(p,o) ((abs(o.h-p.h)>6)||(abs(o.v-p.v)>6))#define F2D(x) x.l/65536.0#define LIM_NONE	0x01#define LIM_HORZ	0x02#define LIM_VERT	0x04#define LIM_ROT		0x08void BalloonHotRect(Rect *,Point);void MakeRect(Rect *, Point, Point);void DrawRect(Point, Point);void SetAngle(int, int *, int *);int  FindAngle(int, int);struct V_Array *RegularPoly(int, Point, int, int);void RotateRect(Point	pointArray[4],Point,Point,Point,FFixed,int,int);long Lightness(RGBColor rgb);FFixed BuildRect(struct V_Array **,PointFFixed,int,int,int);	FFixed BuildRegular(struct V_Array **,PointFFixed,PointFFixed,int);	void PlaneEquation(Point3DFFixed,Point3DFFixed,Point3DFFixed,FFixed *,FFixed *,FFixed *,FFixed *);void PlaneEquationDbl(Point3DFFixed,Point3DFFixed,Point3DFFixed,double *,double *,double *,double *);	// MERGE18Angle3DFFixed AlignToVector(Point3DFFixed,Point3DFFixed,int);FFixed DistanceToPlane(Point3DFFixed,FFixed,FFixed,FFixed,FFixed);void RegularPolyTest(int nSides, Point center, int radius, int ang360,int onLine);int LineConvex(Point l1, Point l2,Point r1,Point r2, Point p1, Point p2);void Ellipsis (char *, int );		// MERGE17     #if MACINTOSH                            // jca 27 Sept 93    {void PStrConcat(UChar * , UChar * );	// MERGE17#endif // MACINTOSH                     // jca 27 Sept 93    }int CenterTextInRect(char *, Rect *, Rect *);  // jca 15 Oct 93Point3DFFixed	FF3DSub(Point3DFFixed,Point3DFFixed);Point3DFFixed	FF3DAdd(Point3DFFixed,Point3DFFixed);PointFFixed		FF2DSub(PointFFixed,PointFFixed);PointFFixed		FF2DAdd(PointFFixed,PointFFixed);void DrawDropRect(Rect *);void DrawDropSymbol(Rect *);void DrawPopSymbol(Rect *);void DrawSelectSymbol(Rect *);#endif //MISC_MARK