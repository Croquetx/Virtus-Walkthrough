/*------------------------------------------------------------------------------ * Virtus WalkThrough_ * Version 1.1.1 * * Copyright _ 1990-1992 by Virtus Corporation * All Rights Reserved * Written by   *				 *				Mark J. Uland * Virtus Corporation * Suite 204 * 117 Edinburgh South * Cary, North Carolina    27511 * (919) 467-9700 *------------------------------------------------------------------------------ * Source File:  * Notes:  * History:  * Platform: 	MACINTOSH 	X *				WINDOWS		 *------------------------------------------------------------------------------ */#include "VTypes.h"#include "Cntrl.h"#include "Informtn.h"#include "VTextDef.h"#include "AppDeflt.h"#include "VWindow.h"#include "VPane.h"#include "VTextDef.h"#include <string.h>#include <stdio.h>void Controller::cController(V_Document *doc) {document=doc; strcpy(title,TXT_EMPTYSTRING); }void Controller::dController()	{		if(information) information->dInformation();	delete(this);	}void Controller::SetController(Controller *ctrl) { controller = ctrl; }void Controller::LaunchController(LaunchInit launchInit, int type)	{ controller->LaunchController(launchInit,type); }void Controller::SetChange(int state){ if(controller) controller->SetChange(state); }void *Controller::cTool( Controller *ctrl,int toolType) { return(NULL); }void Controller::InstallTool( V_Pane *pane) { }	void Controller::Activate(int install) { 	activateState = install; }void Controller::SetType(int	newType) { type = newType; }int Controller::GetType() { return(type); }void Controller::ControlMessage(int message,long modifiers,int type){ }	void Controller::GetPlace(Rect *r,int warning,int who){ }V_Window *Controller::GetWindow(int type){ return(NULL); }	voidController::SetTitle(char *newTitle)	{	V_Window *window;	char	fileName[256],str[256];			if(newTitle) strcpy(title,newTitle);	if(!(window = GetWindow(GetType()))) return;#if WINDOWS	window->SetTitle(title);#else	controller->GetTitle(fileName);#if VPLAYER	strcpy(str,newTitle);#else	sprintf(str,"%s:%s",fileName,title);#endif //VPLAYER	window->SetTitle(str);#endif //WINDOWS	}void Controller::GetTitle(char *str){ strcpy(str,title); }			void Controller::Request(void *ctrl,int who,int flag,int item){   }void Controller::Response(void *ctrl,int who,int flag,int item) { }int Controller::CheckPolyhedron(void *obj) { return(FALSE); }void Controller::Hide(int state) { }int Controller::EditPolyhedron(void *obj,int flag)	{ if(controller) controller->EditPolyhedron(obj,flag); }AppPreference * Controller::GetPreference()	{		AppPreference *appPref;	if(controller) appPref = controller->GetPreference();	else appPref = NULL;		return(appPref);	}int Controller::UnitConversion(double factor) { return FALSE;}void Controller::SetPreference(AppPreference *appPref,int flag) { }int Controller::ExportContents(V_Buffer *buffer,int flag) { return(-1); }void Controller::LoadWindowPref(AppPreference *appPref) { }// jca 24MAR94 routines to tell the menus (or anything else) if// there is anything selected, and whether it is opaque, round,// skewed, etc.  int Controller::IsAnythingSelected(void) { return(0); }int Controller::CanBufferPaste(V_Buffer *vBuf) { return((vBuf->IOGetPosition()) ? 1 : 0); } // jca 28MAR94 can we paste the stuff in the clipBuf, essentially.ULong Controller::SelectedConditions(void) { return(0L); }    // jca 24MAR94 tells menus about the conditions of the selected items// ABD MERGE-TEXTURE 9/14/93 [[[struct TextureItem * Controller::GetTexture()	{		return(NULL);	}// ABD MERGE-TEXTURE 9/14/93 ]]]//#if VPRO void Controller::ActivatePalette(int a, Boolean b) {} void Controller::SetPaletteController(int a, struct Controller *c) {}//#endif // VPRO